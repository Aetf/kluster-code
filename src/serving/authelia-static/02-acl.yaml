##
## Access Control Configuration
##
## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
##
## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
## to anyone. Otherwise restrictions follow the rules defined.
##
## Note: One can use the wildcard * to match any subdomain.
## It must stand at the beginning of the pattern. (example: *.mydomain.com)
##
## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
##
## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
##
## - 'domain' defines which domain or set of domains the rule applies to.
##
## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
##    provided. If provided, the parameter represents either a user or a group. It should be of the form
##    'user:<username>' or 'group:<groupname>'.
##
## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
##
## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
##   is optional and matches any resource if not provided.
##
## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
access_control:
  ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
  ## resource if there is no policy to be applied to the user.
  default_policy: deny

  # networks:
  # - name: private
  #   networks:
  #   - 10.0.0.0/8
  #   - 172.16.0.0/12
  #   - 192.168.0.0/16
  # - name: vpn
  #   networks:
  #   - 10.9.0.0/16
  networks: []

  rules:
  - domain:
    - 'k8s.{{ env "CONFIG_EXTRA_DOMAIN" }}'
    - 'mon.{{ env "CONFIG_EXTRA_DOMAIN" }}'
    subject: "group:admins"
    policy: two_factor

  - domain:
    - 'bt.{{ env "CONFIG_EXTRA_DOMAIN" }}'
    subject: "group:users"
    policy: two_factor

  - domain:
    - 'sync.{{ env "CONFIG_EXTRA_DOMAIN" }}'
    subject: "group:users"
    policy: two_factor

  - domain:
    - 'dav.{{ env "CONFIG_EXTRA_DOMAIN" }}'
    subject: "user:webdav"
    policy: one_factor

  - domain:
    - 'spool.{{ env "CONFIG_EXTRA_DOMAIN" }}'
    subject: "group:users"
    policy: one_factor

## OpenID Connect 1.0 policies
## The authorization policies section allows creating custom authorization policies which can be applied to clients.
## This is useful if you wish to only allow specific users to access specific clients i.e. RBAC.
## Itâ€™s generally recommended however that users rely on the OpenID Connect 1.0 relying party to provide RBAC controls based on the available claims.
##
## Each policy applies one of the effective policies which can be either one_factor or two_factor as per the standard policies,
## or also the deny policy which is exclusively available via these configuration options.
##
## Each rule within a policy is matched in order where the first fully matching rule is the applied policy.
## If the deny rule is matched the user is not asked for consent and it is considered a rejected consent and returns an OpenID Connect 1.0 access_denied error.
##
## The key for the policy itself is the name of the policy, which is used when configuring the client authorization_policy option.
## In the example we name the policy policy_name.
##
## See https://www.authelia.com/configuration/identity-providers/openid-connect/provider/#authorization_policies
identity_providers:
  oidc:
    authorization_policies:
      jellyfin:
        default_policy: 'deny'
        rules:
          - policy: 'two_factor'
            subject: 'group:admins'
          - policy: 'one_factor'
            subject: 'group:users'
          - policy: 'one_factor'
            subject: 'group:jellyfin-users'
      immich:
        default_policy: 'deny'
        rules:
          - policy: 'two_factor'
            subject: 'group:admins'
          - policy: 'two_factor'
            subject: 'group:users'
          - policy: 'two_factor'
            subject: 'group:immich-users'
      grafana:
        default_policy: 'deny'
        rules:
          - policy: 'two_factor'
            subject: 'group:admins'
          - policy: 'two_factor'
            subject: 'group:users'
          - policy: 'two_factor'
            subject: 'group:grafana-users'


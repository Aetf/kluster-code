######################################################################
#                  Runtime configuration file for Exim               #
######################################################################


# This file is divided into several parts, all but the first of which are
# headed by a line starting with the word "begin". Only those parts that
# are required need to be present. Blank lines, and lines starting with #
# are ignored.


######################################################################
#                    MAIN CONFIGURATION SETTINGS                     #
######################################################################
#

# Specify your host's canonical name here. This should normally be the fully
# qualified "official" name of your host. If this option is not set, the
# uname() function is called to obtain the name. In many cases this does
# the right thing and you need not set anything explicitly.

# We'd like to set `primary_hostname` to the `HOSTNAME` environment variable,
# but this configuration option does not support expansion.
# As a workaround, we specify the hostname in `helo_data` on the SMTP transport.
# primary_hostname =


# The next three settings create two lists of domains and one list of hosts.
# These lists are referred to later in this configuration using the syntax
# +local_domains, +relay_to_domains, and +relay_from_hosts, respectively. They
# are all colon-separated lists:

domainlist  local_domains    = ${env{LOCAL_DOMAINS}{$value}{@}}
domainlist  relay_to_domains = ${env{RELAY_TO_DOMAINS}{$value}{}}
addresslist relay_to_users   = ${env{RELAY_TO_USERS}{$value}{}}
hostlist    relay_from_hosts = ${env{RELAY_FROM_HOSTS}{$value}{}}

# (We rely upon hostname resolution working for localhost, because the default
# uncommented configuration needs to work in IPv4-only environments.)

# Most straightforward access control requirements can be obtained by
# appropriate settings of the above options. In more complicated situations,
# you may need to modify the Access Control Lists (ACLs) which appear later in
# this file.

# The first setting specifies your local domains, for example:
#
#   domainlist local_domains = my.first.domain : my.second.domain
#
# You can use "@" to mean "the name of the local host", as in the default
# setting above. This is the name that is specified by primary_hostname,
# as specified above (or defaulted). If you do not want to do any local
# deliveries, remove the "@" from the setting above. If you want to accept mail
# addressed to your host's literal IP address, for example, mail addressed to
# "user@[192.168.23.44]", you can add "@[]" as an item in the local domains
# list. You also need to uncomment "allow_domain_literals" below. This is not
# recommended for today's Internet.

# The second setting specifies domains for which your host is an incoming relay.
# If you are not doing any relaying, you should leave the list empty. However,
# if your host is an MX backup or gateway of some kind for some domains, you
# must set relay_to_domains to match those domains. For example:
#
# domainlist relay_to_domains = *.myco.com : my.friend.org
#
# This will allow any host to relay through your host to those domains.
# See the section of the manual entitled "Control of relaying" for more
# information.

# The third setting specifies hosts that can use your host as an outgoing relay
# to any other host on the Internet. Such a setting commonly refers to a
# complete local network as well as the localhost. For example:
#
# hostlist relay_from_hosts = <; 127.0.0.1 ; ::1 ; 192.168.0.0/16
#
# The "/16" is a bit mask (CIDR notation), not a number of hosts. Note that you
# have to include 127.0.0.1 if you want to allow processes on your host to send
# SMTP mail by using the loopback address. A number of MUAs use this method of
# sending mail.  Often, connections are made to "localhost", which might be ::1
# on IPv6-enabled hosts.  Do not forget CIDR for your IPv6 networks.

# All three of these lists may contain many different kinds of item, including
# wildcarded names, regular expressions, and file lookups. See the reference
# manual for details. The lists above are used in the access control lists for
# checking incoming messages. The names of these ACLs are defined here:

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data

# You should not change those settings until you understand how ACLs work.


# If Exim is compiled with support for TLS, you may want to enable the
# following options so that Exim allows clients to make encrypted
# connections. In the authenticators section below, there are template
# configurations for plaintext username/password authentication. This kind
# of authentication is only safe when used within a TLS connection, so the
# authenticators will only work if the following TLS settings are turned on
# as well.

# Allow any client to use TLS.
tls_advertise_hosts = *

# Specify the location of the Exim server's TLS certificate and private key.
# The private key must not be encrypted (password protected). You can put
# the certificate and private key in the same file, in which case you only
# need the first setting, or in separate files, in which case you need both
# options.

tls_certificate = /tls/tls.crt
tls_privatekey = /tls/tls.key

# In order to support roaming users who wish to send email from anywhere,
# you may want to make Exim listen on other ports as well as port 25, in
# case these users need to send email from a network that blocks port 25.
# The standard port for this purpose is port 587, the "message submission"
# port. See RFC 4409 for details. Microsoft MUAs cannot be configured to
# talk the message submission protocol correctly, so if you need to support
# them you should also allow TLS-on-connect on the traditional but
# non-standard port 465.

# Use 8025 internally.  The exim user can't attach to priviledged ports
daemon_smtp_ports = 8025
# tls_on_connect_ports = 465

######################################################################
#          disable TLS 1.1 & replace with TLS 1.2 or higher          #
######################################################################
# With OpenSSL 1.0.1+, Exim now supports TLS 1.1 and TLS 1.2.  If built
# against 1.0.1a then you will get a warning message and the
# "openssl_options" value will not parse "no_tlsv1_1": the value changes
# incompatibly between 1.0.1a and 1.0.1b, because the value chosen for 1.0.1a
# is infelicitous.  We advise avoiding 1.0.1a.
# "openssl_options" gains "no_tlsv1_1", "no_tlsv1_2" and "no_compression".
# COMPATIBILITY WARNING: The default value of "openssl_options" is no longer
# "+dont_insert_empty_fragments".  
# "Default: +no_sslv2 +no_sslv3 +single_dh_use +no_ticket +no_renegotiation".
openssl_options = +no_sslv2 +no_sslv3 +no_tlsv1 +no_tlsv1_1 +no_ticket +single_dh_use

# Enable an efficiency feature.  We advertise the feature; clients
# may request to use it.  For multi-recipient mails we then can
# reject or accept per-user after the message is received.
#
prdr_enable = true


# Unless you run a high-volume site you probably want more logging
# detail than the default.  Adjust to suit.

log_selector = +smtp_protocol_error +smtp_syntax_error \
  +tls_certificate_verified


# When Exim can neither deliver a message nor return it to sender, it "freezes"
# the delivery error message (aka "bounce message"). There are also other
# circumstances in which messages get frozen. They will stay on the queue for
# ever unless one of the following options is set.

# This option unfreezes frozen bounce messages after two days, tries
# once more to deliver them, and ignores any delivery failures.

ignore_bounce_errors_after = 2d

# This option cancels (removes) frozen messages that are older than a week.

timeout_frozen_after = 7d


# Exim does not make use of environment variables itself. However,
# libraries that Exim uses (e.g. LDAP) depend on specific environment settings.
# There are two lists: keep_environment for the variables we trust, and
# add_environment for variables we want to set to a specific value.
# Note that TZ is handled separately by the timezone runtime option
# and TIMEZONE_DEFAULT buildtime option.

# keep_environment = ^LDAP
# add_environment = PATH=/usr/bin::/bin
keep_environment = LOCAL_DOMAINS : RELAY_FROM_HOSTS : RELAY_TO_DOMAINS : RELAY_TO_USERS : DISABLE_SENDER_VERIFICATION : SMARTHOST : SMTP_PASSWORD : SMTP_USERDOMAIN : SMTP_USERNAME : HOSTNAME


######################################################################
#                       ACL CONFIGURATION                            #
#         Specifies access control lists for incoming SMTP mail      #
######################################################################

begin acl

# This access control list is used for every RCPT command in an incoming
# SMTP message. The tests are run in order until the address is either
# accepted or denied.

acl_check_rcpt:

  # Accept if the source is local SMTP (i.e. not over TCP/IP). We do this by
  # testing for an empty sending host field.

  accept  hosts = :
          control = dkim_disable_verify

  #############################################################################
  # The following section of the ACL is concerned with local parts that contain
  # @ or % or ! or / or | or dots in unusual places.
  #
  # The characters other than dots are rarely found in genuine local parts, but
  # are often tried by people looking to circumvent relaying restrictions.
  # Therefore, although they are valid in local parts, these rules lock them
  # out, as a precaution.
  #
  # Empty components (two dots in a row) are not valid in RFC 2822, but Exim
  # allows them because they have been encountered. (Consider local parts
  # constructed as "firstinitial.secondinitial.familyname" when applied to
  # someone like me, who has no second initial.) However, a local part starting
  # with a dot or containing /../ can cause trouble if it is used as part of a
  # file name (e.g. for a mailing list). This is also true for local parts that
  # contain slashes. A pipe symbol can also be troublesome if the local part is
  # incorporated unthinkingly into a shell command line.
  #
  # Two different rules are used. The first one is stricter, and is applied to
  # messages that are addressed to one of the local domains handled by this
  # host. The line "domains = +local_domains" restricts it to domains that are
  # defined by the "domainlist local_domains" setting above. The rule  blocks
  # local parts that begin with a dot or contain @ % ! / or |. If you have
  # local accounts that include these characters, you will have to modify this
  # rule.

  deny    message       = Restricted characters in address
          domains       = +local_domains
          local_parts   = ^[.] : ^.*[@%!/|]

  # The second rule applies to all other domains, and is less strict. The line
  # "domains = !+local_domains" restricts it to domains that are NOT defined by
  # the "domainlist local_domains" setting above. The exclamation mark is a
  # negating operator. This rule allows your own users to send outgoing
  # messages to sites that use slashes and vertical bars in their local parts.
  # It blocks local parts that begin with a dot, slash, or vertical bar, but
  # allows these characters within the local part. However, the sequence /../
  # is barred. The use of @ % and ! is blocked, as before. The motivation here
  # is to prevent your users (or your users' viruses) from mounting certain
  # kinds of attack on remote sites.

  deny    message       = Restricted characters in address
          domains       = !+local_domains
          local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./
  #############################################################################

  # Accept mail to postmaster in any local domain, regardless of the source,
  # and without verifying the sender.

  accept  local_parts   = postmaster
          domains       = +local_domains

  # Unless `DISABLE_SENDER_VERIFICATION` is provided,
  # deny for requests for which the sender address cannot be verified.
  #
  # To disable, we just set this to a benign value (like `recipient`).
  # Ideally, we'd like to set it to an empty list, but that doesn't seem to be possible.
  # `recipient` is benign, because we always verify the recipient anyway
  # (there's another `require verify = recipient` entry in this configuration in any case).
  require verify        = ${env{DISABLE_SENDER_VERIFICATION}{recipient}{sender}}

  # Accept if the message comes from one of the hosts for which we are an
  # outgoing relay. It is assumed that such hosts are most likely to be MUAs,
  # so we set control=submission to make Exim treat the message as a
  # submission. It will fix up various errors in the message, for example, the
  # lack of a Date: header line. If you are actually relaying out out from
  # MTAs, you may want to disable this. If you are handling both relaying from
  # MTAs and submissions from MUAs you should probably split them into two
  # lists, and handle them differently.

  # Recipient verification is omitted here, because in many cases the clients
  # are dumb MUAs that don't cope well with SMTP error responses. If you are
  # actually relaying out from MTAs, you should probably add recipient
  # verification here.

  # Note that, by putting this test before any DNS black list checks, you will
  # always accept from these hosts, even if they end up on a black list. The
  # assumption is that they are your friends, and if they get onto a black
  # list, it is a mistake.

  accept  hosts         = +relay_from_hosts
          domains       = +relay_to_domains
          control       = submission/sender_retain
          control       = dkim_disable_verify

  # Accept emails with recipients in our whitelist.  Similar to the domain
  # whitelisting above, but for specific email addresses

  accept  hosts         = +relay_from_hosts
          recipients    = +relay_to_users
          control       = submission/sender_retain
          control       = dkim_disable_verify

  # Accept if the message arrived over an authenticated connection, from
  # any host. Again, these messages are usually from MUAs, so recipient
  # verification is omitted, and submission mode is set. And again, we do this
  # check before any black list tests.

  accept  authenticated = *
          control       = submission/sender_retain
          control       = dkim_disable_verify

  # Insist that a HELO/EHLO was accepted.

  require message = nice hosts say HELO first
          condition = ${if def:sender_helo_name}

  # Insist that any other recipient address that we accept is in one of
  # our local domain. Relay domains are handled above.
  # Any other domain is rejected as being unacceptable for relaying.

  require message = relay not permitted
          domains = +local_domains

  # We also require all accepted addresses to be verifiable. This check will
  # do local part verification for local domains, but only check the domain
  # for remote domains. The only way to check local parts for the remote
  # relay domains is to use a callout (add /callout), but please read the
  # documentation about callouts before doing this.

  require verify = recipient

  #############################################################################
  # There are no default checks on DNS black lists because the domains that
  # contain these lists are changing all the time. However, here are two
  # examples of how you can get Exim to perform a DNS black list lookup at this
  # point. The first one denies, whereas the second just warns.
  #
  # deny    message       = rejected because $sender_host_address is in a black list at $dnslist_domain\n$dnslist_text
  #         dnslists      = black.list.example
  #
  # warn    dnslists      = black.list.example
  #         add_header    = X-Warning: $sender_host_address is in a black list at $dnslist_domain
  #         log_message   = found in $dnslist_domain
  #############################################################################

  #############################################################################
  # This check is commented out because it is recognized that not every
  # sysadmin will want to do it. If you enable it, the check performs
  # Client SMTP Authorization (csa) checks on the sending host. These checks
  # do DNS lookups for SRV records. The CSA proposal is currently (May 2005)
  # an Internet draft. You can, of course, add additional conditions to this
  # ACL statement to restrict the CSA checks to certain hosts only.
  #
  # require verify = csa
  #############################################################################

  # At this point, the address has passed all the checks that have been
  # configured, so we accept it unconditionally.

  accept


# This ACL is used after the contents of a message have been received. This
# is the ACL in which you can test a message's headers or body, and in
# particular, this is where you can invoke external virus or spam scanners.
# Some suggested ways of configuring these tests are shown below, commented
# out. Without any tests, this ACL accepts all messages. If you want to use
# such tests, you must ensure that Exim is compiled with the content-scanning
# extension (WITH_CONTENT_SCAN=yes in Local/Makefile).

acl_check_data:

  # Deny if the message contains an overlong line.  Per the standards
  # we should never receive one such via SMTP.
  #
  deny    message    = maximum allowed line length is 998 octets, \
                       got $max_received_linelength
          condition  = ${if > {$max_received_linelength}{998}}

  # Deny if the message contains a virus. Before enabling this check, you
  # must install a virus scanner and set the av_scanner option above.
  #
  # deny    malware    = *
  #         message    = This message contains a virus ($malware_name).

  # Add headers to a message if it is judged to be spam. Before enabling this,
  # you must install SpamAssassin. You may also need to set the spamd_address
  # option above.
  #
  # warn    spam       = nobody
  #         add_header = X-Spam_score: $spam_score\n\
  #                      X-Spam_score_int: $spam_score_int\n\
  #                      X-Spam_bar: $spam_bar\n\
  #                      X-Spam_report: $spam_report

  # Accept the message.

  accept



######################################################################
#                      ROUTERS CONFIGURATION                         #
#               Specifies how addresses are handled                  #
######################################################################
#     THE ORDER IN WHICH THE ROUTERS ARE DEFINED IS IMPORTANT!       #
# An address is passed to each router in turn until it is accepted.  #
######################################################################

begin routers

# This router can be used when you want to send all mail to a
# server which handles DNS lookups for you; an ISP will typically run such
# a server for their customers.  If you uncomment "smarthost" then you
# should comment out "dnslookup" above.  Setting a real hostname in route_data
# wouldn't hurt either.

smarthost:
  driver = manualroute
  domains = ! +local_domains
  transport = remote_smtp
  route_data = ${env{SMARTHOST}{$value}{smarthost}}
  ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
  condition = ${if !eq{${env{SMARTHOST}{$value}{}}}{}}
  no_more


######################################################################
#                      TRANSPORTS CONFIGURATION                      #
######################################################################
#                       ORDER DOES NOT MATTER                        #
#     Only one appropriate transport is called for each delivery.    #
######################################################################

# A transport is used only when referenced from a router that successfully
# handles an address.

begin transports


# This transport is used for delivering messages over SMTP connections.
# Refuse to send any message with over-long lines, which could have
# been received other than via SMTP. The use of message_size_limit to
# enforce this is a red herring.

remote_smtp:
  driver = smtp
  message_size_limit = ${if > {$max_received_linelength}{998} {1}{0}}
  # Set to '*' (auth for all smarthosts)  if the SMTP_PASSWORD secret file or env variable exists, otherwise set to '' (no auth)
  hosts_require_auth = ${if or{ {exists{/run/secrets/SMTP_PASSWORD}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {*} {}}
  headers_remove = received
  helo_data = ${env{HOSTNAME}{$value}{$primary_hostname}}
  # dkim settings
  dkim_domain = ${env{HOSTNAME}{$value}{$primary_hostname}}
  dkim_selector = k8s
  dkim_private_key = /etc/exim/keys/dkim/tls.key
  dkim_strict = 1
  dkim_timestamps = 864000


######################################################################
#                      RETRY CONFIGURATION                           #
######################################################################

begin retry

# This single retry rule applies to all domains and all errors. It specifies
# retries every 15 minutes for 2 hours, then increasing retry intervals,
# starting at 1 hour and increasing each time by a factor of 1.5, up to 16
# hours, then retries every 6 hours until 4 days have passed since the first
# failed delivery.

# WARNING: If you do not have any retry rules at all (this section of the
# configuration is non-existent or empty), Exim will not do any retries of
# messages that fail to get delivered at the first attempt. The effect will
# be to treat temporary errors as permanent. Therefore, DO NOT remove this
# retry rule unless you really don't want any retries.

# Address or Domain    Error       Retries
# -----------------    -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h



######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

# There are no rewriting specifications in this default configuration file.

begin rewrite



######################################################################
#                   AUTHENTICATION CONFIGURATION                     #
######################################################################

# The following authenticators support plaintext username/password
# authentication using the standard PLAIN mechanism and the traditional
# but non-standard LOGIN mechanism, with Exim acting as the server.
# PLAIN and LOGIN are enough to support most MUA software.
#
# These authenticators are not complete: you need to change the
# server_condition settings to specify how passwords are verified.
# They are set up to offer authentication to the client only if the
# connection is encrypted with TLS, so you also need to add support
# for TLS. See the global configuration options section at the start
# of this file for more about TLS.
#
# The default RCPT ACL checks for successful authentication, and will accept
# messages from authenticated users from anywhere on the Internet.

begin authenticators

# PLAIN authentication has no server prompts. The client sends its
# credentials in one lump, containing an authorization ID (which we do not
# use), an authentication ID, and a password. The latter two appear as
# $auth2 and $auth3 in the configuration and should be checked against a
# valid username and password. In a real configuration you would typically
# use $auth2 as a lookup key, and compare $auth3 against the result of the
# lookup, perhaps using the crypteq{}{} condition.

#PLAIN:
#  driver                     = plaintext
#  server_set_id              = $auth2
#  server_prompts             = :
#  server_condition           = Authentication is not yet configured
#  server_advertise_condition = ${if def:tls_in_cipher }

# LOGIN authentication has traditional prompts and responses. There is no
# authorization ID in this mechanism, so unlike PLAIN the username and
# password are $auth1 and $auth2. Apart from that you can use the same
# server_condition setting for both authenticators.

#LOGIN:
#  driver                     = plaintext
#  server_set_id              = $auth1
#  server_prompts             = <| Username: | Password:
#  server_condition           = Authentication is not yet configured
#  server_advertise_condition = ${if def:tls_in_cipher }

LOGIN:
  driver           = plaintext
  public_name      = LOGIN
  # Username is from SMTP_USERNAME env variable.  Password is from SMTP_PASSWORD docker secret file if it exists, or from SMTP_PASSWORD env variable
  client_send      = ": ${env{SMTP_USERNAME}{$value} fail } : ${if exists{/run/secrets/passwd} {${readfile{/run/secrets/passwd}}} {${env{SMTP_PASSWORD}{$value}fail}} }"
  # Only enabled if SMTP_PASSWORD secret file of env variable exists
  client_condition = ${if or{ {exists{/run/secrets/passwd}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}

PLAIN:
  driver           = plaintext
  public_name      = PLAIN
  # Username is from SMTP_USERNAME env variable.  Password is from SMTP_PASSWORD docker secret file if it exists, or from SMTP_PASSWORD env variable
  client_send      = "^${env{SMTP_USERNAME}{$value} fail }^${if exists{/run/secrets/passwd} {${readfile{/run/secrets/passwd}}} {${env{SMTP_PASSWORD}{$value}fail}} }"
  # Only enabled if SMTP_PASSWORD secret file of env variable exists
  client_condition = ${if or{ {exists{/run/secrets/passwd}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}

#NTLM:
#  driver = spa
#  client_username = msn/msn_username
#  client_password = ${readfile{/run/secrets/passwd}}
#  client_domain = DOMAIN_OR_UNSET

NTLM:
  driver = spa
  # Username is from SMTP_USERNAME env variable.
  client_username  = ${env{SMTP_USERNAME}{$value} fail }
  # Password is from SMTP_PASSWORD docker secret file if it exists, or from SMTP_PASSWORD env variable
  client_password  = ${if exists{/run/secrets/passwd} {${readfile{/run/secrets/passwd}}} {${env{SMTP_PASSWORD}{$value}{}}} }
  client_domain    = ${env{SMTP_USERDOMAIN}{$value} {} }
  # Only enabled if SMTP_PASSWORD secret file of env variable exists
  client_condition = ${if or{ {exists{/run/secrets/passwd}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}

# End of Exim configuration file

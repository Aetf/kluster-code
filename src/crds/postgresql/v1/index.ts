// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { BackupArgs } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { ClusterArgs } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { PoolerArgs } from "./pooler";
export type Pooler = import("./pooler").Pooler;
export const Pooler: typeof import("./pooler").Pooler = null as any;
utilities.lazyLoad(exports, ["Pooler"], () => require("./pooler"));

export { ScheduledBackupArgs } from "./scheduledBackup";
export type ScheduledBackup = import("./scheduledBackup").ScheduledBackup;
export const ScheduledBackup: typeof import("./scheduledBackup").ScheduledBackup = null as any;
utilities.lazyLoad(exports, ["ScheduledBackup"], () => require("./scheduledBackup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:postgresql.cnpg.io/v1:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "kubernetes:postgresql.cnpg.io/v1:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "kubernetes:postgresql.cnpg.io/v1:Pooler":
                return new Pooler(name, <any>undefined, { urn })
            case "kubernetes:postgresql.cnpg.io/v1:ScheduledBackup":
                return new ScheduledBackup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "postgresql.cnpg.io/v1", _module)

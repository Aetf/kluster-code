// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace acme {
    export namespace v1 {
        /**
         * Challenge is a type to represent a Challenge request with an ACME server
         */
        export interface Challenge {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "acme.cert-manager.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Challenge";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.acme.v1.ChallengeSpec;
            status: outputs.acme.v1.ChallengeStatus;
        }

        export interface ChallengeSpec {
            /**
             * The URL to the ACME Authorization resource that this
             * challenge is a part of.
             */
            authorizationURL: string;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com.
             * If the requested DNSName is a 'wildcard', this field MUST be set to the
             * non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: string;
            issuerRef: outputs.acme.v1.ChallengeSpecIssuerRef;
            /**
             * The ACME challenge key for this challenge
             * For HTTP01 challenges, this is the value that must be responded with to
             * complete the HTTP01 challenge in the format:
             * `<private key JWK thumbprint>.<key from acme server for challenge>`.
             * For DNS01 challenges, this is the base64 encoded SHA256 sum of the
             * `<private key JWK thumbprint>.<key from acme server for challenge>`
             * text that must be set as the TXT record content.
             */
            key: string;
            solver: outputs.acme.v1.ChallengeSpecSolver;
            /**
             * The ACME challenge token for this challenge.
             * This is the raw value returned from the ACME server.
             */
            token: string;
            /**
             * The type of ACME challenge this resource represents.
             * One of "HTTP-01" or "DNS-01".
             */
            type: string;
            /**
             * The URL of the ACME Challenge resource for this challenge.
             * This can be used to lookup details about the status of this challenge.
             */
            url: string;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier,
             * for example '*.example.com'.
             */
            wildcard: boolean;
        }

        /**
         * References a properly configured ACME-type Issuer which should
         * be used to create this Challenge.
         * If the Issuer does not exist, processing will be retried.
         * If the Issuer is not an 'ACME' Issuer, an error will be returned and the
         * Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * References a properly configured ACME-type Issuer which should
         * be used to create this Challenge.
         * If the Issuer does not exist, processing will be retried.
         * If the Issuer is not an 'ACME' Issuer, an error will be returned and the
         * Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRefPatch {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        export interface ChallengeSpecPatch {
            /**
             * The URL to the ACME Authorization resource that this
             * challenge is a part of.
             */
            authorizationURL: string;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com.
             * If the requested DNSName is a 'wildcard', this field MUST be set to the
             * non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: string;
            issuerRef: outputs.acme.v1.ChallengeSpecIssuerRefPatch;
            /**
             * The ACME challenge key for this challenge
             * For HTTP01 challenges, this is the value that must be responded with to
             * complete the HTTP01 challenge in the format:
             * `<private key JWK thumbprint>.<key from acme server for challenge>`.
             * For DNS01 challenges, this is the base64 encoded SHA256 sum of the
             * `<private key JWK thumbprint>.<key from acme server for challenge>`
             * text that must be set as the TXT record content.
             */
            key: string;
            solver: outputs.acme.v1.ChallengeSpecSolverPatch;
            /**
             * The ACME challenge token for this challenge.
             * This is the raw value returned from the ACME server.
             */
            token: string;
            /**
             * The type of ACME challenge this resource represents.
             * One of "HTTP-01" or "DNS-01".
             */
            type: string;
            /**
             * The URL of the ACME Challenge resource for this challenge.
             * This can be used to lookup details about the status of this challenge.
             */
            url: string;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier,
             * for example '*.example.com'.
             */
            wildcard: boolean;
        }

        /**
         * Contains the domain solving configuration that should be used to
         * solve this challenge resource.
         */
        export interface ChallengeSpecSolver {
            dns01: outputs.acme.v1.ChallengeSpecSolverDns01;
            http01: outputs.acme.v1.ChallengeSpecSolverHttp01;
            selector: outputs.acme.v1.ChallengeSpecSolverSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01 {
            acmeDNS: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNS;
            akamai: outputs.acme.v1.ChallengeSpecSolverDns01Akamai;
            azureDNS: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNS;
            cloudDNS: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNS;
            cloudflare: outputs.acme.v1.ChallengeSpecSolverDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME
             * records when found in DNS zones.
             */
            cnameStrategy: string;
            digitalocean: outputs.acme.v1.ChallengeSpecSolverDns01Digitalocean;
            rfc2136: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136;
            route53: outputs.acme.v1.ChallengeSpecSolverDns01Route53;
            webhook: outputs.acme.v1.ChallengeSpecSolverDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
         * DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDNS {
            accountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
         * DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSPatch {
            accountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSAccountSecretRefPatch;
            host: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Akamai {
            accessTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef;
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef;
            clientTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AkamaiPatch {
            accessTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefPatch;
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRefPatch;
            clientTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRefPatch;
            serviceConsumerDomain: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDNS {
            /**
             * Auth: Azure Service Principal:
             * The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientSecret and TenantID must also be set.
             */
            clientID: string;
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName: string;
            managedIdentity: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal:
             * The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientID and ClientSecret must also be set.
             */
            tenantID: string;
        }

        /**
         * Auth: Azure Service Principal:
         * A reference to a Secret containing the password associated with the Service Principal.
         * If set, ClientID and TenantID must also be set.
         */
        export interface ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Service Principal:
         * A reference to a Secret containing the password associated with the Service Principal.
         * If set, ClientID and TenantID must also be set.
         */
        export interface ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity:
         * Settings to enable Azure Workload Identity or Azure Managed Service Identity
         * If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface ChallengeSpecSolverDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             * Cannot be used for Azure Managed Service Identity
             */
            resourceID: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity:
         * Settings to enable Azure Workload Identity or Azure Managed Service Identity
         * If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             * Cannot be used for Azure Managed Service Identity
             */
            resourceID: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDNSPatch {
            /**
             * Auth: Azure Service Principal:
             * The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientSecret and TenantID must also be set.
             */
            clientID: string;
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefPatch;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName: string;
            managedIdentity: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSManagedIdentityPatch;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal:
             * The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientID and ClientSecret must also be set.
             */
            tenantID: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which
             * Cloud DNS zone the challenge record has to be created.
             * If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName: string;
            project: string;
            serviceAccountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDNSPatch {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which
             * Cloud DNS zone the challenge record has to be created.
             * If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName: string;
            project: string;
            serviceAccountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatch;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Cloudflare {
            apiKeySecretRef: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRef;
            apiTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email: string;
        }

        /**
         * API key to use to authenticate with Cloudflare.
         * Note: using an API token to authenticate is now the recommended method
         * as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API key to use to authenticate with Cloudflare.
         * Note: using an API token to authenticate is now the recommended method
         * as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudflarePatch {
            apiKeySecretRef: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRefPatch;
            apiTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRefPatch;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Digitalocean {
            tokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanPatch {
            tokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatch;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01Patch {
            acmeDNS: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSPatch;
            akamai: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiPatch;
            azureDNS: outputs.acme.v1.ChallengeSpecSolverDns01AzureDNSPatch;
            cloudDNS: outputs.acme.v1.ChallengeSpecSolverDns01CloudDNSPatch;
            cloudflare: outputs.acme.v1.ChallengeSpecSolverDns01CloudflarePatch;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME
             * records when found in DNS zones.
             */
            cnameStrategy: string;
            digitalocean: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanPatch;
            rfc2136: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136Patch;
            route53: outputs.acme.v1.ChallengeSpecSolverDns01Route53Patch;
            webhook: outputs.acme.v1.ChallengeSpecSolverDns01WebhookPatch;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
         * to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting
             * RFC2136 in the form host:port. If the host is an IPv6 address it must be
             * enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
             * This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
             * when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
             * Supported values are (case-insensitive): ``HMACMD5`` (default),
             * ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm: string;
            /**
             * The TSIG Key name configured in the DNS.
             * If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName: string;
            tsigSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
         * to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136Patch {
            /**
             * The IP address or hostname of an authoritative DNS server supporting
             * RFC2136 in the form host:port. If the host is an IPv6 address it must be
             * enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
             * This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
             * when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
             * Supported values are (case-insensitive): ``HMACMD5`` (default),
             * ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm: string;
            /**
             * The TSIG Key name configured in the DNS.
             * If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName: string;
            tsigSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatch;
        }

        /**
         * The name of the secret containing the TSIG value.
         * If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The name of the secret containing the TSIG value.
         * If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53 {
            /**
             * The AccessKeyID is used for authentication.
             * Cannot be set when SecretAccessKeyID is set.
             * If neither the Access Key nor Key ID are set, we fall-back to using env
             * vars, shared credentials file or AWS Instance metadata,
             * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID: string;
            accessKeyIDSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef;
            auth: outputs.acme.v1.ChallengeSpecSolverDns01Route53Auth;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID: string;
            /**
             * Override the AWS region.
             *
             * Route53 is a global service and does not have regional endpoints but the
             * region specified here (or via environment variables) is used as a hint to
             * help compute the correct AWS credential scope and partition when it
             * connects to Route53. See:
             * - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
             * - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)
             *
             * If you omit this region field, cert-manager will use the region from
             * AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
             * in the cert-manager controller Pod.
             *
             * The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
             * In this case this `region` field value is ignored.
             *
             * The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
             * In this case this `region` field value is ignored.
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
             * or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role: string;
            secretAccessKeySecretRef: outputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS
         * access key ID from a key within a Kubernetes Secret.
         * Cannot be set when AccessKeyID is set.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS
         * access key ID from a key within a Kubernetes Secret.
         * Cannot be set when AccessKeyID is set.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates.
         */
        export interface ChallengeSpecSolverDns01Route53Auth {
            kubernetes: outputs.acme.v1.ChallengeSpecSolverDns01Route53AuthKubernetes;
        }

        /**
         * Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
         * by passing a bound ServiceAccount token.
         */
        export interface ChallengeSpecSolverDns01Route53AuthKubernetes {
            serviceAccountRef: outputs.acme.v1.ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef;
        }

        /**
         * Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
         * by passing a bound ServiceAccount token.
         */
        export interface ChallengeSpecSolverDns01Route53AuthKubernetesPatch {
            serviceAccountRef: outputs.acme.v1.ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatch;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). To use this field, you must
         * configure an RBAC rule to let cert-manager request a token.
         */
        export interface ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef {
            /**
             * TokenAudiences is an optional list of audiences to include in the
             * token passed to AWS. The default token consisting of the issuer's namespace
             * and name is always included.
             * If unset the audience defaults to `sts.amazonaws.com`.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). To use this field, you must
         * configure an RBAC rule to let cert-manager request a token.
         */
        export interface ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRefPatch {
            /**
             * TokenAudiences is an optional list of audiences to include in the
             * token passed to AWS. The default token consisting of the issuer's namespace
             * and name is always included.
             * If unset the audience defaults to `sts.amazonaws.com`.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates.
         */
        export interface ChallengeSpecSolverDns01Route53AuthPatch {
            kubernetes: outputs.acme.v1.ChallengeSpecSolverDns01Route53AuthKubernetesPatch;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53Patch {
            /**
             * The AccessKeyID is used for authentication.
             * Cannot be set when SecretAccessKeyID is set.
             * If neither the Access Key nor Key ID are set, we fall-back to using env
             * vars, shared credentials file or AWS Instance metadata,
             * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID: string;
            accessKeyIDSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefPatch;
            auth: outputs.acme.v1.ChallengeSpecSolverDns01Route53AuthPatch;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID: string;
            /**
             * Override the AWS region.
             *
             * Route53 is a global service and does not have regional endpoints but the
             * region specified here (or via environment variables) is used as a hint to
             * help compute the correct AWS credential scope and partition when it
             * connects to Route53. See:
             * - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
             * - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)
             *
             * If you omit this region field, cert-manager will use the region from
             * AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
             * in the cert-manager controller Pod.
             *
             * The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
             * In this case this `region` field value is ignored.
             *
             * The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
             * In this case this `region` field value is ignored.
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
             * or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role: string;
            secretAccessKeySecretRef: outputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatch;
        }

        /**
         * The SecretAccessKey is used for authentication.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage
         * DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver
             * when challenges are processed.
             * This can contain arbitrary JSON data.
             * Secret values should not be specified in this stanza.
             * If secret values are needed (e.g. credentials for a DNS service), you
             * should use a SecretKeySelector to reference a Secret resource.
             * For details on the schema of this field, consult the webhook provider
             * implementation's documentation.
             */
            config: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload
             * resources to the webhook apiserver.
             * This should be the same as the GroupName specified in the webhook
             * provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider
             * implementation.
             * This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage
         * DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01WebhookPatch {
            /**
             * Additional configuration that should be passed to the webhook apiserver
             * when challenges are processed.
             * This can contain arbitrary JSON data.
             * Secret values should not be specified in this stanza.
             * If secret values are needed (e.g. credentials for a DNS service), you
             * should use a SecretKeySelector to reference a Secret resource.
             * For details on the schema of this field, consult the webhook provider
             * implementation's documentation.
             */
            config: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload
             * resources to the webhook apiserver.
             * This should be the same as the GroupName specified in the webhook
             * provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider
             * implementation.
             * This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the HTTP01 challenge flow.
         * It is not possible to obtain certificates for wildcard domain names
         * (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01 {
            gatewayHTTPRoute: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoute;
            ingress: outputs.acme.v1.ChallengeSpecSolverHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking
         * in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
         * create HTTPRoutes with the specified labels in the same namespace as the challenge.
         * This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager
             * while solving HTTP-01 challenges.
             */
            labels: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
             * cert-manager needs to know which parentRefs should be used when creating
             * the HTTPRoute. Usually, the parentRef references a Gateway. See:
             * https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs[];
            podTemplate: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking
         * in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
         * create HTTPRoutes with the specified labels in the same namespace as the challenge.
         * This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePatch {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager
             * while solving HTTP-01 challenges.
             */
            labels: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
             * cert-manager needs to know which parentRefs should be used when creating
             * the HTTPRoute. Usually, the parentRef references a Gateway. See:
             * https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsPatch[];
            podTemplate: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatch;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplate {
            metadata: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadata;
            spec: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplatePatch {
            metadata: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateMetadataPatch;
            spec: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpec {
            affinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinity {
            nodeAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecPatch {
            affinity: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch[];
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by
         * creating or modifying Ingress resources in order to route requests for
         * '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
         * provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when
             * creating Ingress resources to solve ACME challenges that use this
             * challenge solver. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            class: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress
             * resources used to solve ACME challenges that use this challenge solver.
             * This is the recommended way of configuring the ingress class. Only one of
             * `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName: string;
            ingressTemplate: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving
             * routes inserted into it in order to solve HTTP01 challenges.
             * This is typically used in conjunction with ingress controllers like
             * ingress-gce, which maintains a 1:1 mapping between external IPs and
             * ingress resources. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            name: string;
            podTemplate: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver
         * ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplate {
            metadata: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver
         * ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplatePatch {
            metadata: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadataPatch;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by
         * creating or modifying Ingress resources in order to route requests for
         * '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
         * provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01IngressPatch {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when
             * creating Ingress resources to solve ACME challenges that use this
             * challenge solver. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            class: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress
             * resources used to solve ACME challenges that use this challenge solver.
             * This is the recommended way of configuring the ingress class. Only one of
             * `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName: string;
            ingressTemplate: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplatePatch;
            /**
             * The name of the ingress resource that should have ACME challenge solving
             * routes inserted into it in order to solve HTTP01 challenges.
             * This is typically used in conjunction with ingress controllers like
             * ingress-gce, which maintains a 1:1 mapping between external IPs and
             * ingress resources. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            name: string;
            podTemplate: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplatePatch;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplate {
            metadata: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadata;
            spec: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplatePatch {
            metadata: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadataPatch;
            spec: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpec {
            affinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity {
            nodeAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecPatch {
            affinity: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPatch;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsPatch[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctls[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch[];
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the HTTP01 challenge flow.
         * It is not possible to obtain certificates for wildcard domain names
         * (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01Patch {
            gatewayHTTPRoute: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRoutePatch;
            ingress: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPatch;
        }

        /**
         * Contains the domain solving configuration that should be used to
         * solve this challenge resource.
         */
        export interface ChallengeSpecSolverPatch {
            dns01: outputs.acme.v1.ChallengeSpecSolverDns01Patch;
            http01: outputs.acme.v1.ChallengeSpecSolverHttp01Patch;
            selector: outputs.acme.v1.ChallengeSpecSolverSelectorPatch;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that
         * should be solved using this challenge solver.
         * If not specified, the solver will be treated as the 'default' solver
         * with the lowest priority, i.e. if any other solver has a more specific
         * match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelector {
            /**
             * List of DNSNames that this solver will be used to solve.
             * If specified and a match is found, a dnsNames selector will take
             * precedence over a dnsZones selector.
             * If multiple solvers match with the same dnsNames value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsNames: string[];
            /**
             * List of DNSZones that this solver will be used to solve.
             * The most specific DNS zone match specified here will take precedence
             * over other DNS zone matches, so a solver specifying sys.example.com
             * will be selected over one specifying example.com for the domain
             * www.sys.example.com.
             * If multiple solvers match with the same dnsZones value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsZones: string[];
            /**
             * A label selector that is used to refine the set of certificate's that
             * this challenge solver will apply to.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that
         * should be solved using this challenge solver.
         * If not specified, the solver will be treated as the 'default' solver
         * with the lowest priority, i.e. if any other solver has a more specific
         * match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelectorPatch {
            /**
             * List of DNSNames that this solver will be used to solve.
             * If specified and a match is found, a dnsNames selector will take
             * precedence over a dnsZones selector.
             * If multiple solvers match with the same dnsNames value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsNames: string[];
            /**
             * List of DNSZones that this solver will be used to solve.
             * The most specific DNS zone match specified here will take precedence
             * over other DNS zone matches, so a solver specifying sys.example.com
             * will be selected over one specifying example.com for the domain
             * www.sys.example.com.
             * If multiple solvers match with the same dnsZones value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsZones: string[];
            /**
             * A label selector that is used to refine the set of certificate's that
             * this challenge solver will apply to.
             */
            matchLabels: {[key: string]: string};
        }

        export interface ChallengeStatus {
            /**
             * presented will be set to true if the challenge values for this challenge
             * are currently 'presented'.
             * This *does not* imply the self check is passing. Only that the values
             * have been 'submitted' for the appropriate challenge mechanism (i.e. the
             * DNS01 TXT record has been presented, or the HTTP01 configuration has been
             * configured).
             */
            presented: boolean;
            /**
             * Used to denote whether this challenge should be processed or not.
             * This field will only be set to true by the 'scheduling' component.
             * It will only be set to false by the 'challenges' controller, after the
             * challenge has reached a final state or timed out.
             * If this field is set to false, the challenge controller will not take
             * any more action.
             */
            processing: boolean;
            /**
             * Contains human readable information on why the Challenge is in the
             * current state.
             */
            reason: string;
            /**
             * Contains the current 'state' of the challenge.
             * If not set, the state of the challenge is unknown.
             */
            state: string;
        }

        export interface ChallengeStatusPatch {
            /**
             * presented will be set to true if the challenge values for this challenge
             * are currently 'presented'.
             * This *does not* imply the self check is passing. Only that the values
             * have been 'submitted' for the appropriate challenge mechanism (i.e. the
             * DNS01 TXT record has been presented, or the HTTP01 configuration has been
             * configured).
             */
            presented: boolean;
            /**
             * Used to denote whether this challenge should be processed or not.
             * This field will only be set to true by the 'scheduling' component.
             * It will only be set to false by the 'challenges' controller, after the
             * challenge has reached a final state or timed out.
             * If this field is set to false, the challenge controller will not take
             * any more action.
             */
            processing: boolean;
            /**
             * Contains human readable information on why the Challenge is in the
             * current state.
             */
            reason: string;
            /**
             * Contains the current 'state' of the challenge.
             * If not set, the state of the challenge is unknown.
             */
            state: string;
        }

        /**
         * Order is a type to represent an Order with an ACME server
         */
        export interface Order {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "acme.cert-manager.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Order";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.acme.v1.OrderSpec;
            status: outputs.acme.v1.OrderStatus;
        }

        export interface OrderSpec {
            /**
             * CommonName is the common name as specified on the DER encoded CSR.
             * If specified, this value must also be present in `dnsNames` or `ipAddresses`.
             * This field must match the corresponding field on the DER encoded CSR.
             */
            commonName: string;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order
             * validation process.
             * This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames: string[];
            /**
             * Duration is the duration for the not after date for the requested certificate.
             * this is set on order creation as pe the ACME spec.
             */
            duration: string;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order
             * validation process.
             * This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses: string[];
            issuerRef: outputs.acme.v1.OrderSpecIssuerRef;
            /**
             * Certificate signing request bytes in DER encoding.
             * This will be used when finalizing the order.
             * This field must be set on the order.
             */
            request: string;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should
         * be used to create this Order.
         * If the Issuer does not exist, processing will be retried.
         * If the Issuer is not an 'ACME' Issuer, an error will be returned and the
         * Order will be marked as failed.
         */
        export interface OrderSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should
         * be used to create this Order.
         * If the Issuer does not exist, processing will be retried.
         * If the Issuer is not an 'ACME' Issuer, an error will be returned and the
         * Order will be marked as failed.
         */
        export interface OrderSpecIssuerRefPatch {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        export interface OrderSpecPatch {
            /**
             * CommonName is the common name as specified on the DER encoded CSR.
             * If specified, this value must also be present in `dnsNames` or `ipAddresses`.
             * This field must match the corresponding field on the DER encoded CSR.
             */
            commonName: string;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order
             * validation process.
             * This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames: string[];
            /**
             * Duration is the duration for the not after date for the requested certificate.
             * this is set on order creation as pe the ACME spec.
             */
            duration: string;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order
             * validation process.
             * This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses: string[];
            issuerRef: outputs.acme.v1.OrderSpecIssuerRefPatch;
            /**
             * Certificate signing request bytes in DER encoding.
             * This will be used when finalizing the order.
             * This field must be set on the order.
             */
            request: string;
        }

        export interface OrderStatus {
            /**
             * Authorizations contains data returned from the ACME server on what
             * authorizations must be completed in order to validate the DNS names
             * specified on the Order.
             */
            authorizations: outputs.acme.v1.OrderStatusAuthorizations[];
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order.
             * This field will be populated after the order has been successfully
             * finalized with the ACME server, and the order has transitioned to the
             * 'valid' state.
             */
            certificate: string;
            /**
             * FailureTime stores the time that this order failed.
             * This is used to influence garbage collection and back-off.
             */
            failureTime: string;
            /**
             * FinalizeURL of the Order.
             * This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL: string;
            /**
             * Reason optionally provides more information about a why the order is in
             * the current state.
             */
            reason: string;
            /**
             * State contains the current state of this Order resource.
             * States 'success' and 'expired' are 'final'
             */
            state: string;
            /**
             * URL of the Order.
             * This will initially be empty when the resource is first created.
             * The Order controller will populate this field when the Order is first processed.
             * This field will be immutable after it is initially set.
             */
            url: string;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an
         * authorization that must be completed in order validate a DNS name on an ACME
         * Order resource.
         */
        export interface OrderStatusAuthorizations {
            /**
             * Challenges specifies the challenge types offered by the ACME server.
             * One of these challenge types will be selected when validating the DNS
             * name and an appropriate Challenge resource will be created to perform
             * the ACME challenge process.
             */
            challenges: outputs.acme.v1.OrderStatusAuthorizationsChallenges[];
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier: string;
            /**
             * InitialState is the initial state of the ACME authorization when first
             * fetched from the ACME server.
             * If an Authorization is already 'valid', the Order controller will not
             * create a Challenge resource for the authorization. This will occur when
             * working with an ACME server that enables 'authz reuse' (such as Let's
             * Encrypt's production endpoint).
             * If not set and 'identifier' is set, the state is assumed to be pending
             * and a Challenge will be created.
             */
            initialState: string;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: string;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name.
             * If this is true, the identifier will be the *non-wildcard* version of
             * the DNS name.
             * For example, if '*.example.com' is the DNS name being validated, this
             * field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard: boolean;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order.
         * An appropriate Challenge resource can be created to perform the ACME
         * challenge process.
         */
        export interface OrderStatusAuthorizationsChallenges {
            /**
             * Token is the token that must be presented for this challenge.
             * This is used to compute the 'key' that must also be presented.
             */
            token: string;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
             * 'tls-sni-01', etc.
             * This is the raw value retrieved from the ACME server.
             * Only 'http-01' and 'dns-01' are supported by cert-manager, other values
             * will be ignored.
             */
            type: string;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional
             * metadata about the Challenge from the ACME server.
             */
            url: string;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order.
         * An appropriate Challenge resource can be created to perform the ACME
         * challenge process.
         */
        export interface OrderStatusAuthorizationsChallengesPatch {
            /**
             * Token is the token that must be presented for this challenge.
             * This is used to compute the 'key' that must also be presented.
             */
            token: string;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',
             * 'tls-sni-01', etc.
             * This is the raw value retrieved from the ACME server.
             * Only 'http-01' and 'dns-01' are supported by cert-manager, other values
             * will be ignored.
             */
            type: string;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional
             * metadata about the Challenge from the ACME server.
             */
            url: string;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an
         * authorization that must be completed in order validate a DNS name on an ACME
         * Order resource.
         */
        export interface OrderStatusAuthorizationsPatch {
            /**
             * Challenges specifies the challenge types offered by the ACME server.
             * One of these challenge types will be selected when validating the DNS
             * name and an appropriate Challenge resource will be created to perform
             * the ACME challenge process.
             */
            challenges: outputs.acme.v1.OrderStatusAuthorizationsChallengesPatch[];
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier: string;
            /**
             * InitialState is the initial state of the ACME authorization when first
             * fetched from the ACME server.
             * If an Authorization is already 'valid', the Order controller will not
             * create a Challenge resource for the authorization. This will occur when
             * working with an ACME server that enables 'authz reuse' (such as Let's
             * Encrypt's production endpoint).
             * If not set and 'identifier' is set, the state is assumed to be pending
             * and a Challenge will be created.
             */
            initialState: string;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: string;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name.
             * If this is true, the identifier will be the *non-wildcard* version of
             * the DNS name.
             * For example, if '*.example.com' is the DNS name being validated, this
             * field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard: boolean;
        }

        export interface OrderStatusPatch {
            /**
             * Authorizations contains data returned from the ACME server on what
             * authorizations must be completed in order to validate the DNS names
             * specified on the Order.
             */
            authorizations: outputs.acme.v1.OrderStatusAuthorizationsPatch[];
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order.
             * This field will be populated after the order has been successfully
             * finalized with the ACME server, and the order has transitioned to the
             * 'valid' state.
             */
            certificate: string;
            /**
             * FailureTime stores the time that this order failed.
             * This is used to influence garbage collection and back-off.
             */
            failureTime: string;
            /**
             * FinalizeURL of the Order.
             * This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL: string;
            /**
             * Reason optionally provides more information about a why the order is in
             * the current state.
             */
            reason: string;
            /**
             * State contains the current state of this Order resource.
             * States 'success' and 'expired' are 'final'
             */
            state: string;
            /**
             * URL of the Order.
             * This will initially be empty when the resource is first created.
             * The Order controller will populate this field when the Order is first processed.
             * This field will be immutable after it is initially set.
             */
            url: string;
        }

    }
}

export namespace autoscaling {
    export namespace v1 {
    }
}

export namespace bitnami {
    export namespace v1alpha1 {
        /**
         * SealedSecret is the K8s representation of a "sealed Secret" - a
         * regular k8s Secret that has been sealed (encrypted) using the
         * controller's key.
         */
        export interface SealedSecret {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "bitnami.com/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "SealedSecret";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.bitnami.v1alpha1.SealedSecretSpec;
            status: outputs.bitnami.v1alpha1.SealedSecretStatus;
        }

        /**
         * SealedSecretSpec is the specification of a SealedSecret.
         */
        export interface SealedSecretSpec {
            /**
             * Data is deprecated and will be removed eventually. Use per-value EncryptedData instead.
             */
            data: string;
            encryptedData: {[key: string]: any};
            template: outputs.bitnami.v1alpha1.SealedSecretSpecTemplate;
        }

        /**
         * SealedSecretSpec is the specification of a SealedSecret.
         */
        export interface SealedSecretSpecPatch {
            /**
             * Data is deprecated and will be removed eventually. Use per-value EncryptedData instead.
             */
            data: string;
            encryptedData: {[key: string]: any};
            template: outputs.bitnami.v1alpha1.SealedSecretSpecTemplatePatch;
        }

        /**
         * Template defines the structure of the Secret that will be
         * created from this sealed secret.
         */
        export interface SealedSecretSpecTemplate {
            /**
             * Keys that should be templated using decrypted data.
             */
            data: {[key: string]: string};
            /**
             * Immutable, if set to true, ensures that data stored in the Secret cannot
             * be updated (only object metadata can be modified).
             * If not set to true, the field can be modified at any time.
             * Defaulted to nil.
             */
            immutable: boolean;
            /**
             * Standard object's metadata.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: {[key: string]: any};
            /**
             * Used to facilitate programmatic handling of secret data.
             */
            type: string;
        }

        /**
         * Template defines the structure of the Secret that will be
         * created from this sealed secret.
         */
        export interface SealedSecretSpecTemplatePatch {
            /**
             * Keys that should be templated using decrypted data.
             */
            data: {[key: string]: string};
            /**
             * Immutable, if set to true, ensures that data stored in the Secret cannot
             * be updated (only object metadata can be modified).
             * If not set to true, the field can be modified at any time.
             * Defaulted to nil.
             */
            immutable: boolean;
            /**
             * Standard object's metadata.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: {[key: string]: any};
            /**
             * Used to facilitate programmatic handling of secret data.
             */
            type: string;
        }

        /**
         * SealedSecretStatus is the most recently observed status of the SealedSecret.
         */
        export interface SealedSecretStatus {
            /**
             * Represents the latest available observations of a sealed secret's current state.
             */
            conditions: outputs.bitnami.v1alpha1.SealedSecretStatusConditions[];
            /**
             * ObservedGeneration reflects the generation most recently observed by the sealed-secrets controller.
             */
            observedGeneration: number;
        }

        /**
         * SealedSecretCondition describes the state of a sealed secret at a certain point.
         */
        export interface SealedSecretStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition for a sealed secret.
             * Valid values for "Synced": "True", "False", or "Unknown".
             */
            status: string;
            /**
             * Type of condition for a sealed secret.
             * Valid value: "Synced"
             */
            type: string;
        }

        /**
         * SealedSecretCondition describes the state of a sealed secret at a certain point.
         */
        export interface SealedSecretStatusConditionsPatch {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime: string;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message: string;
            /**
             * The reason for the condition's last transition.
             */
            reason: string;
            /**
             * Status of the condition for a sealed secret.
             * Valid values for "Synced": "True", "False", or "Unknown".
             */
            status: string;
            /**
             * Type of condition for a sealed secret.
             * Valid value: "Synced"
             */
            type: string;
        }

        /**
         * SealedSecretStatus is the most recently observed status of the SealedSecret.
         */
        export interface SealedSecretStatusPatch {
            /**
             * Represents the latest available observations of a sealed secret's current state.
             */
            conditions: outputs.bitnami.v1alpha1.SealedSecretStatusConditionsPatch[];
            /**
             * ObservedGeneration reflects the generation most recently observed by the sealed-secrets controller.
             */
            observedGeneration: number;
        }

    }
}

export namespace cert_manager {
    export namespace v1 {
        /**
         * A Certificate resource should be created to ensure an up to date and signed
         * X.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.
         *
         * The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).
         */
        export interface Certificate {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "cert-manager.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Certificate";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.cert_manager.v1.CertificateSpec;
            status: outputs.cert_manager.v1.CertificateStatus;
        }

        /**
         * A CertificateRequest is used to request a signed certificate from one of the
         * configured issuers.
         *
         * All fields within the CertificateRequest's `spec` are immutable after creation.
         * A CertificateRequest will either succeed or fail, as denoted by its `Ready` status
         * condition and its `status.failureTime` field.
         *
         * A CertificateRequest is a one-shot resource, meaning it represents a single
         * point in time request for a certificate and cannot be re-used.
         */
        export interface CertificateRequest {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "cert-manager.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "CertificateRequest";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.cert_manager.v1.CertificateRequestSpec;
            status: outputs.cert_manager.v1.CertificateRequestStatus;
        }

        /**
         * Specification of the desired state of the CertificateRequest resource.
         * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestSpec {
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
             * issuer may choose to ignore the requested duration, just like any other
             * requested attribute.
             */
            duration: string;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            extra: {[key: string]: string[]};
            /**
             * Groups contains group membership of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            groups: string[];
            /**
             * Requested basic constraints isCA value. Note that the issuer may choose
             * to ignore the requested isCA value, just like any other requested attribute.
             *
             * NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
             * it must have the same isCA value as specified here.
             *
             * If true, this will automatically add the `cert sign` usage to the list
             * of requested `usages`.
             */
            isCA: boolean;
            issuerRef: outputs.cert_manager.v1.CertificateRequestSpecIssuerRef;
            /**
             * The PEM-encoded X.509 certificate signing request to be submitted to the
             * issuer for signing.
             *
             * If the CSR has a BasicConstraints extension, its isCA attribute must
             * match the `isCA` value of this CertificateRequest.
             * If the CSR has a KeyUsage extension, its key usages must match the
             * key usages in the `usages` field of this CertificateRequest.
             * If the CSR has a ExtKeyUsage extension, its extended key usages
             * must match the extended key usages in the `usages` field of this
             * CertificateRequest.
             */
            request: string;
            /**
             * UID contains the uid of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            uid: string;
            /**
             * Requested key usages and extended key usages.
             *
             * NOTE: If the CSR in the `Request` field has uses the KeyUsage or
             * ExtKeyUsage extension, these extensions must have the same values
             * as specified here without any additional values.
             *
             * If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages: string[];
            /**
             * Username contains the name of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            username: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate.
         * If the issuer is namespace-scoped, it must be in the same namespace
         * as the Certificate. If the issuer is cluster-scoped, it can be used
         * from any namespace.
         *
         * The `name` field of the reference must always be specified.
         */
        export interface CertificateRequestSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate.
         * If the issuer is namespace-scoped, it must be in the same namespace
         * as the Certificate. If the issuer is cluster-scoped, it can be used
         * from any namespace.
         *
         * The `name` field of the reference must always be specified.
         */
        export interface CertificateRequestSpecIssuerRefPatch {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Specification of the desired state of the CertificateRequest resource.
         * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestSpecPatch {
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
             * issuer may choose to ignore the requested duration, just like any other
             * requested attribute.
             */
            duration: string;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            extra: {[key: string]: string[]};
            /**
             * Groups contains group membership of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            groups: string[];
            /**
             * Requested basic constraints isCA value. Note that the issuer may choose
             * to ignore the requested isCA value, just like any other requested attribute.
             *
             * NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
             * it must have the same isCA value as specified here.
             *
             * If true, this will automatically add the `cert sign` usage to the list
             * of requested `usages`.
             */
            isCA: boolean;
            issuerRef: outputs.cert_manager.v1.CertificateRequestSpecIssuerRefPatch;
            /**
             * The PEM-encoded X.509 certificate signing request to be submitted to the
             * issuer for signing.
             *
             * If the CSR has a BasicConstraints extension, its isCA attribute must
             * match the `isCA` value of this CertificateRequest.
             * If the CSR has a KeyUsage extension, its key usages must match the
             * key usages in the `usages` field of this CertificateRequest.
             * If the CSR has a ExtKeyUsage extension, its extended key usages
             * must match the extended key usages in the `usages` field of this
             * CertificateRequest.
             */
            request: string;
            /**
             * UID contains the uid of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            uid: string;
            /**
             * Requested key usages and extended key usages.
             *
             * NOTE: If the CSR in the `Request` field has uses the KeyUsage or
             * ExtKeyUsage extension, these extensions must have the same values
             * as specified here without any additional values.
             *
             * If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages: string[];
            /**
             * Username contains the name of the user that created the CertificateRequest.
             * Populated by the cert-manager webhook on creation and immutable.
             */
            username: string;
        }

        /**
         * Status of the CertificateRequest.
         * This is set and managed automatically.
         * Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestStatus {
            /**
             * The PEM encoded X.509 certificate of the signer, also known as the CA
             * (Certificate Authority).
             * This is set on a best-effort basis by different issuers.
             * If not set, the CA is assumed to be unknown/not available.
             */
            ca: string;
            /**
             * The PEM encoded X.509 certificate resulting from the certificate
             * signing request.
             * If not set, the CertificateRequest has either not been completed or has
             * failed. More information on failure can be found by checking the
             * `conditions` field.
             */
            certificate: string;
            /**
             * List of status conditions to indicate the status of a CertificateRequest.
             * Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
             */
            conditions: outputs.cert_manager.v1.CertificateRequestStatusConditions[];
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is
             * used to influence garbage collection and back-off.
             */
            failureTime: string;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`,
             * `Approved`, `Denied`).
             */
            type: string;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditionsPatch {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`,
             * `Approved`, `Denied`).
             */
            type: string;
        }

        /**
         * Status of the CertificateRequest.
         * This is set and managed automatically.
         * Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestStatusPatch {
            /**
             * The PEM encoded X.509 certificate of the signer, also known as the CA
             * (Certificate Authority).
             * This is set on a best-effort basis by different issuers.
             * If not set, the CA is assumed to be unknown/not available.
             */
            ca: string;
            /**
             * The PEM encoded X.509 certificate resulting from the certificate
             * signing request.
             * If not set, the CertificateRequest has either not been completed or has
             * failed. More information on failure can be found by checking the
             * `conditions` field.
             */
            certificate: string;
            /**
             * List of status conditions to indicate the status of a CertificateRequest.
             * Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
             */
            conditions: outputs.cert_manager.v1.CertificateRequestStatusConditionsPatch[];
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is
             * used to influence garbage collection and back-off.
             */
            failureTime: string;
        }

        /**
         * Specification of the desired state of the Certificate resource.
         * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateSpec {
            /**
             * Defines extra output formats of the private key and signed certificate chain
             * to be written to this Certificate's target Secret.
             *
             * This is a Beta Feature enabled by default. It can be disabled with the
             * `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
             * the controller and webhook components.
             */
            additionalOutputFormats: outputs.cert_manager.v1.CertificateSpecAdditionalOutputFormats[];
            /**
             * Requested common name X509 certificate subject attribute.
             * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
             * NOTE: TLS clients will ignore this value when any subject alternative name is
             * set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).
             *
             * Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
             * Cannot be set if the `literalSubject` field is set.
             */
            commonName: string;
            /**
             * Requested DNS subject alternative names.
             */
            dnsNames: string[];
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
             * issuer may choose to ignore the requested duration, just like any other
             * requested attribute.
             *
             * If unset, this defaults to 90 days.
             * Minimum accepted duration is 1 hour.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            duration: string;
            /**
             * Requested email subject alternative names.
             */
            emailAddresses: string[];
            /**
             * Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.
             *
             * This option defaults to true, and should only be disabled if the target
             * issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
             */
            encodeUsagesInRequest: boolean;
            /**
             * Requested IP address subject alternative names.
             */
            ipAddresses: string[];
            /**
             * Requested basic constraints isCA value.
             * The isCA value is used to set the `isCA` field on the created CertificateRequest
             * resources. Note that the issuer may choose to ignore the requested isCA value, just
             * like any other requested attribute.
             *
             * If true, this will automatically add the `cert sign` usage to the list
             * of requested `usages`.
             */
            isCA: boolean;
            issuerRef: outputs.cert_manager.v1.CertificateSpecIssuerRef;
            keystores: outputs.cert_manager.v1.CertificateSpecKeystores;
            /**
             * Requested X.509 certificate subject, represented using the LDAP "String
             * Representation of a Distinguished Name" [1].
             * Important: the LDAP string format also specifies the order of the attributes
             * in the subject, this is important when issuing certs for LDAP authentication.
             * Example: `CN=foo,DC=corp,DC=example,DC=com`
             * More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
             * More info: https://github.com/cert-manager/cert-manager/issues/3203
             * More info: https://github.com/cert-manager/cert-manager/issues/4424
             *
             * Cannot be set if the `subject` or `commonName` field is set.
             */
            literalSubject: string;
            nameConstraints: outputs.cert_manager.v1.CertificateSpecNameConstraints;
            /**
             * `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
             * Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
             * Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
             * You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
             */
            otherNames: outputs.cert_manager.v1.CertificateSpecOtherNames[];
            privateKey: outputs.cert_manager.v1.CertificateSpecPrivateKey;
            /**
             * How long before the currently issued certificate's expiry cert-manager should
             * renew the certificate. For example, if a certificate is valid for 60 minutes,
             * and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
             * 50 minutes after it was issued (i.e. when there are 10 minutes remaining until
             * the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * If unset, this defaults to 1/3 of the issued certificate's lifetime.
             * Minimum accepted value is 5 minutes.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             * Cannot be set if the `renewBeforePercentage` field is set.
             */
            renewBefore: string;
            /**
             * `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
             * rather than an absolute duration. For example, if a certificate is valid for 60
             * minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
             * renew the certificate 45 minutes after it was issued (i.e. when there are 15
             * minutes (25%) remaining until the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * Value must be an integer in the range (0,100). The minimum effective
             * `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
             * minutes.
             * Cannot be set if the `renewBefore` field is set.
             */
            renewBeforePercentage: number;
            /**
             * The maximum number of CertificateRequest revisions that are maintained in
             * the Certificate's history. Each revision represents a single `CertificateRequest`
             * created by this Certificate, either when it was created, renewed, or Spec
             * was changed. Revisions will be removed by oldest first if the number of
             * revisions exceeds this number.
             *
             * If set, revisionHistoryLimit must be a value of `1` or greater.
             * If unset (`nil`), revisions will not be garbage collected.
             * Default value is `nil`.
             */
            revisionHistoryLimit: number;
            /**
             * Name of the Secret resource that will be automatically created and
             * managed by this Certificate resource. It will be populated with a
             * private key and certificate, signed by the denoted issuer. The Secret
             * resource lives in the same namespace as the Certificate resource.
             */
            secretName: string;
            secretTemplate: outputs.cert_manager.v1.CertificateSpecSecretTemplate;
            subject: outputs.cert_manager.v1.CertificateSpecSubject;
            /**
             * Requested URI subject alternative names.
             */
            uris: string[];
            /**
             * Requested key usages and extended key usages.
             * These usages are used to set the `usages` field on the created CertificateRequest
             * resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
             * will additionally be encoded in the `request` field which contains the CSR blob.
             *
             * If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages: string[];
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a
         * Certificate resource. These contain supplementary data formats of the signed
         * certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormats {
            /**
             * Type is the name of the format type that should be written to the
             * Certificate's target Secret.
             */
            type: string;
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a
         * Certificate resource. These contain supplementary data formats of the signed
         * certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormatsPatch {
            /**
             * Type is the name of the format type that should be written to the
             * Certificate's target Secret.
             */
            type: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate.
         * If the issuer is namespace-scoped, it must be in the same namespace
         * as the Certificate. If the issuer is cluster-scoped, it can be used
         * from any namespace.
         *
         * The `name` field of the reference must always be specified.
         */
        export interface CertificateSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate.
         * If the issuer is namespace-scoped, it must be in the same namespace
         * as the Certificate. If the issuer is cluster-scoped, it can be used
         * from any namespace.
         *
         * The `name` field of the reference must always be specified.
         */
        export interface CertificateSpecIssuerRefPatch {
            /**
             * Group of the resource being referred to.
             */
            group: string;
            /**
             * Kind of the resource being referred to.
             */
            kind: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Additional keystore output formats to be stored in the Certificate's Secret.
         */
        export interface CertificateSpecKeystores {
            jks: outputs.cert_manager.v1.CertificateSpecKeystoresJks;
            pkcs12: outputs.cert_manager.v1.CertificateSpecKeystoresPkcs12;
        }

        /**
         * JKS configures options for storing a JKS keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJks {
            /**
             * Alias specifies the alias of the key in the keystore, required by the JKS format.
             * If not provided, the default alias `certificate` will be used.
             */
            alias: string;
            /**
             * Create enables JKS keystore creation for the Certificate.
             * If true, a file named `keystore.jks` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.jks`
             * will also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef`
             * containing the issuing Certificate Authority
             */
            create: boolean;
            passwordSecretRef: outputs.cert_manager.v1.CertificateSpecKeystoresJksPasswordSecretRef;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * JKS configures options for storing a JKS keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJksPatch {
            /**
             * Alias specifies the alias of the key in the keystore, required by the JKS format.
             * If not provided, the default alias `certificate` will be used.
             */
            alias: string;
            /**
             * Create enables JKS keystore creation for the Certificate.
             * If true, a file named `keystore.jks` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.jks`
             * will also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef`
             * containing the issuing Certificate Authority
             */
            create: boolean;
            passwordSecretRef: outputs.cert_manager.v1.CertificateSpecKeystoresJksPasswordSecretRefPatch;
        }

        /**
         * Additional keystore output formats to be stored in the Certificate's Secret.
         */
        export interface CertificateSpecKeystoresPatch {
            jks: outputs.cert_manager.v1.CertificateSpecKeystoresJksPatch;
            pkcs12: outputs.cert_manager.v1.CertificateSpecKeystoresPkcs12Patch;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12 {
            /**
             * Create enables PKCS12 keystore creation for the Certificate.
             * If true, a file named `keystore.p12` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.p12` will
             * also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef` containing the issuing Certificate
             * Authority
             */
            create: boolean;
            passwordSecretRef: outputs.cert_manager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRef;
            /**
             * Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
             * used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.
             *
             * If provided, allowed values are:
             * `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
             * `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
             * `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
             * (eg. because of company policy). Please note that the security of the algorithm is not that important
             * in reality, because the unencrypted certificate and private key are also stored in the Secret.
             */
            profile: string;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource
         * containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the
         * `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12Patch {
            /**
             * Create enables PKCS12 keystore creation for the Certificate.
             * If true, a file named `keystore.p12` will be created in the target
             * Secret resource, encrypted using the password stored in
             * `passwordSecretRef`.
             * The keystore file will be updated immediately.
             * If the issuer provided a CA certificate, a file named `truststore.p12` will
             * also be created in the target Secret resource, encrypted using the
             * password stored in `passwordSecretRef` containing the issuing Certificate
             * Authority
             */
            create: boolean;
            passwordSecretRef: outputs.cert_manager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRefPatch;
            /**
             * Profile specifies the key and certificate encryption algorithms and the HMAC algorithm
             * used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.
             *
             * If provided, allowed values are:
             * `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.
             * `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.
             * `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms
             * (eg. because of company policy). Please note that the security of the algorithm is not that important
             * in reality, because the unencrypted certificate and private key are also stored in the Secret.
             */
            profile: string;
        }

        /**
         * x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
         * More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10
         *
         * This is an Alpha Feature and is only enabled with the
         * `--feature-gates=NameConstraints=true` option set on both
         * the controller and webhook components.
         */
        export interface CertificateSpecNameConstraints {
            /**
             * if true then the name constraints are marked critical.
             */
            critical: boolean;
            excluded: outputs.cert_manager.v1.CertificateSpecNameConstraintsExcluded;
            permitted: outputs.cert_manager.v1.CertificateSpecNameConstraintsPermitted;
        }

        /**
         * Excluded contains the constraints which must be disallowed. Any name matching a
         * restriction in the excluded field is invalid regardless
         * of information appearing in the permitted
         */
        export interface CertificateSpecNameConstraintsExcluded {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains: string[];
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses: string[];
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges: string[];
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains: string[];
        }

        /**
         * Excluded contains the constraints which must be disallowed. Any name matching a
         * restriction in the excluded field is invalid regardless
         * of information appearing in the permitted
         */
        export interface CertificateSpecNameConstraintsExcludedPatch {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains: string[];
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses: string[];
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges: string[];
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains: string[];
        }

        /**
         * x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.
         * More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10
         *
         * This is an Alpha Feature and is only enabled with the
         * `--feature-gates=NameConstraints=true` option set on both
         * the controller and webhook components.
         */
        export interface CertificateSpecNameConstraintsPatch {
            /**
             * if true then the name constraints are marked critical.
             */
            critical: boolean;
            excluded: outputs.cert_manager.v1.CertificateSpecNameConstraintsExcludedPatch;
            permitted: outputs.cert_manager.v1.CertificateSpecNameConstraintsPermittedPatch;
        }

        /**
         * Permitted contains the constraints in which the names must be located.
         */
        export interface CertificateSpecNameConstraintsPermitted {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains: string[];
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses: string[];
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges: string[];
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains: string[];
        }

        /**
         * Permitted contains the constraints in which the names must be located.
         */
        export interface CertificateSpecNameConstraintsPermittedPatch {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains: string[];
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses: string[];
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded.
             * This should be a valid CIDR notation.
             */
            ipRanges: string[];
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains: string[];
        }

        export interface CertificateSpecOtherNames {
            /**
             * OID is the object identifier for the otherName SAN.
             * The object identifier must be expressed as a dotted string, for
             * example, "1.2.840.113556.1.4.221".
             */
            oid: string;
            /**
             * utf8Value is the string value of the otherName SAN.
             * The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
             */
            utf8Value: string;
        }

        export interface CertificateSpecOtherNamesPatch {
            /**
             * OID is the object identifier for the otherName SAN.
             * The object identifier must be expressed as a dotted string, for
             * example, "1.2.840.113556.1.4.221".
             */
            oid: string;
            /**
             * utf8Value is the string value of the otherName SAN.
             * The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
             */
            utf8Value: string;
        }

        /**
         * Specification of the desired state of the Certificate resource.
         * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateSpecPatch {
            /**
             * Defines extra output formats of the private key and signed certificate chain
             * to be written to this Certificate's target Secret.
             *
             * This is a Beta Feature enabled by default. It can be disabled with the
             * `--feature-gates=AdditionalCertificateOutputFormats=false` option set on both
             * the controller and webhook components.
             */
            additionalOutputFormats: outputs.cert_manager.v1.CertificateSpecAdditionalOutputFormatsPatch[];
            /**
             * Requested common name X509 certificate subject attribute.
             * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
             * NOTE: TLS clients will ignore this value when any subject alternative name is
             * set (see https://tools.ietf.org/html/rfc6125#section-6.4.4).
             *
             * Should have a length of 64 characters or fewer to avoid generating invalid CSRs.
             * Cannot be set if the `literalSubject` field is set.
             */
            commonName: string;
            /**
             * Requested DNS subject alternative names.
             */
            dnsNames: string[];
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
             * issuer may choose to ignore the requested duration, just like any other
             * requested attribute.
             *
             * If unset, this defaults to 90 days.
             * Minimum accepted duration is 1 hour.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            duration: string;
            /**
             * Requested email subject alternative names.
             */
            emailAddresses: string[];
            /**
             * Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.
             *
             * This option defaults to true, and should only be disabled if the target
             * issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
             */
            encodeUsagesInRequest: boolean;
            /**
             * Requested IP address subject alternative names.
             */
            ipAddresses: string[];
            /**
             * Requested basic constraints isCA value.
             * The isCA value is used to set the `isCA` field on the created CertificateRequest
             * resources. Note that the issuer may choose to ignore the requested isCA value, just
             * like any other requested attribute.
             *
             * If true, this will automatically add the `cert sign` usage to the list
             * of requested `usages`.
             */
            isCA: boolean;
            issuerRef: outputs.cert_manager.v1.CertificateSpecIssuerRefPatch;
            keystores: outputs.cert_manager.v1.CertificateSpecKeystoresPatch;
            /**
             * Requested X.509 certificate subject, represented using the LDAP "String
             * Representation of a Distinguished Name" [1].
             * Important: the LDAP string format also specifies the order of the attributes
             * in the subject, this is important when issuing certs for LDAP authentication.
             * Example: `CN=foo,DC=corp,DC=example,DC=com`
             * More info [1]: https://datatracker.ietf.org/doc/html/rfc4514
             * More info: https://github.com/cert-manager/cert-manager/issues/3203
             * More info: https://github.com/cert-manager/cert-manager/issues/4424
             *
             * Cannot be set if the `subject` or `commonName` field is set.
             */
            literalSubject: string;
            nameConstraints: outputs.cert_manager.v1.CertificateSpecNameConstraintsPatch;
            /**
             * `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37
             * Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.
             * Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3
             * You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
             */
            otherNames: outputs.cert_manager.v1.CertificateSpecOtherNamesPatch[];
            privateKey: outputs.cert_manager.v1.CertificateSpecPrivateKeyPatch;
            /**
             * How long before the currently issued certificate's expiry cert-manager should
             * renew the certificate. For example, if a certificate is valid for 60 minutes,
             * and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate
             * 50 minutes after it was issued (i.e. when there are 10 minutes remaining until
             * the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * If unset, this defaults to 1/3 of the issued certificate's lifetime.
             * Minimum accepted value is 5 minutes.
             * Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             * Cannot be set if the `renewBeforePercentage` field is set.
             */
            renewBefore: string;
            /**
             * `renewBeforePercentage` is like `renewBefore`, except it is a relative percentage
             * rather than an absolute duration. For example, if a certificate is valid for 60
             * minutes, and  `renewBeforePercentage=25`, cert-manager will begin to attempt to
             * renew the certificate 45 minutes after it was issued (i.e. when there are 15
             * minutes (25%) remaining until the certificate is no longer valid).
             *
             * NOTE: The actual lifetime of the issued certificate is used to determine the
             * renewal time. If an issuer returns a certificate with a different lifetime than
             * the one requested, cert-manager will use the lifetime of the issued certificate.
             *
             * Value must be an integer in the range (0,100). The minimum effective
             * `renewBefore` derived from the `renewBeforePercentage` and `duration` fields is 5
             * minutes.
             * Cannot be set if the `renewBefore` field is set.
             */
            renewBeforePercentage: number;
            /**
             * The maximum number of CertificateRequest revisions that are maintained in
             * the Certificate's history. Each revision represents a single `CertificateRequest`
             * created by this Certificate, either when it was created, renewed, or Spec
             * was changed. Revisions will be removed by oldest first if the number of
             * revisions exceeds this number.
             *
             * If set, revisionHistoryLimit must be a value of `1` or greater.
             * If unset (`nil`), revisions will not be garbage collected.
             * Default value is `nil`.
             */
            revisionHistoryLimit: number;
            /**
             * Name of the Secret resource that will be automatically created and
             * managed by this Certificate resource. It will be populated with a
             * private key and certificate, signed by the denoted issuer. The Secret
             * resource lives in the same namespace as the Certificate resource.
             */
            secretName: string;
            secretTemplate: outputs.cert_manager.v1.CertificateSpecSecretTemplatePatch;
            subject: outputs.cert_manager.v1.CertificateSpecSubjectPatch;
            /**
             * Requested URI subject alternative names.
             */
            uris: string[];
            /**
             * Requested key usages and extended key usages.
             * These usages are used to set the `usages` field on the created CertificateRequest
             * resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages
             * will additionally be encoded in the `request` field which contains the CSR blob.
             *
             * If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages: string[];
        }

        /**
         * Private key options. These include the key algorithm and size, the used
         * encoding and the rotation policy.
         */
        export interface CertificateSpecPrivateKey {
            /**
             * Algorithm is the private key algorithm of the corresponding private key
             * for this certificate.
             *
             * If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
             * If `algorithm` is specified and `size` is not provided,
             * key size of 2048 will be used for `RSA` key algorithm and
             * key size of 256 will be used for `ECDSA` key algorithm.
             * key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm: string;
            /**
             * The private key cryptography standards (PKCS) encoding for this
             * certificate's private key to be encoded in.
             *
             * If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
             * and PKCS#8, respectively.
             * Defaults to `PKCS1` if not specified.
             */
            encoding: string;
            /**
             * RotationPolicy controls how private keys should be regenerated when a
             * re-issuance is being processed.
             *
             * If set to `Never`, a private key will only be generated if one does not
             * already exist in the target `spec.secretName`. If one does exist but it
             * does not have the correct algorithm or size, a warning will be raised
             * to await user intervention.
             * If set to `Always`, a private key matching the specified requirements
             * will be generated whenever a re-issuance occurs.
             * Default is `Never` for backward compatibility.
             */
            rotationPolicy: string;
            /**
             * Size is the key bit size of the corresponding private key for this certificate.
             *
             * If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
             * and will default to `2048` if not specified.
             * If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
             * and will default to `256` if not specified.
             * If `algorithm` is set to `Ed25519`, Size is ignored.
             * No other values are allowed.
             */
            size: number;
        }

        /**
         * Private key options. These include the key algorithm and size, the used
         * encoding and the rotation policy.
         */
        export interface CertificateSpecPrivateKeyPatch {
            /**
             * Algorithm is the private key algorithm of the corresponding private key
             * for this certificate.
             *
             * If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.
             * If `algorithm` is specified and `size` is not provided,
             * key size of 2048 will be used for `RSA` key algorithm and
             * key size of 256 will be used for `ECDSA` key algorithm.
             * key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm: string;
            /**
             * The private key cryptography standards (PKCS) encoding for this
             * certificate's private key to be encoded in.
             *
             * If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1
             * and PKCS#8, respectively.
             * Defaults to `PKCS1` if not specified.
             */
            encoding: string;
            /**
             * RotationPolicy controls how private keys should be regenerated when a
             * re-issuance is being processed.
             *
             * If set to `Never`, a private key will only be generated if one does not
             * already exist in the target `spec.secretName`. If one does exist but it
             * does not have the correct algorithm or size, a warning will be raised
             * to await user intervention.
             * If set to `Always`, a private key matching the specified requirements
             * will be generated whenever a re-issuance occurs.
             * Default is `Never` for backward compatibility.
             */
            rotationPolicy: string;
            /**
             * Size is the key bit size of the corresponding private key for this certificate.
             *
             * If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,
             * and will default to `2048` if not specified.
             * If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,
             * and will default to `256` if not specified.
             * If `algorithm` is set to `Ed25519`, Size is ignored.
             * No other values are allowed.
             */
            size: number;
        }

        /**
         * Defines annotations and labels to be copied to the Certificate's Secret.
         * Labels and annotations on the Secret will be changed as they appear on the
         * SecretTemplate when added or removed. SecretTemplate annotations are added
         * in conjunction with, and cannot overwrite, the base set of annotations
         * cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplate {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations: {[key: string]: string};
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels: {[key: string]: string};
        }

        /**
         * Defines annotations and labels to be copied to the Certificate's Secret.
         * Labels and annotations on the Secret will be changed as they appear on the
         * SecretTemplate when added or removed. SecretTemplate annotations are added
         * in conjunction with, and cannot overwrite, the base set of annotations
         * cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplatePatch {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations: {[key: string]: string};
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels: {[key: string]: string};
        }

        /**
         * Requested set of X509 certificate subject attributes.
         * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
         *
         * The common name attribute is specified separately in the `commonName` field.
         * Cannot be set if the `literalSubject` field is set.
         */
        export interface CertificateSpecSubject {
            /**
             * Countries to be used on the Certificate.
             */
            countries: string[];
            /**
             * Cities to be used on the Certificate.
             */
            localities: string[];
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits: string[];
            /**
             * Organizations to be used on the Certificate.
             */
            organizations: string[];
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes: string[];
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces: string[];
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber: string;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses: string[];
        }

        /**
         * Requested set of X509 certificate subject attributes.
         * More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6
         *
         * The common name attribute is specified separately in the `commonName` field.
         * Cannot be set if the `literalSubject` field is set.
         */
        export interface CertificateSpecSubjectPatch {
            /**
             * Countries to be used on the Certificate.
             */
            countries: string[];
            /**
             * Cities to be used on the Certificate.
             */
            localities: string[];
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits: string[];
            /**
             * Organizations to be used on the Certificate.
             */
            organizations: string[];
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes: string[];
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces: string[];
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber: string;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses: string[];
        }

        /**
         * Status of the Certificate.
         * This is set and managed automatically.
         * Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateStatus {
            /**
             * List of status conditions to indicate the status of certificates.
             * Known condition types are `Ready` and `Issuing`.
             */
            conditions: outputs.cert_manager.v1.CertificateStatusConditions[];
            /**
             * The number of continuous failed issuance attempts up till now. This
             * field gets removed (if set) on a successful issuance and gets set to
             * 1 if unset and an issuance has failed. If an issuance has failed, the
             * delay till the next issuance will be calculated using formula
             * time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts: number;
            /**
             * LastFailureTime is set only if the latest issuance for this
             * Certificate failed and contains the time of the failure. If an
             * issuance has failed, the delay till the next issuance will be
             * calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -
             * 1). If the latest issuance has succeeded this field will be unset.
             */
            lastFailureTime: string;
            /**
             * The name of the Secret resource containing the private key to be used
             * for the next certificate iteration.
             * The keymanager controller will automatically set this field if the
             * `Issuing` condition is set to `True`.
             * It will automatically unset this field when the Issuing condition is
             * not set or False.
             */
            nextPrivateKeySecretName: string;
            /**
             * The expiration time of the certificate stored in the secret named
             * by this resource in `spec.secretName`.
             */
            notAfter: string;
            /**
             * The time after which the certificate stored in the secret named
             * by this resource in `spec.secretName` is valid.
             */
            notBefore: string;
            /**
             * RenewalTime is the time at which the certificate will be next
             * renewed.
             * If not set, no upcoming renewal is scheduled.
             */
            renewalTime: string;
            /**
             * The current 'revision' of the certificate as issued.
             *
             * When a CertificateRequest resource is created, it will have the
             * `cert-manager.io/certificate-revision` set to one greater than the
             * current value of this field.
             *
             * Upon issuance, this field will be set to the value of the annotation
             * on the CertificateRequest resource used to issue the certificate.
             *
             * Persisting the value on the CertificateRequest resource allows the
             * certificates controller to know whether a request is part of an old
             * issuance or if it is part of the ongoing revision's issuance by
             * checking if the revision value in the annotation is greater than this
             * field.
             */
            revision: number;
        }

        /**
         * CertificateCondition contains condition information for a Certificate.
         */
        export interface CertificateStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Certificate.
             */
            observedGeneration: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: string;
        }

        /**
         * CertificateCondition contains condition information for a Certificate.
         */
        export interface CertificateStatusConditionsPatch {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Certificate.
             */
            observedGeneration: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: string;
        }

        /**
         * Status of the Certificate.
         * This is set and managed automatically.
         * Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateStatusPatch {
            /**
             * List of status conditions to indicate the status of certificates.
             * Known condition types are `Ready` and `Issuing`.
             */
            conditions: outputs.cert_manager.v1.CertificateStatusConditionsPatch[];
            /**
             * The number of continuous failed issuance attempts up till now. This
             * field gets removed (if set) on a successful issuance and gets set to
             * 1 if unset and an issuance has failed. If an issuance has failed, the
             * delay till the next issuance will be calculated using formula
             * time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts: number;
            /**
             * LastFailureTime is set only if the latest issuance for this
             * Certificate failed and contains the time of the failure. If an
             * issuance has failed, the delay till the next issuance will be
             * calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -
             * 1). If the latest issuance has succeeded this field will be unset.
             */
            lastFailureTime: string;
            /**
             * The name of the Secret resource containing the private key to be used
             * for the next certificate iteration.
             * The keymanager controller will automatically set this field if the
             * `Issuing` condition is set to `True`.
             * It will automatically unset this field when the Issuing condition is
             * not set or False.
             */
            nextPrivateKeySecretName: string;
            /**
             * The expiration time of the certificate stored in the secret named
             * by this resource in `spec.secretName`.
             */
            notAfter: string;
            /**
             * The time after which the certificate stored in the secret named
             * by this resource in `spec.secretName` is valid.
             */
            notBefore: string;
            /**
             * RenewalTime is the time at which the certificate will be next
             * renewed.
             * If not set, no upcoming renewal is scheduled.
             */
            renewalTime: string;
            /**
             * The current 'revision' of the certificate as issued.
             *
             * When a CertificateRequest resource is created, it will have the
             * `cert-manager.io/certificate-revision` set to one greater than the
             * current value of this field.
             *
             * Upon issuance, this field will be set to the value of the annotation
             * on the CertificateRequest resource used to issue the certificate.
             *
             * Persisting the value on the CertificateRequest resource allows the
             * certificates controller to know whether a request is part of an old
             * issuance or if it is part of the ongoing revision's issuance by
             * checking if the revision value in the annotation is greater than this
             * field.
             */
            revision: number;
        }

        /**
         * A ClusterIssuer represents a certificate issuing authority which can be
         * referenced as part of `issuerRef` fields.
         * It is similar to an Issuer, however it is cluster-scoped and therefore can
         * be referenced by resources that exist in *any* namespace, not just the same
         * namespace as the referent.
         */
        export interface ClusterIssuer {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "cert-manager.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ClusterIssuer";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.cert_manager.v1.ClusterIssuerSpec;
            status: outputs.cert_manager.v1.ClusterIssuerStatus;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpec {
            acme: outputs.cert_manager.v1.ClusterIssuerSpecAcme;
            ca: outputs.cert_manager.v1.ClusterIssuerSpecCa;
            selfSigned: outputs.cert_manager.v1.ClusterIssuerSpecSelfSigned;
            vault: outputs.cert_manager.v1.ClusterIssuerSpecVault;
            venafi: outputs.cert_manager.v1.ClusterIssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server
         * to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcme {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate
             * chain presented by the ACME server.
             * Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             */
            caBundle: string;
            /**
             * Enables or disables generating a new ACME account key.
             * If true, the Issuer resource will *not* request a new account but will expect
             * the account key to be supplied via an existing secret.
             * If false, the cert-manager system will generate a new ACME account key
             * for the Issuer.
             * Defaults to false.
             */
            disableAccountKeyGeneration: boolean;
            /**
             * Email is the email address to be associated with the ACME account.
             * This field is optional, but it is strongly recommended to be set.
             * It will be used to contact you in case of issues with your account or
             * certificates, including expiry notification emails.
             * This field may be updated after the account is initially registered.
             */
            email: string;
            /**
             * Enables requesting a Not After date on certificates that matches the
             * duration of the certificate. This is not supported by all ACME servers
             * like Let's Encrypt. If set to true when the ACME server does not support
             * it, it will create an error on the Order.
             * Defaults to false.
             */
            enableDurationFeature: boolean;
            externalAccountBinding: outputs.cert_manager.v1.ClusterIssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple.
             * PreferredChain is no guarantee that this one gets delivered by the ACME
             * endpoint.
             * For example, for Let's Encrypt's DST crosssign you would use:
             * "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
             * This value picks the first certificate bundle in the combined set of
             * ACME default and alternative chains that has a root-most certificate with
             * this value as its issuer's commonname.
             */
            preferredChain: string;
            privateKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint.
             * For example, for Let's Encrypt's staging endpoint, you would use:
             * "https://acme-staging-v02.api.letsencrypt.org/directory".
             * Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate.
             * If true, requests to the ACME server will not have the TLS certificate chain
             * validated.
             * Mutually exclusive with CABundle; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * Only enable this option in development environments.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             * Defaults to false.
             */
            skipTLSVerify: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve
             * ACME challenges for the matching domains.
             * Solver configurations must be provided in order to obtain certificates
             * from an ACME server.
             * For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME
         * server.
         * If set, upon registration cert-manager will attempt to associate the given
         * external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility
             * reasons and should not be used. The algorithm is now hardcoded to HS256
             * in golang/x/crypto/acme.
             */
            keyAlgorithm: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            keySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
         * Secret which holds the symmetric MAC key of the External Account Binding.
         * The `key` is the index string that is paired with the key data in the
         * Secret and should not be confused with the key data itself, or indeed with
         * the External Account Binding keyID above.
         * The secret key stored in the Secret **must** be un-padded, base64 URL
         * encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
         * Secret which holds the symmetric MAC key of the External Account Binding.
         * The `key` is the index string that is paired with the key data in the
         * Secret and should not be confused with the key data itself, or indeed with
         * the External Account Binding keyID above.
         * The secret key stored in the Secret **must** be un-padded, base64 URL
         * encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME
         * server.
         * If set, upon registration cert-manager will attempt to associate the given
         * external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingPatch {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility
             * reasons and should not be used. The algorithm is now hardcoded to HS256
             * in golang/x/crypto/acme.
             */
            keyAlgorithm: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            keySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefPatch;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server
         * to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcmePatch {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate
             * chain presented by the ACME server.
             * Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             */
            caBundle: string;
            /**
             * Enables or disables generating a new ACME account key.
             * If true, the Issuer resource will *not* request a new account but will expect
             * the account key to be supplied via an existing secret.
             * If false, the cert-manager system will generate a new ACME account key
             * for the Issuer.
             * Defaults to false.
             */
            disableAccountKeyGeneration: boolean;
            /**
             * Email is the email address to be associated with the ACME account.
             * This field is optional, but it is strongly recommended to be set.
             * It will be used to contact you in case of issues with your account or
             * certificates, including expiry notification emails.
             * This field may be updated after the account is initially registered.
             */
            email: string;
            /**
             * Enables requesting a Not After date on certificates that matches the
             * duration of the certificate. This is not supported by all ACME servers
             * like Let's Encrypt. If set to true when the ACME server does not support
             * it, it will create an error on the Order.
             * Defaults to false.
             */
            enableDurationFeature: boolean;
            externalAccountBinding: outputs.cert_manager.v1.ClusterIssuerSpecAcmeExternalAccountBindingPatch;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple.
             * PreferredChain is no guarantee that this one gets delivered by the ACME
             * endpoint.
             * For example, for Let's Encrypt's DST crosssign you would use:
             * "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
             * This value picks the first certificate bundle in the combined set of
             * ACME default and alternative chains that has a root-most certificate with
             * this value as its issuer's commonname.
             */
            preferredChain: string;
            privateKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmePrivateKeySecretRefPatch;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint.
             * For example, for Let's Encrypt's staging endpoint, you would use:
             * "https://acme-staging-v02.api.letsencrypt.org/directory".
             * Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate.
             * If true, requests to the ACME server will not have the TLS certificate chain
             * validated.
             * Mutually exclusive with CABundle; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * Only enable this option in development environments.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             * Defaults to false.
             */
            skipTLSVerify: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve
             * ACME challenges for the matching domains.
             * Solver configurations must be provided in order to obtain certificates
             * from an ACME server.
             * For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversPatch[];
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to
         * store the automatically generated ACME account private key.
         * Optionally, a `key` may be specified to select a specific entry within
         * the named Secret resource.
         * If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to
         * store the automatically generated ACME account private key.
         * Optionally, a `key` may be specified to select a specific entry within
         * the named Secret resource.
         * If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
         * A selector may be provided to use different solving strategies for different DNS names.
         * Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolvers {
            dns01: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01;
            http01: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01;
            selector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01 {
            acmeDNS: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNS;
            akamai: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Akamai;
            azureDNS: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNS;
            cloudDNS: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNS;
            cloudflare: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME
             * records when found in DNS zones.
             */
            cnameStrategy: string;
            digitalocean: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Digitalocean;
            rfc2136: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136;
            route53: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53;
            webhook: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
         * DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNS {
            accountSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
         * DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatch {
            accountSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatch;
            host: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Akamai {
            accessTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            clientSecretSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            clientTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiPatch {
            accessTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatch;
            clientSecretSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatch;
            clientTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatch;
            serviceConsumerDomain: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNS {
            /**
             * Auth: Azure Service Principal:
             * The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientSecret and TenantID must also be set.
             */
            clientID: string;
            clientSecretSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName: string;
            managedIdentity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal:
             * The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientID and ClientSecret must also be set.
             */
            tenantID: string;
        }

        /**
         * Auth: Azure Service Principal:
         * A reference to a Secret containing the password associated with the Service Principal.
         * If set, ClientID and TenantID must also be set.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Service Principal:
         * A reference to a Secret containing the password associated with the Service Principal.
         * If set, ClientID and TenantID must also be set.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity:
         * Settings to enable Azure Workload Identity or Azure Managed Service Identity
         * If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             * Cannot be used for Azure Managed Service Identity
             */
            resourceID: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity:
         * Settings to enable Azure Workload Identity or Azure Managed Service Identity
         * If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatch {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             * Cannot be used for Azure Managed Service Identity
             */
            resourceID: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSPatch {
            /**
             * Auth: Azure Service Principal:
             * The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientSecret and TenantID must also be set.
             */
            clientID: string;
            clientSecretSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatch;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName: string;
            managedIdentity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatch;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal:
             * The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientID and ClientSecret must also be set.
             */
            tenantID: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which
             * Cloud DNS zone the challenge record has to be created.
             * If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName: string;
            project: string;
            serviceAccountSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSPatch {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which
             * Cloud DNS zone the challenge record has to be created.
             * If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName: string;
            project: string;
            serviceAccountSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatch;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Cloudflare {
            apiKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            apiTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email: string;
        }

        /**
         * API key to use to authenticate with Cloudflare.
         * Note: using an API token to authenticate is now the recommended method
         * as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API key to use to authenticate with Cloudflare.
         * Note: using an API token to authenticate is now the recommended method
         * as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflarePatch {
            apiKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatch;
            apiTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatch;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Digitalocean {
            tokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatch {
            tokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatch;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Patch {
            acmeDNS: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSPatch;
            akamai: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiPatch;
            azureDNS: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSPatch;
            cloudDNS: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSPatch;
            cloudflare: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflarePatch;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME
             * records when found in DNS zones.
             */
            cnameStrategy: string;
            digitalocean: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanPatch;
            rfc2136: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136Patch;
            route53: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Patch;
            webhook: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01WebhookPatch;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
         * to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting
             * RFC2136 in the form host:port. If the host is an IPv6 address it must be
             * enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
             * This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
             * when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
             * Supported values are (case-insensitive): ``HMACMD5`` (default),
             * ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm: string;
            /**
             * The TSIG Key name configured in the DNS.
             * If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName: string;
            tsigSecretSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
         * to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136Patch {
            /**
             * The IP address or hostname of an authoritative DNS server supporting
             * RFC2136 in the form host:port. If the host is an IPv6 address it must be
             * enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
             * This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
             * when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
             * Supported values are (case-insensitive): ``HMACMD5`` (default),
             * ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm: string;
            /**
             * The TSIG Key name configured in the DNS.
             * If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName: string;
            tsigSecretSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatch;
        }

        /**
         * The name of the secret containing the TSIG value.
         * If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The name of the secret containing the TSIG value.
         * If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication.
             * Cannot be set when SecretAccessKeyID is set.
             * If neither the Access Key nor Key ID are set, we fall-back to using env
             * vars, shared credentials file or AWS Instance metadata,
             * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID: string;
            accessKeyIDSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef;
            auth: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Auth;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID: string;
            /**
             * Override the AWS region.
             *
             * Route53 is a global service and does not have regional endpoints but the
             * region specified here (or via environment variables) is used as a hint to
             * help compute the correct AWS credential scope and partition when it
             * connects to Route53. See:
             * - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
             * - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)
             *
             * If you omit this region field, cert-manager will use the region from
             * AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
             * in the cert-manager controller Pod.
             *
             * The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
             * In this case this `region` field value is ignored.
             *
             * The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
             * In this case this `region` field value is ignored.
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
             * or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role: string;
            secretAccessKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS
         * access key ID from a key within a Kubernetes Secret.
         * Cannot be set when AccessKeyID is set.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS
         * access key ID from a key within a Kubernetes Secret.
         * Cannot be set when AccessKeyID is set.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Auth {
            kubernetes: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetes;
        }

        /**
         * Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
         * by passing a bound ServiceAccount token.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetes {
            serviceAccountRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRef;
        }

        /**
         * Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
         * by passing a bound ServiceAccount token.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatch {
            serviceAccountRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatch;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). To use this field, you must
         * configure an RBAC rule to let cert-manager request a token.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRef {
            /**
             * TokenAudiences is an optional list of audiences to include in the
             * token passed to AWS. The default token consisting of the issuer's namespace
             * and name is always included.
             * If unset the audience defaults to `sts.amazonaws.com`.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). To use this field, you must
         * configure an RBAC rule to let cert-manager request a token.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatch {
            /**
             * TokenAudiences is an optional list of audiences to include in the
             * token passed to AWS. The default token consisting of the issuer's namespace
             * and name is always included.
             * If unset the audience defaults to `sts.amazonaws.com`.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AuthPatch {
            kubernetes: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AuthKubernetesPatch;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Patch {
            /**
             * The AccessKeyID is used for authentication.
             * Cannot be set when SecretAccessKeyID is set.
             * If neither the Access Key nor Key ID are set, we fall-back to using env
             * vars, shared credentials file or AWS Instance metadata,
             * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID: string;
            accessKeyIDSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatch;
            auth: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AuthPatch;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID: string;
            /**
             * Override the AWS region.
             *
             * Route53 is a global service and does not have regional endpoints but the
             * region specified here (or via environment variables) is used as a hint to
             * help compute the correct AWS credential scope and partition when it
             * connects to Route53. See:
             * - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
             * - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)
             *
             * If you omit this region field, cert-manager will use the region from
             * AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
             * in the cert-manager controller Pod.
             *
             * The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
             * In this case this `region` field value is ignored.
             *
             * The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
             * In this case this `region` field value is ignored.
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
             * or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role: string;
            secretAccessKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatch;
        }

        /**
         * The SecretAccessKey is used for authentication.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage
         * DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver
             * when challenges are processed.
             * This can contain arbitrary JSON data.
             * Secret values should not be specified in this stanza.
             * If secret values are needed (e.g. credentials for a DNS service), you
             * should use a SecretKeySelector to reference a Secret resource.
             * For details on the schema of this field, consult the webhook provider
             * implementation's documentation.
             */
            config: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload
             * resources to the webhook apiserver.
             * This should be the same as the GroupName specified in the webhook
             * provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider
             * implementation.
             * This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage
         * DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01WebhookPatch {
            /**
             * Additional configuration that should be passed to the webhook apiserver
             * when challenges are processed.
             * This can contain arbitrary JSON data.
             * Secret values should not be specified in this stanza.
             * If secret values are needed (e.g. credentials for a DNS service), you
             * should use a SecretKeySelector to reference a Secret resource.
             * For details on the schema of this field, consult the webhook provider
             * implementation's documentation.
             */
            config: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload
             * resources to the webhook apiserver.
             * This should be the same as the GroupName specified in the webhook
             * provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider
             * implementation.
             * This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the HTTP01 challenge flow.
         * It is not possible to obtain certificates for wildcard domain names
         * (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01 {
            gatewayHTTPRoute: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoute;
            ingress: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking
         * in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
         * create HTTPRoutes with the specified labels in the same namespace as the challenge.
         * This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager
             * while solving HTTP-01 challenges.
             */
            labels: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
             * cert-manager needs to know which parentRefs should be used when creating
             * the HTTPRoute. Usually, the parentRef references a Gateway. See:
             * https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs[];
            podTemplate: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking
         * in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
         * create HTTPRoutes with the specified labels in the same namespace as the challenge.
         * This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatch {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager
             * while solving HTTP-01 challenges.
             */
            labels: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
             * cert-manager needs to know which parentRefs should be used when creating
             * the HTTPRoute. Usually, the parentRef references a Gateway. See:
             * https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatch[];
            podTemplate: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatch;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplate {
            metadata: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadata;
            spec: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatch {
            metadata: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatch;
            spec: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatch;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpec {
            affinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinity {
            nodeAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatch {
            affinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch[];
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by
         * creating or modifying Ingress resources in order to route requests for
         * '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
         * provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when
             * creating Ingress resources to solve ACME challenges that use this
             * challenge solver. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            class: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress
             * resources used to solve ACME challenges that use this challenge solver.
             * This is the recommended way of configuring the ingress class. Only one of
             * `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName: string;
            ingressTemplate: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving
             * routes inserted into it in order to solve HTTP01 challenges.
             * This is typically used in conjunction with ingress controllers like
             * ingress-gce, which maintains a 1:1 mapping between external IPs and
             * ingress resources. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            name: string;
            podTemplate: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver
         * ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            metadata: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver
         * ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatch {
            metadata: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatch;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by
         * creating or modifying Ingress resources in order to route requests for
         * '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
         * provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPatch {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when
             * creating Ingress resources to solve ACME challenges that use this
             * challenge solver. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            class: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress
             * resources used to solve ACME challenges that use this challenge solver.
             * This is the recommended way of configuring the ingress class. Only one of
             * `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName: string;
            ingressTemplate: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplatePatch;
            /**
             * The name of the ingress resource that should have ACME challenge solving
             * routes inserted into it in order to solve HTTP01 challenges.
             * This is typically used in conjunction with ingress controllers like
             * ingress-gce, which maintains a 1:1 mapping between external IPs and
             * ingress resources. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            name: string;
            podTemplate: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatch;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate {
            metadata: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            spec: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplatePatch {
            metadata: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatch;
            spec: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatch;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            affinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContext;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            nodeAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatch {
            affinity: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatch;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatch[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatch;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatch[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctls[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch[];
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the HTTP01 challenge flow.
         * It is not possible to obtain certificates for wildcard domain names
         * (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Patch {
            gatewayHTTPRoute: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatch;
            ingress: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPatch;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
         * A selector may be provided to use different solving strategies for different DNS names.
         * Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolversPatch {
            dns01: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversDns01Patch;
            http01: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversHttp01Patch;
            selector: outputs.cert_manager.v1.ClusterIssuerSpecAcmeSolversSelectorPatch;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that
         * should be solved using this challenge solver.
         * If not specified, the solver will be treated as the 'default' solver
         * with the lowest priority, i.e. if any other solver has a more specific
         * match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve.
             * If specified and a match is found, a dnsNames selector will take
             * precedence over a dnsZones selector.
             * If multiple solvers match with the same dnsNames value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsNames: string[];
            /**
             * List of DNSZones that this solver will be used to solve.
             * The most specific DNS zone match specified here will take precedence
             * over other DNS zone matches, so a solver specifying sys.example.com
             * will be selected over one specifying example.com for the domain
             * www.sys.example.com.
             * If multiple solvers match with the same dnsZones value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsZones: string[];
            /**
             * A label selector that is used to refine the set of certificate's that
             * this challenge solver will apply to.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that
         * should be solved using this challenge solver.
         * If not specified, the solver will be treated as the 'default' solver
         * with the lowest priority, i.e. if any other solver has a more specific
         * match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelectorPatch {
            /**
             * List of DNSNames that this solver will be used to solve.
             * If specified and a match is found, a dnsNames selector will take
             * precedence over a dnsZones selector.
             * If multiple solvers match with the same dnsNames value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsNames: string[];
            /**
             * List of DNSZones that this solver will be used to solve.
             * The most specific DNS zone match specified here will take precedence
             * over other DNS zone matches, so a solver specifying sys.example.com
             * will be selected over one specifying example.com for the domain
             * www.sys.example.com.
             * If multiple solvers match with the same dnsZones value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsZones: string[];
            /**
             * A label selector that is used to refine the set of certificate's that
             * this challenge solver will apply to.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair
         * stored in a Secret resource.
         * This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints: string[];
            /**
             * IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
             * it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
             * As an example, such a URL might be "http://ca.domain.com/ca.crt".
             */
            issuingCertificateURLs: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of
             * URLs of OCSP responders. The OCSP responders can be queried for the
             * revocation status of an issued certificate. If not set, the
             * certificate will be issued with no OCSP servers set. For example, an
             * OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued
             * by this Issuer.
             */
            secretName: string;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair
         * stored in a Secret resource.
         * This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCaPatch {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints: string[];
            /**
             * IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
             * it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
             * As an example, such a URL might be "http://ca.domain.com/ca.crt".
             */
            issuingCertificateURLs: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of
             * URLs of OCSP responders. The OCSP responders can be queried for the
             * revocation status of an issued certificate. If not set, the
             * certificate will be issued with no OCSP servers set. For example, an
             * OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued
             * by this Issuer.
             */
            secretName: string;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpecPatch {
            acme: outputs.cert_manager.v1.ClusterIssuerSpecAcmePatch;
            ca: outputs.cert_manager.v1.ClusterIssuerSpecCaPatch;
            selfSigned: outputs.cert_manager.v1.ClusterIssuerSpecSelfSignedPatch;
            vault: outputs.cert_manager.v1.ClusterIssuerSpecVaultPatch;
            venafi: outputs.cert_manager.v1.ClusterIssuerSpecVenafiPatch;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the
         * private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints: string[];
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the
         * private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSignedPatch {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault
         * PKI backend.
         */
        export interface ClusterIssuerSpecVault {
            auth: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuth;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by Vault. Only used if using HTTPS to connect to Vault and
             * ignored for HTTP connections.
             * Mutually exclusive with CABundleSecretRef.
             * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
             * the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultCaBundleSecretRef;
            clientCertSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultClientCertSecretRef;
            clientKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultClientKeySecretRef;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
             * More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
             * "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuth {
            appRole: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthAppRole;
            clientCertificate: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthClientCertificate;
            kubernetes: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthKubernetes;
            tokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism,
         * with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g:
             * "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting
             * up the authentication backend in Vault.
             */
            roleId: string;
            secretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism,
         * with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRolePatch {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g:
             * "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting
             * up the authentication backend in Vault.
             */
            roleId: string;
            secretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRefPatch;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used
         * to authenticate with Vault.
         * The `key` field must be specified and denotes which entry within the Secret
         * resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used
         * to authenticate with Vault.
         * The `key` field must be specified and denotes which entry within the Secret
         * resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * ClientCertificate authenticates with Vault by presenting a client
         * certificate during the request's TLS handshake.
         * Works only when using HTTPS protocol.
         */
        export interface ClusterIssuerSpecVaultAuthClientCertificate {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/cert" will be used.
             */
            mountPath: string;
            /**
             * Name of the certificate role to authenticate against.
             * If not set, matching any certificate role, if available.
             */
            name: string;
            /**
             * Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
             * tls.crt and tls.key) used to authenticate to Vault using TLS client
             * authentication.
             */
            secretName: string;
        }

        /**
         * ClientCertificate authenticates with Vault by presenting a client
         * certificate during the request's TLS handshake.
         * Works only when using HTTPS protocol.
         */
        export interface ClusterIssuerSpecVaultAuthClientCertificatePatch {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/cert" will be used.
             */
            mountPath: string;
            /**
             * Name of the certificate role to authenticate against.
             * If not set, matching any certificate role, if available.
             */
            name: string;
            /**
             * Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
             * tls.crt and tls.key) used to authenticate to Vault using TLS client
             * authentication.
             */
            secretName: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount
         * token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/kubernetes" will be used.
             */
            mountPath: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a
             * Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            secretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRef;
            serviceAccountRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceAccountRef;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount
         * token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesPatch {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/kubernetes" will be used.
             */
            mountPath: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a
             * Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            secretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRefPatch;
            serviceAccountRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatch;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used
         * for authenticating with Vault. Use of 'ambient credentials' is not
         * supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used
         * for authenticating with Vault. Use of 'ambient credentials' is not
         * supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). Compared to using "secretRef",
         * using this field means that you don't rely on statically bound tokens. To
         * use this field, you must configure an RBAC rule to let cert-manager
         * request a token.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesServiceAccountRef {
            /**
             * TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
             * consisting of the issuer's namespace and name is always included.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). Compared to using "secretRef",
         * using this field means that you don't rely on statically bound tokens. To
         * use this field, you must configure an RBAC rule to let cert-manager
         * request a token.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesServiceAccountRefPatch {
            /**
             * TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
             * consisting of the issuer's namespace and name is always included.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthPatch {
            appRole: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthAppRolePatch;
            clientCertificate: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthClientCertificatePatch;
            kubernetes: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthKubernetesPatch;
            tokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthTokenSecretRefPatch;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when
         * verifying the certificate chain presented by Vault when using HTTPS.
         * Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         * If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface ClusterIssuerSpecVaultCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when
         * verifying the certificate chain presented by Vault when using HTTPS.
         * Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         * If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface ClusterIssuerSpecVaultCaBundleSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Certificate to use when the
         * Vault server requires mTLS.
         */
        export interface ClusterIssuerSpecVaultClientCertSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Certificate to use when the
         * Vault server requires mTLS.
         */
        export interface ClusterIssuerSpecVaultClientCertSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Private Key to use when the
         * Vault server requires mTLS.
         */
        export interface ClusterIssuerSpecVaultClientKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Private Key to use when the
         * Vault server requires mTLS.
         */
        export interface ClusterIssuerSpecVaultClientKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault
         * PKI backend.
         */
        export interface ClusterIssuerSpecVaultPatch {
            auth: outputs.cert_manager.v1.ClusterIssuerSpecVaultAuthPatch;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by Vault. Only used if using HTTPS to connect to Vault and
             * ignored for HTTP connections.
             * Mutually exclusive with CABundleSecretRef.
             * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
             * the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultCaBundleSecretRefPatch;
            clientCertSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultClientCertSecretRefPatch;
            clientKeySecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVaultClientKeySecretRefPatch;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
             * More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
             * "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP
         * or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafi {
            cloud: outputs.cert_manager.v1.ClusterIssuerSpecVenafiCloud;
            tpp: outputs.cert_manager.v1.ClusterIssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer.
             * All requests made to the Venafi platform will be restricted by the named
             * zone policy.
             * This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloud {
            apiTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud.
             * Defaults to "https://api.venafi.cloud/v1".
             */
            url: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloudPatch {
            apiTokenSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRefPatch;
            /**
             * URL is the base URL for Venafi Cloud.
             * Defaults to "https://api.venafi.cloud/v1".
             */
            url: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP
         * or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafiPatch {
            cloud: outputs.cert_manager.v1.ClusterIssuerSpecVenafiCloudPatch;
            tpp: outputs.cert_manager.v1.ClusterIssuerSpecVenafiTppPatch;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer.
             * All requests made to the Venafi platform will be restricted by the named
             * zone policy.
             * This field is required.
             */
            zone: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTpp {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
             * If undefined, the certificate bundle in the cert-manager controller container
             * is used to validate the chain.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVenafiTppCaBundleSecretRef;
            credentialsRef: outputs.cert_manager.v1.ClusterIssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
             * for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * Reference to a Secret containing a base64-encoded bundle of PEM CAs
         * which will be used to validate the certificate chain presented by the TPP server.
         * Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         */
        export interface ClusterIssuerSpecVenafiTppCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a base64-encoded bundle of PEM CAs
         * which will be used to validate the certificate chain presented by the TPP server.
         * Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         */
        export interface ClusterIssuerSpecVenafiTppCaBundleSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
         * The secret must contain the key 'access-token' for the Access Token Authentication,
         * or two keys, 'username' and 'password' for the API Keys Authentication.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
         * The secret must contain the key 'access-token' for the Access Token Authentication,
         * or two keys, 'username' and 'password' for the API Keys Authentication.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRefPatch {
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTppPatch {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
             * If undefined, the certificate bundle in the cert-manager controller container
             * is used to validate the chain.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.ClusterIssuerSpecVenafiTppCaBundleSecretRefPatch;
            credentialsRef: outputs.cert_manager.v1.ClusterIssuerSpecVenafiTppCredentialsRefPatch;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
             * for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatus {
            acme: outputs.cert_manager.v1.ClusterIssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest.
             * Known condition types are `Ready`.
             */
            conditions: outputs.cert_manager.v1.ClusterIssuerStatusConditions[];
        }

        /**
         * ACME specific status options.
         * This field should only be set if the Issuer is configured to use an ACME
         * server to issue certificates.
         */
        export interface ClusterIssuerStatusAcme {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest
             * registered ACME account, in order to track changes made to registered account
             * associated with the Issuer
             */
            lastPrivateKeyHash: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered
             * ACME account, in order to track changes made to registered account
             * associated with the  Issuer
             */
            lastRegisteredEmail: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve
             * account details from the CA
             */
            uri: string;
        }

        /**
         * ACME specific status options.
         * This field should only be set if the Issuer is configured to use an ACME
         * server to issue certificates.
         */
        export interface ClusterIssuerStatusAcmePatch {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest
             * registered ACME account, in order to track changes made to registered account
             * associated with the Issuer
             */
            lastPrivateKeyHash: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered
             * ACME account, in order to track changes made to registered account
             * associated with the  Issuer
             */
            lastRegisteredEmail: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve
             * account details from the CA
             */
            uri: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Issuer.
             */
            observedGeneration: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditionsPatch {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Issuer.
             */
            observedGeneration: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatusPatch {
            acme: outputs.cert_manager.v1.ClusterIssuerStatusAcmePatch;
            /**
             * List of status conditions to indicate the status of a CertificateRequest.
             * Known condition types are `Ready`.
             */
            conditions: outputs.cert_manager.v1.ClusterIssuerStatusConditionsPatch[];
        }

        /**
         * An Issuer represents a certificate issuing authority which can be
         * referenced as part of `issuerRef` fields.
         * It is scoped to a single namespace and can therefore only be referenced by
         * resources within the same namespace.
         */
        export interface Issuer {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "cert-manager.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Issuer";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.cert_manager.v1.IssuerSpec;
            status: outputs.cert_manager.v1.IssuerStatus;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpec {
            acme: outputs.cert_manager.v1.IssuerSpecAcme;
            ca: outputs.cert_manager.v1.IssuerSpecCa;
            selfSigned: outputs.cert_manager.v1.IssuerSpecSelfSigned;
            vault: outputs.cert_manager.v1.IssuerSpecVault;
            venafi: outputs.cert_manager.v1.IssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server
         * to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcme {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate
             * chain presented by the ACME server.
             * Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             */
            caBundle: string;
            /**
             * Enables or disables generating a new ACME account key.
             * If true, the Issuer resource will *not* request a new account but will expect
             * the account key to be supplied via an existing secret.
             * If false, the cert-manager system will generate a new ACME account key
             * for the Issuer.
             * Defaults to false.
             */
            disableAccountKeyGeneration: boolean;
            /**
             * Email is the email address to be associated with the ACME account.
             * This field is optional, but it is strongly recommended to be set.
             * It will be used to contact you in case of issues with your account or
             * certificates, including expiry notification emails.
             * This field may be updated after the account is initially registered.
             */
            email: string;
            /**
             * Enables requesting a Not After date on certificates that matches the
             * duration of the certificate. This is not supported by all ACME servers
             * like Let's Encrypt. If set to true when the ACME server does not support
             * it, it will create an error on the Order.
             * Defaults to false.
             */
            enableDurationFeature: boolean;
            externalAccountBinding: outputs.cert_manager.v1.IssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple.
             * PreferredChain is no guarantee that this one gets delivered by the ACME
             * endpoint.
             * For example, for Let's Encrypt's DST crosssign you would use:
             * "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
             * This value picks the first certificate bundle in the combined set of
             * ACME default and alternative chains that has a root-most certificate with
             * this value as its issuer's commonname.
             */
            preferredChain: string;
            privateKeySecretRef: outputs.cert_manager.v1.IssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint.
             * For example, for Let's Encrypt's staging endpoint, you would use:
             * "https://acme-staging-v02.api.letsencrypt.org/directory".
             * Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate.
             * If true, requests to the ACME server will not have the TLS certificate chain
             * validated.
             * Mutually exclusive with CABundle; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * Only enable this option in development environments.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             * Defaults to false.
             */
            skipTLSVerify: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve
             * ACME challenges for the matching domains.
             * Solver configurations must be provided in order to obtain certificates
             * from an ACME server.
             * For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers: outputs.cert_manager.v1.IssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME
         * server.
         * If set, upon registration cert-manager will attempt to associate the given
         * external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility
             * reasons and should not be used. The algorithm is now hardcoded to HS256
             * in golang/x/crypto/acme.
             */
            keyAlgorithm: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            keySecretRef: outputs.cert_manager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
         * Secret which holds the symmetric MAC key of the External Account Binding.
         * The `key` is the index string that is paired with the key data in the
         * Secret and should not be confused with the key data itself, or indeed with
         * the External Account Binding keyID above.
         * The secret key stored in the Secret **must** be un-padded, base64 URL
         * encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
         * Secret which holds the symmetric MAC key of the External Account Binding.
         * The `key` is the index string that is paired with the key data in the
         * Secret and should not be confused with the key data itself, or indeed with
         * the External Account Binding keyID above.
         * The secret key stored in the Secret **must** be un-padded, base64 URL
         * encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME
         * server.
         * If set, upon registration cert-manager will attempt to associate the given
         * external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBindingPatch {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility
             * reasons and should not be used. The algorithm is now hardcoded to HS256
             * in golang/x/crypto/acme.
             */
            keyAlgorithm: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            keySecretRef: outputs.cert_manager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRefPatch;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server
         * to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcmePatch {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate
             * chain presented by the ACME server.
             * Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             */
            caBundle: string;
            /**
             * Enables or disables generating a new ACME account key.
             * If true, the Issuer resource will *not* request a new account but will expect
             * the account key to be supplied via an existing secret.
             * If false, the cert-manager system will generate a new ACME account key
             * for the Issuer.
             * Defaults to false.
             */
            disableAccountKeyGeneration: boolean;
            /**
             * Email is the email address to be associated with the ACME account.
             * This field is optional, but it is strongly recommended to be set.
             * It will be used to contact you in case of issues with your account or
             * certificates, including expiry notification emails.
             * This field may be updated after the account is initially registered.
             */
            email: string;
            /**
             * Enables requesting a Not After date on certificates that matches the
             * duration of the certificate. This is not supported by all ACME servers
             * like Let's Encrypt. If set to true when the ACME server does not support
             * it, it will create an error on the Order.
             * Defaults to false.
             */
            enableDurationFeature: boolean;
            externalAccountBinding: outputs.cert_manager.v1.IssuerSpecAcmeExternalAccountBindingPatch;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple.
             * PreferredChain is no guarantee that this one gets delivered by the ACME
             * endpoint.
             * For example, for Let's Encrypt's DST crosssign you would use:
             * "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
             * This value picks the first certificate bundle in the combined set of
             * ACME default and alternative chains that has a root-most certificate with
             * this value as its issuer's commonname.
             */
            preferredChain: string;
            privateKeySecretRef: outputs.cert_manager.v1.IssuerSpecAcmePrivateKeySecretRefPatch;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint.
             * For example, for Let's Encrypt's staging endpoint, you would use:
             * "https://acme-staging-v02.api.letsencrypt.org/directory".
             * Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate.
             * If true, requests to the ACME server will not have the TLS certificate chain
             * validated.
             * Mutually exclusive with CABundle; prefer using CABundle to prevent various
             * kinds of security vulnerabilities.
             * Only enable this option in development environments.
             * If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
             * the container is used to validate the TLS connection.
             * Defaults to false.
             */
            skipTLSVerify: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve
             * ACME challenges for the matching domains.
             * Solver configurations must be provided in order to obtain certificates
             * from an ACME server.
             * For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers: outputs.cert_manager.v1.IssuerSpecAcmeSolversPatch[];
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to
         * store the automatically generated ACME account private key.
         * Optionally, a `key` may be specified to select a specific entry within
         * the named Secret resource.
         * If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to
         * store the automatically generated ACME account private key.
         * Optionally, a `key` may be specified to select a specific entry within
         * the named Secret resource.
         * If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
         * A selector may be provided to use different solving strategies for different DNS names.
         * Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolvers {
            dns01: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01;
            http01: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01;
            selector: outputs.cert_manager.v1.IssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01 {
            acmeDNS: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AcmeDNS;
            akamai: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Akamai;
            azureDNS: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AzureDNS;
            cloudDNS: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudDNS;
            cloudflare: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME
             * records when found in DNS zones.
             */
            cnameStrategy: string;
            digitalocean: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Digitalocean;
            rfc2136: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Rfc2136;
            route53: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53;
            webhook: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
         * DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNS {
            accountSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
         * DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSPatch {
            accountSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefPatch;
            host: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Akamai {
            accessTokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            clientSecretSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            clientTokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiPatch {
            accessTokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefPatch;
            clientSecretSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefPatch;
            clientTokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefPatch;
            serviceConsumerDomain: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNS {
            /**
             * Auth: Azure Service Principal:
             * The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientSecret and TenantID must also be set.
             */
            clientID: string;
            clientSecretSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName: string;
            managedIdentity: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AzureDNSManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal:
             * The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientID and ClientSecret must also be set.
             */
            tenantID: string;
        }

        /**
         * Auth: Azure Service Principal:
         * A reference to a Secret containing the password associated with the Service Principal.
         * If set, ClientID and TenantID must also be set.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Service Principal:
         * A reference to a Secret containing the password associated with the Service Principal.
         * If set, ClientID and TenantID must also be set.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity:
         * Settings to enable Azure Workload Identity or Azure Managed Service Identity
         * If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             * Cannot be used for Azure Managed Service Identity
             */
            resourceID: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity:
         * Settings to enable Azure Workload Identity or Azure Managed Service Identity
         * If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatch {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             * Cannot be used for Azure Managed Service Identity
             */
            resourceID: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSPatch {
            /**
             * Auth: Azure Service Principal:
             * The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientSecret and TenantID must also be set.
             */
            clientID: string;
            clientSecretSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefPatch;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName: string;
            managedIdentity: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityPatch;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal:
             * The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
             * If set, ClientID and ClientSecret must also be set.
             */
            tenantID: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNS {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which
             * Cloud DNS zone the challenge record has to be created.
             * If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName: string;
            project: string;
            serviceAccountSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSPatch {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which
             * Cloud DNS zone the challenge record has to be created.
             * If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName: string;
            project: string;
            serviceAccountSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatch;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Cloudflare {
            apiKeySecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            apiTokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email: string;
        }

        /**
         * API key to use to authenticate with Cloudflare.
         * Note: using an API token to authenticate is now the recommended method
         * as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API key to use to authenticate with Cloudflare.
         * Note: using an API token to authenticate is now the recommended method
         * as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflarePatch {
            apiKeySecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefPatch;
            apiTokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefPatch;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Digitalocean {
            tokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanPatch {
            tokenSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatch;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource.
         * In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01Patch {
            acmeDNS: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AcmeDNSPatch;
            akamai: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AkamaiPatch;
            azureDNS: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01AzureDNSPatch;
            cloudDNS: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudDNSPatch;
            cloudflare: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01CloudflarePatch;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME
             * records when found in DNS zones.
             */
            cnameStrategy: string;
            digitalocean: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01DigitaloceanPatch;
            rfc2136: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Rfc2136Patch;
            route53: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53Patch;
            webhook: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01WebhookPatch;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
         * to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting
             * RFC2136 in the form host:port. If the host is an IPv6 address it must be
             * enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
             * This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
             * when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
             * Supported values are (case-insensitive): ``HMACMD5`` (default),
             * ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm: string;
            /**
             * The TSIG Key name configured in the DNS.
             * If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName: string;
            tsigSecretSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
         * to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136Patch {
            /**
             * The IP address or hostname of an authoritative DNS server supporting
             * RFC2136 in the form host:port. If the host is an IPv6 address it must be
             * enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
             * This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
             * when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
             * Supported values are (case-insensitive): ``HMACMD5`` (default),
             * ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm: string;
            /**
             * The TSIG Key name configured in the DNS.
             * If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName: string;
            tsigSecretSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatch;
        }

        /**
         * The name of the secret containing the TSIG value.
         * If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The name of the secret containing the TSIG value.
         * If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication.
             * Cannot be set when SecretAccessKeyID is set.
             * If neither the Access Key nor Key ID are set, we fall-back to using env
             * vars, shared credentials file or AWS Instance metadata,
             * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID: string;
            accessKeyIDSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef;
            auth: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53Auth;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID: string;
            /**
             * Override the AWS region.
             *
             * Route53 is a global service and does not have regional endpoints but the
             * region specified here (or via environment variables) is used as a hint to
             * help compute the correct AWS credential scope and partition when it
             * connects to Route53. See:
             * - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
             * - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)
             *
             * If you omit this region field, cert-manager will use the region from
             * AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
             * in the cert-manager controller Pod.
             *
             * The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
             * In this case this `region` field value is ignored.
             *
             * The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
             * In this case this `region` field value is ignored.
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
             * or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role: string;
            secretAccessKeySecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS
         * access key ID from a key within a Kubernetes Secret.
         * Cannot be set when AccessKeyID is set.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS
         * access key ID from a key within a Kubernetes Secret.
         * Cannot be set when AccessKeyID is set.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates.
         */
        export interface IssuerSpecAcmeSolversDns01Route53Auth {
            kubernetes: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AuthKubernetes;
        }

        /**
         * Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
         * by passing a bound ServiceAccount token.
         */
        export interface IssuerSpecAcmeSolversDns01Route53AuthKubernetes {
            serviceAccountRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRef;
        }

        /**
         * Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
         * by passing a bound ServiceAccount token.
         */
        export interface IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatch {
            serviceAccountRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatch;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). To use this field, you must
         * configure an RBAC rule to let cert-manager request a token.
         */
        export interface IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRef {
            /**
             * TokenAudiences is an optional list of audiences to include in the
             * token passed to AWS. The default token consisting of the issuer's namespace
             * and name is always included.
             * If unset the audience defaults to `sts.amazonaws.com`.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). To use this field, you must
         * configure an RBAC rule to let cert-manager request a token.
         */
        export interface IssuerSpecAcmeSolversDns01Route53AuthKubernetesServiceAccountRefPatch {
            /**
             * TokenAudiences is an optional list of audiences to include in the
             * token passed to AWS. The default token consisting of the issuer's namespace
             * and name is always included.
             * If unset the audience defaults to `sts.amazonaws.com`.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates.
         */
        export interface IssuerSpecAcmeSolversDns01Route53AuthPatch {
            kubernetes: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AuthKubernetesPatch;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53Patch {
            /**
             * The AccessKeyID is used for authentication.
             * Cannot be set when SecretAccessKeyID is set.
             * If neither the Access Key nor Key ID are set, we fall-back to using env
             * vars, shared credentials file or AWS Instance metadata,
             * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID: string;
            accessKeyIDSecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefPatch;
            auth: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53AuthPatch;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID: string;
            /**
             * Override the AWS region.
             *
             * Route53 is a global service and does not have regional endpoints but the
             * region specified here (or via environment variables) is used as a hint to
             * help compute the correct AWS credential scope and partition when it
             * connects to Route53. See:
             * - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
             * - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)
             *
             * If you omit this region field, cert-manager will use the region from
             * AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
             * in the cert-manager controller Pod.
             *
             * The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
             * In this case this `region` field value is ignored.
             *
             * The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
             * Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
             * [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
             * In this case this `region` field value is ignored.
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
             * or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role: string;
            secretAccessKeySecretRef: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatch;
        }

        /**
         * The SecretAccessKey is used for authentication.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication.
         * If neither the Access Key nor Key ID are set, we fall-back to using env
         * vars, shared credentials file or AWS Instance metadata,
         * see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage
         * DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver
             * when challenges are processed.
             * This can contain arbitrary JSON data.
             * Secret values should not be specified in this stanza.
             * If secret values are needed (e.g. credentials for a DNS service), you
             * should use a SecretKeySelector to reference a Secret resource.
             * For details on the schema of this field, consult the webhook provider
             * implementation's documentation.
             */
            config: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload
             * resources to the webhook apiserver.
             * This should be the same as the GroupName specified in the webhook
             * provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider
             * implementation.
             * This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage
         * DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01WebhookPatch {
            /**
             * Additional configuration that should be passed to the webhook apiserver
             * when challenges are processed.
             * This can contain arbitrary JSON data.
             * Secret values should not be specified in this stanza.
             * If secret values are needed (e.g. credentials for a DNS service), you
             * should use a SecretKeySelector to reference a Secret resource.
             * For details on the schema of this field, consult the webhook provider
             * implementation's documentation.
             */
            config: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload
             * resources to the webhook apiserver.
             * This should be the same as the GroupName specified in the webhook
             * provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider
             * implementation.
             * This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the HTTP01 challenge flow.
         * It is not possible to obtain certificates for wildcard domain names
         * (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01 {
            gatewayHTTPRoute: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoute;
            ingress: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking
         * in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
         * create HTTPRoutes with the specified labels in the same namespace as the challenge.
         * This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager
             * while solving HTTP-01 challenges.
             */
            labels: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
             * cert-manager needs to know which parentRefs should be used when creating
             * the HTTPRoute. Usually, the parentRef references a Gateway. See:
             * https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs[];
            podTemplate: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             * <gateway:experimental:description>
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             * </gateway:experimental:description>
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             * <gateway:experimental:description>
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             * </gateway:experimental:description>
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking
         * in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
         * create HTTPRoutes with the specified labels in the same namespace as the challenge.
         * This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatch {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager
             * while solving HTTP-01 challenges.
             */
            labels: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
             * cert-manager needs to know which parentRefs should be used when creating
             * the HTTPRoute. Usually, the parentRef references a Gateway. See:
             * https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsPatch[];
            podTemplate: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatch;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplate {
            metadata: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadata;
            spec: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplatePatch {
            metadata: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateMetadataPatch;
            spec: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatch;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpec {
            affinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinity {
            nodeAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecPatch {
            affinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecAffinityPatch;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecImagePullSecretsPatch[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch[];
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by
         * creating or modifying Ingress resources in order to route requests for
         * '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
         * provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when
             * creating Ingress resources to solve ACME challenges that use this
             * challenge solver. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            class: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress
             * resources used to solve ACME challenges that use this challenge solver.
             * This is the recommended way of configuring the ingress class. Only one of
             * `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName: string;
            ingressTemplate: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving
             * routes inserted into it in order to solve HTTP01 challenges.
             * This is typically used in conjunction with ingress controllers like
             * ingress-gce, which maintains a 1:1 mapping between external IPs and
             * ingress resources. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            name: string;
            podTemplate: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver
         * ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            metadata: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver
         * ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatch {
            metadata: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataPatch;
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by
         * creating or modifying Ingress resources in order to route requests for
         * '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
         * provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPatch {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when
             * creating Ingress resources to solve ACME challenges that use this
             * challenge solver. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            class: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress
             * resources used to solve ACME challenges that use this challenge solver.
             * This is the recommended way of configuring the ingress class. Only one of
             * `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName: string;
            ingressTemplate: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplatePatch;
            /**
             * The name of the ingress resource that should have ACME challenge solving
             * routes inserted into it in order to solve HTTP01 challenges.
             * This is typically used in conjunction with ingress controllers like
             * ingress-gce, which maintains a 1:1 mapping between external IPs and
             * ingress resources. Only one of `class`, `name` or `ingressClassName` may
             * be specified.
             */
            name: string;
            podTemplate: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplatePatch;
            /**
             * Optional service type for Kubernetes solver service. Supported values
             * are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType: string;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplate {
            metadata: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            spec: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges.
         * Only the 'labels' and 'annotations' fields may be set.
         * If labels or annotations overlap with in-built values, the values here
         * will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatch {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver pods.
             */
            annotations: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods
         * used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplatePatch {
            metadata: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataPatch;
            spec: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatch;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            affinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContext;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            nodeAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatch {
            nodeAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod.
         * Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
         * All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecPatch {
            affinity: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPatch;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecretsPatch[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName: string;
            securityContext: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatch;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatch[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContext {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctls[];
        }

        /**
         * If specified, the pod's security context
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextPatch {
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch[];
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by
         * performing the HTTP01 challenge flow.
         * It is not possible to obtain certificates for wildcard domain names
         * (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01Patch {
            gatewayHTTPRoute: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRoutePatch;
            ingress: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01IngressPatch;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
         * A selector may be provided to use different solving strategies for different DNS names.
         * Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolversPatch {
            dns01: outputs.cert_manager.v1.IssuerSpecAcmeSolversDns01Patch;
            http01: outputs.cert_manager.v1.IssuerSpecAcmeSolversHttp01Patch;
            selector: outputs.cert_manager.v1.IssuerSpecAcmeSolversSelectorPatch;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that
         * should be solved using this challenge solver.
         * If not specified, the solver will be treated as the 'default' solver
         * with the lowest priority, i.e. if any other solver has a more specific
         * match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve.
             * If specified and a match is found, a dnsNames selector will take
             * precedence over a dnsZones selector.
             * If multiple solvers match with the same dnsNames value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsNames: string[];
            /**
             * List of DNSZones that this solver will be used to solve.
             * The most specific DNS zone match specified here will take precedence
             * over other DNS zone matches, so a solver specifying sys.example.com
             * will be selected over one specifying example.com for the domain
             * www.sys.example.com.
             * If multiple solvers match with the same dnsZones value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsZones: string[];
            /**
             * A label selector that is used to refine the set of certificate's that
             * this challenge solver will apply to.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that
         * should be solved using this challenge solver.
         * If not specified, the solver will be treated as the 'default' solver
         * with the lowest priority, i.e. if any other solver has a more specific
         * match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelectorPatch {
            /**
             * List of DNSNames that this solver will be used to solve.
             * If specified and a match is found, a dnsNames selector will take
             * precedence over a dnsZones selector.
             * If multiple solvers match with the same dnsNames value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsNames: string[];
            /**
             * List of DNSZones that this solver will be used to solve.
             * The most specific DNS zone match specified here will take precedence
             * over other DNS zone matches, so a solver specifying sys.example.com
             * will be selected over one specifying example.com for the domain
             * www.sys.example.com.
             * If multiple solvers match with the same dnsZones value, the solver
             * with the most matching labels in matchLabels will be selected.
             * If neither has more matches, the solver defined earlier in the list
             * will be selected.
             */
            dnsZones: string[];
            /**
             * A label selector that is used to refine the set of certificate's that
             * this challenge solver will apply to.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair
         * stored in a Secret resource.
         * This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints: string[];
            /**
             * IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
             * it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
             * As an example, such a URL might be "http://ca.domain.com/ca.crt".
             */
            issuingCertificateURLs: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of
             * URLs of OCSP responders. The OCSP responders can be queried for the
             * revocation status of an issued certificate. If not set, the
             * certificate will be issued with no OCSP servers set. For example, an
             * OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued
             * by this Issuer.
             */
            secretName: string;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair
         * stored in a Secret resource.
         * This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCaPatch {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints: string[];
            /**
             * IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
             * it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
             * As an example, such a URL might be "http://ca.domain.com/ca.crt".
             */
            issuingCertificateURLs: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of
             * URLs of OCSP responders. The OCSP responders can be queried for the
             * revocation status of an issued certificate. If not set, the
             * certificate will be issued with no OCSP servers set. For example, an
             * OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued
             * by this Issuer.
             */
            secretName: string;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpecPatch {
            acme: outputs.cert_manager.v1.IssuerSpecAcmePatch;
            ca: outputs.cert_manager.v1.IssuerSpecCaPatch;
            selfSigned: outputs.cert_manager.v1.IssuerSpecSelfSignedPatch;
            vault: outputs.cert_manager.v1.IssuerSpecVaultPatch;
            venafi: outputs.cert_manager.v1.IssuerSpecVenafiPatch;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the
         * private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints: string[];
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the
         * private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSignedPatch {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies
             * the location of the CRL from which the revocation of this certificate can be checked.
             * If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault
         * PKI backend.
         */
        export interface IssuerSpecVault {
            auth: outputs.cert_manager.v1.IssuerSpecVaultAuth;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by Vault. Only used if using HTTPS to connect to Vault and
             * ignored for HTTP connections.
             * Mutually exclusive with CABundleSecretRef.
             * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
             * the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.IssuerSpecVaultCaBundleSecretRef;
            clientCertSecretRef: outputs.cert_manager.v1.IssuerSpecVaultClientCertSecretRef;
            clientKeySecretRef: outputs.cert_manager.v1.IssuerSpecVaultClientKeySecretRef;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
             * More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
             * "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuth {
            appRole: outputs.cert_manager.v1.IssuerSpecVaultAuthAppRole;
            clientCertificate: outputs.cert_manager.v1.IssuerSpecVaultAuthClientCertificate;
            kubernetes: outputs.cert_manager.v1.IssuerSpecVaultAuthKubernetes;
            tokenSecretRef: outputs.cert_manager.v1.IssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism,
         * with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g:
             * "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting
             * up the authentication backend in Vault.
             */
            roleId: string;
            secretRef: outputs.cert_manager.v1.IssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism,
         * with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRolePatch {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g:
             * "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting
             * up the authentication backend in Vault.
             */
            roleId: string;
            secretRef: outputs.cert_manager.v1.IssuerSpecVaultAuthAppRoleSecretRefPatch;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used
         * to authenticate with Vault.
         * The `key` field must be specified and denotes which entry within the Secret
         * resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used
         * to authenticate with Vault.
         * The `key` field must be specified and denotes which entry within the Secret
         * resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * ClientCertificate authenticates with Vault by presenting a client
         * certificate during the request's TLS handshake.
         * Works only when using HTTPS protocol.
         */
        export interface IssuerSpecVaultAuthClientCertificate {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/cert" will be used.
             */
            mountPath: string;
            /**
             * Name of the certificate role to authenticate against.
             * If not set, matching any certificate role, if available.
             */
            name: string;
            /**
             * Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
             * tls.crt and tls.key) used to authenticate to Vault using TLS client
             * authentication.
             */
            secretName: string;
        }

        /**
         * ClientCertificate authenticates with Vault by presenting a client
         * certificate during the request's TLS handshake.
         * Works only when using HTTPS protocol.
         */
        export interface IssuerSpecVaultAuthClientCertificatePatch {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/cert" will be used.
             */
            mountPath: string;
            /**
             * Name of the certificate role to authenticate against.
             * If not set, matching any certificate role, if available.
             */
            name: string;
            /**
             * Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
             * tls.crt and tls.key) used to authenticate to Vault using TLS client
             * authentication.
             */
            secretName: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount
         * token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/kubernetes" will be used.
             */
            mountPath: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a
             * Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            secretRef: outputs.cert_manager.v1.IssuerSpecVaultAuthKubernetesSecretRef;
            serviceAccountRef: outputs.cert_manager.v1.IssuerSpecVaultAuthKubernetesServiceAccountRef;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount
         * token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetesPatch {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with
             * Vault. For example, setting a value to `/v1/auth/foo`, will use the path
             * `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
             * default value "/v1/auth/kubernetes" will be used.
             */
            mountPath: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a
             * Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            secretRef: outputs.cert_manager.v1.IssuerSpecVaultAuthKubernetesSecretRefPatch;
            serviceAccountRef: outputs.cert_manager.v1.IssuerSpecVaultAuthKubernetesServiceAccountRefPatch;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used
         * for authenticating with Vault. Use of 'ambient credentials' is not
         * supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used
         * for authenticating with Vault. Use of 'ambient credentials' is not
         * supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). Compared to using "secretRef",
         * using this field means that you don't rely on statically bound tokens. To
         * use this field, you must configure an RBAC rule to let cert-manager
         * request a token.
         */
        export interface IssuerSpecVaultAuthKubernetesServiceAccountRef {
            /**
             * TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
             * consisting of the issuer's namespace and name is always included.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound
         * token (also known as "projected token"). Compared to using "secretRef",
         * using this field means that you don't rely on statically bound tokens. To
         * use this field, you must configure an RBAC rule to let cert-manager
         * request a token.
         */
        export interface IssuerSpecVaultAuthKubernetesServiceAccountRefPatch {
            /**
             * TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
             * consisting of the issuer's namespace and name is always included.
             */
            audiences: string[];
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuthPatch {
            appRole: outputs.cert_manager.v1.IssuerSpecVaultAuthAppRolePatch;
            clientCertificate: outputs.cert_manager.v1.IssuerSpecVaultAuthClientCertificatePatch;
            kubernetes: outputs.cert_manager.v1.IssuerSpecVaultAuthKubernetesPatch;
            tokenSecretRef: outputs.cert_manager.v1.IssuerSpecVaultAuthTokenSecretRefPatch;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when
         * verifying the certificate chain presented by Vault when using HTTPS.
         * Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         * If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface IssuerSpecVaultCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when
         * verifying the certificate chain presented by Vault when using HTTPS.
         * Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         * If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface IssuerSpecVaultCaBundleSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Certificate to use when the
         * Vault server requires mTLS.
         */
        export interface IssuerSpecVaultClientCertSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Certificate to use when the
         * Vault server requires mTLS.
         */
        export interface IssuerSpecVaultClientCertSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Private Key to use when the
         * Vault server requires mTLS.
         */
        export interface IssuerSpecVaultClientKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a PEM-encoded Client Private Key to use when the
         * Vault server requires mTLS.
         */
        export interface IssuerSpecVaultClientKeySecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault
         * PKI backend.
         */
        export interface IssuerSpecVaultPatch {
            auth: outputs.cert_manager.v1.IssuerSpecVaultAuthPatch;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by Vault. Only used if using HTTPS to connect to Vault and
             * ignored for HTTP connections.
             * Mutually exclusive with CABundleSecretRef.
             * If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
             * the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.IssuerSpecVaultCaBundleSecretRefPatch;
            clientCertSecretRef: outputs.cert_manager.v1.IssuerSpecVaultClientCertSecretRefPatch;
            clientKeySecretRef: outputs.cert_manager.v1.IssuerSpecVaultClientKeySecretRefPatch;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
             * More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
             * "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP
         * or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafi {
            cloud: outputs.cert_manager.v1.IssuerSpecVenafiCloud;
            tpp: outputs.cert_manager.v1.IssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer.
             * All requests made to the Venafi platform will be restricted by the named
             * zone policy.
             * This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloud {
            apiTokenSecretRef: outputs.cert_manager.v1.IssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud.
             * Defaults to "https://api.venafi.cloud/v1".
             */
            url: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloudPatch {
            apiTokenSecretRef: outputs.cert_manager.v1.IssuerSpecVenafiCloudApiTokenSecretRefPatch;
            /**
             * URL is the base URL for Venafi Cloud.
             * Defaults to "https://api.venafi.cloud/v1".
             */
            url: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP
         * or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafiPatch {
            cloud: outputs.cert_manager.v1.IssuerSpecVenafiCloudPatch;
            tpp: outputs.cert_manager.v1.IssuerSpecVenafiTppPatch;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer.
             * All requests made to the Venafi platform will be restricted by the named
             * zone policy.
             * This field is required.
             */
            zone: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTpp {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
             * If undefined, the certificate bundle in the cert-manager controller container
             * is used to validate the chain.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.IssuerSpecVenafiTppCaBundleSecretRef;
            credentialsRef: outputs.cert_manager.v1.IssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
             * for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * Reference to a Secret containing a base64-encoded bundle of PEM CAs
         * which will be used to validate the certificate chain presented by the TPP server.
         * Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         */
        export interface IssuerSpecVenafiTppCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a base64-encoded bundle of PEM CAs
         * which will be used to validate the certificate chain presented by the TPP server.
         * Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
         * If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
         * the cert-manager controller container is used to validate the TLS connection.
         */
        export interface IssuerSpecVenafiTppCaBundleSecretRefPatch {
            /**
             * The key of the entry in the Secret resource's `data` field to be used.
             * Some instances of this field may be defaulted, in others it may be
             * required.
             */
            key: string;
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
         * The secret must contain the key 'access-token' for the Access Token Authentication,
         * or two keys, 'username' and 'password' for the API Keys Authentication.
         */
        export interface IssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
         * The secret must contain the key 'access-token' for the Access Token Authentication,
         * or two keys, 'username' and 'password' for the API Keys Authentication.
         */
        export interface IssuerSpecVenafiTppCredentialsRefPatch {
            /**
             * Name of the resource being referred to.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings.
         * Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTppPatch {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate
             * chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
             * If undefined, the certificate bundle in the cert-manager controller container
             * is used to validate the chain.
             */
            caBundle: string;
            caBundleSecretRef: outputs.cert_manager.v1.IssuerSpecVenafiTppCaBundleSecretRefPatch;
            credentialsRef: outputs.cert_manager.v1.IssuerSpecVenafiTppCredentialsRefPatch;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
             * for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatus {
            acme: outputs.cert_manager.v1.IssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest.
             * Known condition types are `Ready`.
             */
            conditions: outputs.cert_manager.v1.IssuerStatusConditions[];
        }

        /**
         * ACME specific status options.
         * This field should only be set if the Issuer is configured to use an ACME
         * server to issue certificates.
         */
        export interface IssuerStatusAcme {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest
             * registered ACME account, in order to track changes made to registered account
             * associated with the Issuer
             */
            lastPrivateKeyHash: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered
             * ACME account, in order to track changes made to registered account
             * associated with the  Issuer
             */
            lastRegisteredEmail: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve
             * account details from the CA
             */
            uri: string;
        }

        /**
         * ACME specific status options.
         * This field should only be set if the Issuer is configured to use an ACME
         * server to issue certificates.
         */
        export interface IssuerStatusAcmePatch {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest
             * registered ACME account, in order to track changes made to registered account
             * associated with the Issuer
             */
            lastPrivateKeyHash: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered
             * ACME account, in order to track changes made to registered account
             * associated with the  Issuer
             */
            lastRegisteredEmail: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve
             * account details from the CA
             */
            uri: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Issuer.
             */
            observedGeneration: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditionsPatch {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status
             * change of this condition.
             */
            lastTransitionTime: string;
            /**
             * Message is a human readable description of the details of the last
             * transition, complementing reason.
             */
            message: string;
            /**
             * If set, this represents the .metadata.generation that the condition was
             * set based upon.
             * For instance, if .metadata.generation is currently 12, but the
             * .status.condition[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the Issuer.
             */
            observedGeneration: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last
             * transition.
             */
            reason: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatusPatch {
            acme: outputs.cert_manager.v1.IssuerStatusAcmePatch;
            /**
             * List of status conditions to indicate the status of a CertificateRequest.
             * Known condition types are `Ready`.
             */
            conditions: outputs.cert_manager.v1.IssuerStatusConditionsPatch[];
        }

    }
}

export namespace deviceplugin {
    export namespace v1 {
        /**
         * DlbDevicePlugin is the Schema for the dlbdeviceplugins API. It represents
         * the DLB device plugin responsible for advertising Intel DLB hardware resources to
         * the kubelet.
         */
        export interface DlbDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "DlbDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.DlbDevicePluginSpec;
            status: outputs.deviceplugin.v1.DlbDevicePluginStatus;
        }

        /**
         * DlbDevicePluginSpec defines the desired state of DlbDevicePlugin.
         */
        export interface DlbDevicePluginSpec {
            /**
             * Image is a container image with DLB device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with a script that initializes devices.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.DlbDevicePluginSpecTolerations[];
        }

        /**
         * DlbDevicePluginSpec defines the desired state of DlbDevicePlugin.
         */
        export interface DlbDevicePluginSpecPatch {
            /**
             * Image is a container image with DLB device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with a script that initializes devices.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.DlbDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface DlbDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface DlbDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * DlbDevicePluginStatus defines the observed state of DlbDevicePlugin.
         */
        export interface DlbDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.DlbDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface DlbDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface DlbDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * DlbDevicePluginStatus defines the observed state of DlbDevicePlugin.
         */
        export interface DlbDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.DlbDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * DsaDevicePlugin is the Schema for the dsadeviceplugins API. It represents
         * the DSA device plugin responsible for advertising Intel DSA hardware resources to
         * the kubelet.
         */
        export interface DsaDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "DsaDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.DsaDevicePluginSpec;
            status: outputs.deviceplugin.v1.DsaDevicePluginStatus;
        }

        /**
         * DsaDevicePluginSpec defines the desired state of DsaDevicePlugin.
         */
        export interface DsaDevicePluginSpec {
            /**
             * Image is a container image with DSA device plugin executable.
             */
            image: string;
            /**
             * InitImage is an initcontainer image to configure and enable DSA devices and workqueues with idxd-config (accel-config) utility
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * ProvisioningConfig is a ConfigMap used to pass the DSA devices and workqueues configuration into idxd-config initcontainer.
             */
            provisioningConfig: string;
            /**
             * SharedDevNum is a number of containers that can share the same DSA device.
             */
            sharedDevNum: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.DsaDevicePluginSpecTolerations[];
        }

        /**
         * DsaDevicePluginSpec defines the desired state of DsaDevicePlugin.
         */
        export interface DsaDevicePluginSpecPatch {
            /**
             * Image is a container image with DSA device plugin executable.
             */
            image: string;
            /**
             * InitImage is an initcontainer image to configure and enable DSA devices and workqueues with idxd-config (accel-config) utility
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * ProvisioningConfig is a ConfigMap used to pass the DSA devices and workqueues configuration into idxd-config initcontainer.
             */
            provisioningConfig: string;
            /**
             * SharedDevNum is a number of containers that can share the same DSA device.
             */
            sharedDevNum: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.DsaDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface DsaDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface DsaDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * DsaDevicePluginStatus defines the observed state of DsaDevicePlugin.
         */
        export interface DsaDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.DsaDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface DsaDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface DsaDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * DsaDevicePluginStatus defines the observed state of DsaDevicePlugin.
         */
        export interface DsaDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.DsaDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * FpgaDevicePlugin is the Schema for the fpgadeviceplugins API. It represents
         * the FPGA device plugin responsible for advertising Intel FPGA hardware resources to
         * the kubelet.
         */
        export interface FpgaDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "FpgaDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.FpgaDevicePluginSpec;
            status: outputs.deviceplugin.v1.FpgaDevicePluginStatus;
        }

        /**
         * FpgaDevicePluginSpec defines the desired state of FpgaDevicePlugin.
         */
        export interface FpgaDevicePluginSpec {
            /**
             * Image is a container image with FPGA device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with tools used to initialize the host before starting FPGA workloads on it.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * Mode is a mode of the plugin's operation.
             */
            mode: string;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.FpgaDevicePluginSpecTolerations[];
        }

        /**
         * FpgaDevicePluginSpec defines the desired state of FpgaDevicePlugin.
         */
        export interface FpgaDevicePluginSpecPatch {
            /**
             * Image is a container image with FPGA device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with tools used to initialize the host before starting FPGA workloads on it.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * Mode is a mode of the plugin's operation.
             */
            mode: string;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.FpgaDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface FpgaDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface FpgaDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * FpgaDevicePluginStatus defines the observed state of FpgaDevicePlugin.
         */
        export interface FpgaDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.FpgaDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface FpgaDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface FpgaDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * FpgaDevicePluginStatus defines the observed state of FpgaDevicePlugin.
         */
        export interface FpgaDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.FpgaDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * GpuDevicePlugin is the Schema for the gpudeviceplugins API. It represents
         * the GPU device plugin responsible for advertising Intel GPU hardware resources to
         * the kubelet.
         */
        export interface GpuDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "GpuDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.GpuDevicePluginSpec;
            status: outputs.deviceplugin.v1.GpuDevicePluginStatus;
        }

        /**
         * GpuDevicePluginSpec defines the desired state of GpuDevicePlugin.
         */
        export interface GpuDevicePluginSpec {
            /**
             * EnableMonitoring enables the monitoring resource ('i915_monitoring')
             * which gives access to all GPU devices on given node. Typically used with Intel XPU-Manager.
             */
            enableMonitoring: boolean;
            /**
             * Image is a container image with GPU device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with tools (e.g., GPU NFD source hook) installed on each node.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * PreferredAllocationPolicy sets the mode of allocating GPU devices on a node.
             * See documentation for detailed description of the policies. Only valid when SharedDevNum > 1 is set.
             * Not applicable with ResourceManager.
             */
            preferredAllocationPolicy: string;
            /**
             * ResourceManager handles the fractional resource management for multi-GPU nodes. Enable only for clusters with GPU Aware Scheduling.
             */
            resourceManager: boolean;
            /**
             * SharedDevNum is a number of containers that can share the same GPU device.
             */
            sharedDevNum: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.GpuDevicePluginSpecTolerations[];
        }

        /**
         * GpuDevicePluginSpec defines the desired state of GpuDevicePlugin.
         */
        export interface GpuDevicePluginSpecPatch {
            /**
             * EnableMonitoring enables the monitoring resource ('i915_monitoring')
             * which gives access to all GPU devices on given node. Typically used with Intel XPU-Manager.
             */
            enableMonitoring: boolean;
            /**
             * Image is a container image with GPU device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with tools (e.g., GPU NFD source hook) installed on each node.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * PreferredAllocationPolicy sets the mode of allocating GPU devices on a node.
             * See documentation for detailed description of the policies. Only valid when SharedDevNum > 1 is set.
             * Not applicable with ResourceManager.
             */
            preferredAllocationPolicy: string;
            /**
             * ResourceManager handles the fractional resource management for multi-GPU nodes. Enable only for clusters with GPU Aware Scheduling.
             */
            resourceManager: boolean;
            /**
             * SharedDevNum is a number of containers that can share the same GPU device.
             */
            sharedDevNum: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.GpuDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface GpuDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface GpuDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * GpuDevicePluginStatus defines the observed state of GpuDevicePlugin.
         */
        export interface GpuDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.GpuDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface GpuDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface GpuDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * GpuDevicePluginStatus defines the observed state of GpuDevicePlugin.
         */
        export interface GpuDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.GpuDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * IaaDevicePlugin is the Schema for the iaadeviceplugins API. It represents
         * the IAA device plugin responsible for advertising Intel IAA hardware resources to
         * the kubelet.
         */
        export interface IaaDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "IaaDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.IaaDevicePluginSpec;
            status: outputs.deviceplugin.v1.IaaDevicePluginStatus;
        }

        /**
         * IaaDevicePluginSpec defines the desired state of IaaDevicePlugin.
         */
        export interface IaaDevicePluginSpec {
            /**
             * Image is a container image with IAA device plugin executable.
             */
            image: string;
            /**
             * InitImage is an initcontainer image to configure and enable IAA devices and workqueues with accel-config utility
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * ProvisioningConfig is a ConfigMap used to pass the IAA configuration into idxd initcontainer.
             */
            provisioningConfig: string;
            /**
             * SharedDevNum is a number of containers that can share the same IAA device.
             */
            sharedDevNum: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.IaaDevicePluginSpecTolerations[];
        }

        /**
         * IaaDevicePluginSpec defines the desired state of IaaDevicePlugin.
         */
        export interface IaaDevicePluginSpecPatch {
            /**
             * Image is a container image with IAA device plugin executable.
             */
            image: string;
            /**
             * InitImage is an initcontainer image to configure and enable IAA devices and workqueues with accel-config utility
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * ProvisioningConfig is a ConfigMap used to pass the IAA configuration into idxd initcontainer.
             */
            provisioningConfig: string;
            /**
             * SharedDevNum is a number of containers that can share the same IAA device.
             */
            sharedDevNum: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.IaaDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IaaDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IaaDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * IaaDevicePluginStatus defines the observed state of IaaDevicePlugin.
         */
        export interface IaaDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.IaaDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface IaaDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface IaaDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * IaaDevicePluginStatus defines the observed state of IaaDevicePlugin.
         */
        export interface IaaDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.IaaDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * QatDevicePlugin is the Schema for the qatdeviceplugins API. It represents the QAT device
         * plugin responsible for advertising Intel QuickAssist Technology hardware resources
         * to the kubelet.
         */
        export interface QatDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "QatDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.QatDevicePluginSpec;
            status: outputs.deviceplugin.v1.QatDevicePluginStatus;
        }

        /**
         * QatDevicePluginSpec defines the desired state of QatDevicePlugin.
         */
        export interface QatDevicePluginSpec {
            /**
             * DpdkDriver is a DPDK device driver for configuring the QAT device.
             */
            dpdkDriver: string;
            /**
             * Image is a container image with QAT device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with a script that initialize devices.
             */
            initImage: string;
            /**
             * KernelVfDrivers is a list of VF device drivers for the QuickAssist devices in the system.
             */
            kernelVfDrivers: string[];
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * MaxNumDevices is a maximum number of QAT devices to be provided to the QuickAssist device plugin
             */
            maxNumDevices: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * PreferredAllocationPolicy sets the mode of allocating QAT devices on a node.
             * See documentation for detailed description of the policies.
             */
            preferredAllocationPolicy: string;
            /**
             * ProvisioningConfig is a ConfigMap used to pass the configuration of QAT devices into qat initcontainer.
             */
            provisioningConfig: string;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.QatDevicePluginSpecTolerations[];
        }

        /**
         * QatDevicePluginSpec defines the desired state of QatDevicePlugin.
         */
        export interface QatDevicePluginSpecPatch {
            /**
             * DpdkDriver is a DPDK device driver for configuring the QAT device.
             */
            dpdkDriver: string;
            /**
             * Image is a container image with QAT device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with a script that initialize devices.
             */
            initImage: string;
            /**
             * KernelVfDrivers is a list of VF device drivers for the QuickAssist devices in the system.
             */
            kernelVfDrivers: string[];
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * MaxNumDevices is a maximum number of QAT devices to be provided to the QuickAssist device plugin
             */
            maxNumDevices: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * PreferredAllocationPolicy sets the mode of allocating QAT devices on a node.
             * See documentation for detailed description of the policies.
             */
            preferredAllocationPolicy: string;
            /**
             * ProvisioningConfig is a ConfigMap used to pass the configuration of QAT devices into qat initcontainer.
             */
            provisioningConfig: string;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.QatDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface QatDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface QatDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * QatDevicePluginStatus defines the observed state of QatDevicePlugin.
         */
        export interface QatDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.QatDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface QatDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface QatDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * QatDevicePluginStatus defines the observed state of QatDevicePlugin.
         */
        export interface QatDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.QatDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * SgxDevicePlugin is the Schema for the sgxdeviceplugins API. It represents
         * the SGX device plugin responsible for advertising SGX device nodes to
         * the kubelet.
         */
        export interface SgxDevicePlugin {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "deviceplugin.intel.com/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "SgxDevicePlugin";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.deviceplugin.v1.SgxDevicePluginSpec;
            status: outputs.deviceplugin.v1.SgxDevicePluginStatus;
        }

        /**
         * SgxDevicePluginSpec defines the desired state of SgxDevicePlugin.
         */
        export interface SgxDevicePluginSpec {
            /**
             * EnclaveLimit is a number of containers that can share the same SGX enclave device.
             */
            enclaveLimit: number;
            /**
             * Image is a container image with SGX device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with tools (i.e., SGX NFD source hook) installed on each node.
             * Recommendation is to leave this unset and prefer the SGX NodeFeatureRule instead.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * ProvisionLimit is a number of containers that can share the same SGX provision device.
             */
            provisionLimit: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.SgxDevicePluginSpecTolerations[];
        }

        /**
         * SgxDevicePluginSpec defines the desired state of SgxDevicePlugin.
         */
        export interface SgxDevicePluginSpecPatch {
            /**
             * EnclaveLimit is a number of containers that can share the same SGX enclave device.
             */
            enclaveLimit: number;
            /**
             * Image is a container image with SGX device plugin executable.
             */
            image: string;
            /**
             * InitImage is a container image with tools (i.e., SGX NFD source hook) installed on each node.
             * Recommendation is to leave this unset and prefer the SGX NodeFeatureRule instead.
             */
            initImage: string;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel: number;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector: {[key: string]: string};
            /**
             * ProvisionLimit is a number of containers that can share the same SGX provision device.
             */
            provisionLimit: number;
            /**
             * Specialized nodes (e.g., with accelerators) can be Tainted to make sure unwanted pods are not scheduled on them. Tolerations can be set for the plugin pod to neutralize the Taint.
             */
            tolerations: outputs.deviceplugin.v1.SgxDevicePluginSpecTolerationsPatch[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface SgxDevicePluginSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface SgxDevicePluginSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * SgxDevicePluginStatus defines the observed state of SgxDevicePlugin.
         */
        export interface SgxDevicePluginStatus {
            controlledDaemonSet: outputs.deviceplugin.v1.SgxDevicePluginStatusControlledDaemonSet;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface SgxDevicePluginStatusControlledDaemonSet {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface SgxDevicePluginStatusControlledDaemonSetPatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string
             * should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
             * For example, if the object reference is to a container within a pod, this would take on a value like:
             * "spec.containers{name}" (where "name" refers to the name of the container that triggered
             * the event) or if no container name is specified "spec.containers[2]" (container with
             * index 2 in this pod). This syntax is chosen only to have some well-defined way of
             * referencing a part of an object.
             */
            fieldPath: string;
            /**
             * Kind of the referent.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            /**
             * Namespace of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace: string;
            /**
             * Specific resourceVersion to which this reference is made, if any.
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * UID of the referent.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid: string;
        }

        /**
         * SgxDevicePluginStatus defines the observed state of SgxDevicePlugin.
         */
        export interface SgxDevicePluginStatusPatch {
            controlledDaemonSet: outputs.deviceplugin.v1.SgxDevicePluginStatusControlledDaemonSetPatch;
            /**
             * The total number of nodes that should be running the device plugin
             * pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: number;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames: string[];
            /**
             * The number of nodes that should be running the device plugin pod and have one
             * or more of the device plugin pod running and ready.
             */
            numberReady: number;
        }

    }
}

export namespace fpga {
    export namespace v2 {
        /**
         * AcceleratorFunction is a specification for an Accelerator Function resource
         * provided by a FPGA-based programmable hardware accelerator.
         */
        export interface AcceleratorFunction {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "fpga.intel.com/v2";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "AcceleratorFunction";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.fpga.v2.AcceleratorFunctionSpec;
            /**
             * AcceleratorFunctionStatus is an empty object used to satisfy operator-sdk.
             */
            status: {[key: string]: string};
        }

        /**
         * AcceleratorFunctionSpec contains actual specs for AcceleratorFunction.
         */
        export interface AcceleratorFunctionSpec {
            afuId: string;
            interfaceId: string;
            mode: string;
        }

        /**
         * AcceleratorFunctionSpec contains actual specs for AcceleratorFunction.
         */
        export interface AcceleratorFunctionSpecPatch {
            afuId: string;
            interfaceId: string;
            mode: string;
        }

        /**
         * FpgaRegion is a specification for a FPGA region resource which can be programmed
         * with a bitstream.
         */
        export interface FpgaRegion {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "fpga.intel.com/v2";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "FpgaRegion";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.fpga.v2.FpgaRegionSpec;
            /**
             * FpgaRegionStatus is an empty object used to satisfy operator-sdk.
             */
            status: {[key: string]: string};
        }

        /**
         * FpgaRegionSpec contains actual specs for FpgaRegion.
         */
        export interface FpgaRegionSpec {
            interfaceId: string;
        }

        /**
         * FpgaRegionSpec contains actual specs for FpgaRegion.
         */
        export interface FpgaRegionSpecPatch {
            interfaceId: string;
        }

    }
}

export namespace gateway {
    export namespace v1 {
        /**
         * GRPCRoute provides a way to route gRPC requests. This includes the capability
         * to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
         * Filters can be used to specify additional processing steps. Backends specify
         * where matching requests will be routed.
         *
         * GRPCRoute falls under extended support within the Gateway API. Within the
         * following specification, the word "MUST" indicates that an implementation
         * supporting GRPCRoute must conform to the indicated requirement, but an
         * implementation not supporting this route type need not follow the requirement
         * unless explicitly indicated.
         *
         * Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
         * accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
         * ALPN. If the implementation does not support this, then it MUST set the
         * "Accepted" condition to "False" for the affected listener with a reason of
         * "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
         * with an upgrade from HTTP/1.
         *
         * Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
         * support HTTP/2 over cleartext TCP (h2c,
         * https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
         * upgrade from HTTP/1.1, i.e. with prior knowledge
         * (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
         * does not support this, then it MUST set the "Accepted" condition to "False"
         * for the affected listener with a reason of "UnsupportedProtocol".
         * Implementations MAY also accept HTTP/2 connections with an upgrade from
         * HTTP/1, i.e. without prior knowledge.
         */
        export interface GRPCRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "GRPCRoute";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1.GRPCRouteSpec;
            status: outputs.gateway.v1.GRPCRouteStatus;
        }

        /**
         * Spec defines the desired state of GRPCRoute.
         */
        export interface GRPCRouteSpec {
            /**
             * Hostnames defines a set of hostnames to match against the GRPC
             * Host header to select a GRPCRoute to process the request. This matches
             * the RFC 1123 definition of a hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label MUST appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and GRPCRoute, there
             * MUST be at least one intersecting hostname for the GRPCRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `test.example.com` and `*.example.com` would both match. On the other
             *   hand, `example.com` and `test.example.net` would not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and GRPCRoute have specified hostnames, any
             * GRPCRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * GRPCRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` MUST NOT be considered for a match.
             *
             * If both the Listener and GRPCRoute have specified hostnames, and none
             * match with the criteria above, then the GRPCRoute MUST NOT be accepted by
             * the implementation. The implementation MUST raise an 'Accepted' Condition
             * with a status of `False` in the corresponding RouteParentStatus.
             *
             * If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
             * Listener and that listener already has another Route (B) of the other
             * type attached and the intersection of the hostnames of A and B is
             * non-empty, then the implementation MUST accept exactly one of these two
             * routes, determined by the following criteria, in order:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * The rejected Route MUST raise an 'Accepted' condition with a status of
             * 'False' in the corresponding RouteParentStatus.
             *
             * Support: Core
             */
            hostnames: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             */
            parentRefs: outputs.gateway.v1.GRPCRouteSpecParentRefs[];
            /**
             * Rules are a list of GRPC matchers, filters and actions.
             */
            rules: outputs.gateway.v1.GRPCRouteSpecRules[];
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface GRPCRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface GRPCRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Spec defines the desired state of GRPCRoute.
         */
        export interface GRPCRouteSpecPatch {
            /**
             * Hostnames defines a set of hostnames to match against the GRPC
             * Host header to select a GRPCRoute to process the request. This matches
             * the RFC 1123 definition of a hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label MUST appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and GRPCRoute, there
             * MUST be at least one intersecting hostname for the GRPCRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `test.example.com` and `*.example.com` would both match. On the other
             *   hand, `example.com` and `test.example.net` would not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and GRPCRoute have specified hostnames, any
             * GRPCRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * GRPCRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` MUST NOT be considered for a match.
             *
             * If both the Listener and GRPCRoute have specified hostnames, and none
             * match with the criteria above, then the GRPCRoute MUST NOT be accepted by
             * the implementation. The implementation MUST raise an 'Accepted' Condition
             * with a status of `False` in the corresponding RouteParentStatus.
             *
             * If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
             * Listener and that listener already has another Route (B) of the other
             * type attached and the intersection of the hostnames of A and B is
             * non-empty, then the implementation MUST accept exactly one of these two
             * routes, determined by the following criteria, in order:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * The rejected Route MUST raise an 'Accepted' condition with a status of
             * 'False' in the corresponding RouteParentStatus.
             *
             * Support: Core
             */
            hostnames: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             */
            parentRefs: outputs.gateway.v1.GRPCRouteSpecParentRefsPatch[];
            /**
             * Rules are a list of GRPC matchers, filters and actions.
             */
            rules: outputs.gateway.v1.GRPCRouteSpecRulesPatch[];
        }

        /**
         * GRPCRouteRule defines the semantics for matching a gRPC request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface GRPCRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive an `UNAVAILABLE` status.
             *
             * See the GRPCBackendRef definition for the rules about what makes a single
             * GRPCBackendRef invalid.
             *
             * When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive an `UNAVAILABLE` status.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
             * Implementations may choose how that 50 percent is determined.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefs[];
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * The effects of ordering of multiple behaviors are currently unspecified.
             * This can change in the future based on feedback during the alpha stage.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations that support
             *   GRPCRoute.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * If an implementation can not support a combination of filters, it must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters: outputs.gateway.v1.GRPCRouteSpecRulesFilters[];
            /**
             * Matches define conditions used for matching the rule against incoming
             * gRPC requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - method:
             *     service: foo.bar
             *   headers:
             *     values:
             *       version: 2
             * - method:
             *     service: foo.bar.v2
             * ```
             *
             * For a request to match against this rule, it MUST satisfy
             * EITHER of the two conditions:
             *
             * - service of foo.bar AND contains the header `version: 2`
             * - service of foo.bar.v2
             *
             * See the documentation for GRPCRouteMatch on how to specify multiple
             * match conditions to be ANDed together.
             *
             * If no matches are specified, the implementation MUST match every gRPC request.
             *
             * Proxy or Load Balancer routing configuration generated from GRPCRoutes
             * MUST prioritize rules based on the following criteria, continuing on
             * ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
             * Precedence MUST be given to the rule with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             * * Characters in a matching service.
             * * Characters in a matching method.
             * * Header matches.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within the Route that has been given precedence,
             * matching precedence MUST be granted to the first matching rule meeting
             * the above criteria.
             */
            matches: outputs.gateway.v1.GRPCRouteSpecRulesMatches[];
        }

        /**
         * GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         * <gateway:experimental:description>
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         * </gateway:experimental:description>
         */
        export interface GRPCRouteSpecRulesBackendRefs {
            /**
             * Filters defined at this level MUST be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in GRPCRouteRule.)
             */
            filters: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFilters[];
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight: number;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesBackendRefsFilters {
            extensionRef: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersExtensionRef;
            requestHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier;
            requestMirror: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirror;
            responseHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersPatch {
            extensionRef: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch;
            requestHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch;
            requestMirror: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch;
            responseHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
            backendRef: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
            backendRef: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         * <gateway:experimental:description>
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         * </gateway:experimental:description>
         */
        export interface GRPCRouteSpecRulesBackendRefsPatch {
            /**
             * Filters defined at this level MUST be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in GRPCRouteRule.)
             */
            filters: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersPatch[];
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight: number;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesFilters {
            extensionRef: outputs.gateway.v1.GRPCRouteSpecRulesFiltersExtensionRef;
            requestHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifier;
            requestMirror: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirror;
            responseHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifier;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesFiltersPatch {
            extensionRef: outputs.gateway.v1.GRPCRouteSpecRulesFiltersExtensionRefPatch;
            requestHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch;
            requestMirror: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorPatch;
            responseHeaderModifier: outputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirror {
            backendRef: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorBackendRef;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorPatch {
            backendRef: outputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * GRPCRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a gRPC request only if its service
         * is `foo` AND it contains the `version: v1` header:
         *
         * ```
         * matches:
         *   - method:
         *     type: Exact
         *     service: "foo"
         *     headers:
         *   - name: "version"
         *     value "v1"
         *
         * ```
         */
        export interface GRPCRouteSpecRulesMatches {
            /**
             * Headers specifies gRPC request header matchers. Multiple match values are
             * ANDed together, meaning, a request MUST match all the specified headers
             * to select the route.
             */
            headers: outputs.gateway.v1.GRPCRouteSpecRulesMatchesHeaders[];
            method: outputs.gateway.v1.GRPCRouteSpecRulesMatchesMethod;
        }

        /**
         * GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
         * headers.
         */
        export interface GRPCRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the gRPC Header to be matched.
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             */
            type: string;
            /**
             * Value is the value of the gRPC Header to be matched.
             */
            value: string;
        }

        /**
         * GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
         * headers.
         */
        export interface GRPCRouteSpecRulesMatchesHeadersPatch {
            /**
             * Name is the name of the gRPC Header to be matched.
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             */
            type: string;
            /**
             * Value is the value of the gRPC Header to be matched.
             */
            value: string;
        }

        /**
         * Method specifies a gRPC request service/method matcher. If this field is
         * not specified, all services and methods will match.
         */
        export interface GRPCRouteSpecRulesMatchesMethod {
            /**
             * Value of the method to match against. If left empty or omitted, will
             * match all services.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            method: string;
            /**
             * Value of the service to match against. If left empty or omitted, will
             * match any service.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            service: string;
            /**
             * Type specifies how to match against the service and/or method.
             * Support: Core (Exact with service and method specified)
             *
             * Support: Implementation-specific (Exact with method specified but no service specified)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type: string;
        }

        /**
         * Method specifies a gRPC request service/method matcher. If this field is
         * not specified, all services and methods will match.
         */
        export interface GRPCRouteSpecRulesMatchesMethodPatch {
            /**
             * Value of the method to match against. If left empty or omitted, will
             * match all services.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            method: string;
            /**
             * Value of the service to match against. If left empty or omitted, will
             * match any service.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            service: string;
            /**
             * Type specifies how to match against the service and/or method.
             * Support: Core (Exact with service and method specified)
             *
             * Support: Implementation-specific (Exact with method specified but no service specified)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type: string;
        }

        /**
         * GRPCRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a gRPC request only if its service
         * is `foo` AND it contains the `version: v1` header:
         *
         * ```
         * matches:
         *   - method:
         *     type: Exact
         *     service: "foo"
         *     headers:
         *   - name: "version"
         *     value "v1"
         *
         * ```
         */
        export interface GRPCRouteSpecRulesMatchesPatch {
            /**
             * Headers specifies gRPC request header matchers. Multiple match values are
             * ANDed together, meaning, a request MUST match all the specified headers
             * to select the route.
             */
            headers: outputs.gateway.v1.GRPCRouteSpecRulesMatchesHeadersPatch[];
            method: outputs.gateway.v1.GRPCRouteSpecRulesMatchesMethodPatch;
        }

        /**
         * GRPCRouteRule defines the semantics for matching a gRPC request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface GRPCRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive an `UNAVAILABLE` status.
             *
             * See the GRPCBackendRef definition for the rules about what makes a single
             * GRPCBackendRef invalid.
             *
             * When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive an `UNAVAILABLE` status.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
             * Implementations may choose how that 50 percent is determined.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs: outputs.gateway.v1.GRPCRouteSpecRulesBackendRefsPatch[];
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * The effects of ordering of multiple behaviors are currently unspecified.
             * This can change in the future based on feedback during the alpha stage.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations that support
             *   GRPCRoute.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * If an implementation can not support a combination of filters, it must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters: outputs.gateway.v1.GRPCRouteSpecRulesFiltersPatch[];
            /**
             * Matches define conditions used for matching the rule against incoming
             * gRPC requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - method:
             *     service: foo.bar
             *   headers:
             *     values:
             *       version: 2
             * - method:
             *     service: foo.bar.v2
             * ```
             *
             * For a request to match against this rule, it MUST satisfy
             * EITHER of the two conditions:
             *
             * - service of foo.bar AND contains the header `version: 2`
             * - service of foo.bar.v2
             *
             * See the documentation for GRPCRouteMatch on how to specify multiple
             * match conditions to be ANDed together.
             *
             * If no matches are specified, the implementation MUST match every gRPC request.
             *
             * Proxy or Load Balancer routing configuration generated from GRPCRoutes
             * MUST prioritize rules based on the following criteria, continuing on
             * ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
             * Precedence MUST be given to the rule with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             * * Characters in a matching service.
             * * Characters in a matching method.
             * * Header matches.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within the Route that has been given precedence,
             * matching precedence MUST be granted to the first matching rule meeting
             * the above criteria.
             */
            matches: outputs.gateway.v1.GRPCRouteSpecRulesMatchesPatch[];
        }

        /**
         * Status defines the current state of GRPCRoute.
         */
        export interface GRPCRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents: outputs.gateway.v1.GRPCRouteStatusParents[];
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface GRPCRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a non-existent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions: outputs.gateway.v1.GRPCRouteStatusParentsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
            parentRef: outputs.gateway.v1.GRPCRouteStatusParentsParentRef;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GRPCRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GRPCRouteStatusParentsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface GRPCRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface GRPCRouteStatusParentsParentRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface GRPCRouteStatusParentsPatch {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a non-existent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions: outputs.gateway.v1.GRPCRouteStatusParentsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
            parentRef: outputs.gateway.v1.GRPCRouteStatusParentsParentRefPatch;
        }

        /**
         * Status defines the current state of GRPCRoute.
         */
        export interface GRPCRouteStatusPatch {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents: outputs.gateway.v1.GRPCRouteStatusParentsPatch[];
        }

        /**
         * Gateway represents an instance of a service-traffic handling infrastructure
         * by binding Listeners to a set of IP addresses.
         */
        export interface Gateway {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Gateway";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1.GatewaySpec;
            status: outputs.gateway.v1.GatewayStatus;
        }

        /**
         * GatewayClass describes a class of Gateways available to the user for creating
         * Gateway resources.
         *
         * It is recommended that this resource be used as a template for Gateways. This
         * means that a Gateway is based on the state of the GatewayClass at the time it
         * was created and changes to the GatewayClass or associated parameters are not
         * propagated down to existing Gateways. This recommendation is intended to
         * limit the blast radius of changes to GatewayClass or associated parameters.
         * If implementations choose to propagate GatewayClass changes to existing
         * Gateways, that MUST be clearly documented by the implementation.
         *
         * Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
         * add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the
         * associated GatewayClass. This ensures that a GatewayClass associated with a
         * Gateway is not deleted while in use.
         *
         * GatewayClass is a Cluster level resource.
         */
        export interface GatewayClass {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "GatewayClass";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1.GatewayClassSpec;
            status: outputs.gateway.v1.GatewayClassStatus;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpec {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName: string;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description: string;
            parametersRef: outputs.gateway.v1.GatewayClassSpecParametersRef;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRef {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace: string;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace: string;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpecPatch {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName: string;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description: string;
            parametersRef: outputs.gateway.v1.GatewayClassSpecParametersRefPatch;
        }

        /**
         * Status defines the current state of GatewayClass.
         *
         * Implementations MUST populate status on all GatewayClass resources which
         * specify their controller name.
         */
        export interface GatewayClassStatus {
            /**
             * Conditions is the current status from the controller for
             * this GatewayClass.
             *
             * Controllers should prefer to publish conditions using values
             * of GatewayClassConditionType for the type of each Condition.
             */
            conditions: outputs.gateway.v1.GatewayClassStatusConditions[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayClassStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayClassStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Status defines the current state of GatewayClass.
         *
         * Implementations MUST populate status on all GatewayClass resources which
         * specify their controller name.
         */
        export interface GatewayClassStatusPatch {
            /**
             * Conditions is the current status from the controller for
             * this GatewayClass.
             *
             * Controllers should prefer to publish conditions using values
             * of GatewayClassConditionType for the type of each Condition.
             */
            conditions: outputs.gateway.v1.GatewayClassStatusConditionsPatch[];
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpec {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses: outputs.gateway.v1.GatewaySpecAddresses[];
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName: string;
            infrastructure: outputs.gateway.v1.GatewaySpecInfrastructure;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on their
             * targeted conformance profile:
             *
             * HTTP Profile
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLS Profile
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * The implementation can match inbound requests to a single distinct
             * Listener. When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * For example, the following Listener scenarios are distinct:
             *
             * 1. Multiple Listeners with the same Port that all use the "HTTP"
             *    Protocol that all have unique Hostname values.
             * 2. Multiple Listeners with the same Port that use either the "HTTPS" or
             *    "TLS" Protocol that all have unique Hostname values.
             * 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener
             *    with the same Protocol has the same Port value.
             *
             * Some fields in the Listener struct have possible values that affect
             * whether the Listener is distinct. Hostname is particularly relevant
             * for HTTP or HTTPS protocols.
             *
             * When using the Hostname value to select between same-Port, same-Protocol
             * Listeners, the Hostname value must be different on each Listener for the
             * Listener to be distinct.
             *
             * When the Listeners are distinct based on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches must be processed before wildcard matches, and wildcard
             * matches must be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are Conflicted, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners. To put this another way, implementations may
             * accept a partial Listener set only if they throw out *all* the conflicting
             * Listeners. No picking one of the conflicting listeners as the winner.
             * This also means that the Gateway must have at least one non-conflicting
             * Listener in this case, otherwise it violates the requirement that at
             * least one Listener must be present.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * A Gateway's Listeners are considered "compatible" if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Note that requests SHOULD match at most one Listener. For example, if
             * Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             * This concept is known as "Listener Isolation". Implementations that do
             * not support Listener Isolation MUST clearly document this.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * Support: Core
             */
            listeners: outputs.gateway.v1.GatewaySpecListeners[];
        }

        /**
         * GatewayAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddresses {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * GatewayAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddressesPatch {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructure {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations: {[key: string]: string};
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels: {[key: string]: string};
            parametersRef: outputs.gateway.v1.GatewaySpecInfrastructureParametersRef;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRef {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructurePatch {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations: {[key: string]: string};
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels: {[key: string]: string};
            parametersRef: outputs.gateway.v1.GatewaySpecInfrastructureParametersRefPatch;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListeners {
            allowedRoutes: outputs.gateway.v1.GatewaySpecListenersAllowedRoutes;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
             *   protocol layers as described above. If an implementation does not
             *   ensure that both the SNI and Host header match the Listener hostname,
             *   it MUST clearly document that.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname: string;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name: string;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port: number;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol: string;
            tls: outputs.gateway.v1.GatewaySpecListenersTls;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutes {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesKinds[];
            namespaces: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespaces;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKinds {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespaces {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from: string;
            selector: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelector;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesPatch {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from: string;
            selector: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesPatch {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesKindsPatch[];
            namespaces: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesPatch;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListenersPatch {
            allowedRoutes: outputs.gateway.v1.GatewaySpecListenersAllowedRoutesPatch;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
             *   protocol layers as described above. If an implementation does not
             *   ensure that both the SNI and Host header match the Listener hostname,
             *   it MUST clearly document that.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname: string;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name: string;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port: number;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol: string;
            tls: outputs.gateway.v1.GatewaySpecListenersTlsPatch;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTls {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs: outputs.gateway.v1.GatewaySpecListenersTlsCertificateRefs[];
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode: string;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options: {[key: string]: string};
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTlsPatch {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs: outputs.gateway.v1.GatewaySpecListenersTlsCertificateRefsPatch[];
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode: string;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options: {[key: string]: string};
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpecPatch {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses: outputs.gateway.v1.GatewaySpecAddressesPatch[];
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName: string;
            infrastructure: outputs.gateway.v1.GatewaySpecInfrastructurePatch;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on their
             * targeted conformance profile:
             *
             * HTTP Profile
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLS Profile
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * The implementation can match inbound requests to a single distinct
             * Listener. When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * For example, the following Listener scenarios are distinct:
             *
             * 1. Multiple Listeners with the same Port that all use the "HTTP"
             *    Protocol that all have unique Hostname values.
             * 2. Multiple Listeners with the same Port that use either the "HTTPS" or
             *    "TLS" Protocol that all have unique Hostname values.
             * 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener
             *    with the same Protocol has the same Port value.
             *
             * Some fields in the Listener struct have possible values that affect
             * whether the Listener is distinct. Hostname is particularly relevant
             * for HTTP or HTTPS protocols.
             *
             * When using the Hostname value to select between same-Port, same-Protocol
             * Listeners, the Hostname value must be different on each Listener for the
             * Listener to be distinct.
             *
             * When the Listeners are distinct based on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches must be processed before wildcard matches, and wildcard
             * matches must be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are Conflicted, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners. To put this another way, implementations may
             * accept a partial Listener set only if they throw out *all* the conflicting
             * Listeners. No picking one of the conflicting listeners as the winner.
             * This also means that the Gateway must have at least one non-conflicting
             * Listener in this case, otherwise it violates the requirement that at
             * least one Listener must be present.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * A Gateway's Listeners are considered "compatible" if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Note that requests SHOULD match at most one Listener. For example, if
             * Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             * This concept is known as "Listener Isolation". Implementations that do
             * not support Listener Isolation MUST clearly document this.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * Support: Core
             */
            listeners: outputs.gateway.v1.GatewaySpecListenersPatch[];
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatus {
            /**
             * Addresses lists the network addresses that have been bound to the
             * Gateway.
             *
             * This list may differ from the addresses provided in the spec under some
             * conditions:
             *
             *   * no addresses are specified, all addresses are dynamically assigned
             *   * a combination of specified and dynamic addresses are assigned
             *   * a specified address was unusable (e.g. already in use)
             */
            addresses: outputs.gateway.v1.GatewayStatusAddresses[];
            /**
             * Conditions describe the current conditions of the Gateway.
             *
             * Implementations should prefer to express Gateway conditions
             * using the `GatewayConditionType` and `GatewayConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe Gateway state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             * * "Ready"
             */
            conditions: outputs.gateway.v1.GatewayStatusConditions[];
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners: outputs.gateway.v1.GatewayStatusListeners[];
        }

        /**
         * GatewayStatusAddress describes a network address that is bound to a Gateway.
         */
        export interface GatewayStatusAddresses {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * GatewayStatusAddress describes a network address that is bound to a Gateway.
         */
        export interface GatewayStatusAddressesPatch {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListeners {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes: number;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions: outputs.gateway.v1.GatewayStatusListenersConditions[];
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name: string;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds: outputs.gateway.v1.GatewayStatusListenersSupportedKinds[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusListenersConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusListenersConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListenersPatch {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes: number;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions: outputs.gateway.v1.GatewayStatusListenersConditionsPatch[];
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name: string;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds: outputs.gateway.v1.GatewayStatusListenersSupportedKindsPatch[];
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKinds {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatusPatch {
            /**
             * Addresses lists the network addresses that have been bound to the
             * Gateway.
             *
             * This list may differ from the addresses provided in the spec under some
             * conditions:
             *
             *   * no addresses are specified, all addresses are dynamically assigned
             *   * a combination of specified and dynamic addresses are assigned
             *   * a specified address was unusable (e.g. already in use)
             */
            addresses: outputs.gateway.v1.GatewayStatusAddressesPatch[];
            /**
             * Conditions describe the current conditions of the Gateway.
             *
             * Implementations should prefer to express Gateway conditions
             * using the `GatewayConditionType` and `GatewayConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe Gateway state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             * * "Ready"
             */
            conditions: outputs.gateway.v1.GatewayStatusConditionsPatch[];
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners: outputs.gateway.v1.GatewayStatusListenersPatch[];
        }

        /**
         * HTTPRoute provides a way to route HTTP requests. This includes the capability
         * to match requests by hostname, path, header, or query param. Filters can be
         * used to specify additional processing steps. Backends specify where matching
         * requests should be routed.
         */
        export interface HTTPRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "HTTPRoute";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1.HTTPRouteSpec;
            status: outputs.gateway.v1.HTTPRouteStatus;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpec {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             */
            parentRefs: outputs.gateway.v1.HTTPRouteSpecParentRefs[];
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules: outputs.gateway.v1.HTTPRouteSpecRules[];
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpecPatch {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             */
            parentRefs: outputs.gateway.v1.HTTPRouteSpecParentRefsPatch[];
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules: outputs.gateway.v1.HTTPRouteSpecRulesPatch[];
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefs[];
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that can not be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation can not support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters: outputs.gateway.v1.HTTPRouteSpecRulesFilters[];
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches: outputs.gateway.v1.HTTPRouteSpecRulesMatches[];
            timeouts: outputs.gateway.v1.HTTPRouteSpecRulesTimeouts;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         * <gateway:experimental:description>
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         * </gateway:experimental:description>
         */
        export interface HTTPRouteSpecRulesBackendRefs {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFilters[];
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight: number;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFilters {
            extensionRef: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRef;
            requestHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier;
            requestMirror: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirror;
            requestRedirect: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect;
            responseHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersPatch {
            extensionRef: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch;
            requestHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch;
            requestMirror: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch;
            requestRedirect: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch;
            responseHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirror {
            backendRef: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
            backendRef: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         * <gateway:experimental:description>
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         * </gateway:experimental:description>
         */
        export interface HTTPRouteSpecRulesBackendRefsPatch {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersPatch[];
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight: number;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFilters {
            extensionRef: outputs.gateway.v1.HTTPRouteSpecRulesFiltersExtensionRef;
            requestHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifier;
            requestMirror: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirror;
            requestRedirect: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirect;
            responseHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifier;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewrite;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFiltersPatch {
            extensionRef: outputs.gateway.v1.HTTPRouteSpecRulesFiltersExtensionRefPatch;
            requestHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch;
            requestMirror: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorPatch;
            requestRedirect: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPatch;
            responseHeaderModifier: outputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePatch;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirror {
            backendRef: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRef;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorPatch {
            backendRef: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPath;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPathPatch;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePath;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePathPatch;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatches {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers: outputs.gateway.v1.HTTPRouteSpecRulesMatchesHeaders[];
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesMatchesPath;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams: outputs.gateway.v1.HTTPRouteSpecRulesMatchesQueryParams[];
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeadersPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatchesPatch {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers: outputs.gateway.v1.HTTPRouteSpecRulesMatchesHeadersPatch[];
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method: string;
            path: outputs.gateway.v1.HTTPRouteSpecRulesMatchesPathPatch;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams: outputs.gateway.v1.HTTPRouteSpecRulesMatchesQueryParamsPatch[];
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPath {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type: string;
            /**
             * Value of the HTTP path to match against.
             */
            value: string;
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPathPatch {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type: string;
            /**
             * Value of the HTTP path to match against.
             */
            value: string;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParams {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: string;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParamsPatch {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: string;
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs: outputs.gateway.v1.HTTPRouteSpecRulesBackendRefsPatch[];
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that can not be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation can not support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters: outputs.gateway.v1.HTTPRouteSpecRulesFiltersPatch[];
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches: outputs.gateway.v1.HTTPRouteSpecRulesMatchesPatch[];
            timeouts: outputs.gateway.v1.HTTPRouteSpecRulesTimeoutsPatch;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeouts {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest: string;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request: string;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeoutsPatch {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest: string;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request: string;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents: outputs.gateway.v1.HTTPRouteStatusParents[];
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface HTTPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a non-existent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions: outputs.gateway.v1.HTTPRouteStatusParentsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
            parentRef: outputs.gateway.v1.HTTPRouteStatusParentsParentRef;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface HTTPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface HTTPRouteStatusParentsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface HTTPRouteStatusParentsPatch {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a non-existent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions: outputs.gateway.v1.HTTPRouteStatusParentsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
            parentRef: outputs.gateway.v1.HTTPRouteStatusParentsParentRefPatch;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatusPatch {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents: outputs.gateway.v1.HTTPRouteStatusParentsPatch[];
        }

    }

    export namespace v1beta1 {
        /**
         * Gateway represents an instance of a service-traffic handling infrastructure
         * by binding Listeners to a set of IP addresses.
         */
        export interface Gateway {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1beta1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Gateway";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1beta1.GatewaySpec;
            status: outputs.gateway.v1beta1.GatewayStatus;
        }

        /**
         * GatewayClass describes a class of Gateways available to the user for creating
         * Gateway resources.
         *
         * It is recommended that this resource be used as a template for Gateways. This
         * means that a Gateway is based on the state of the GatewayClass at the time it
         * was created and changes to the GatewayClass or associated parameters are not
         * propagated down to existing Gateways. This recommendation is intended to
         * limit the blast radius of changes to GatewayClass or associated parameters.
         * If implementations choose to propagate GatewayClass changes to existing
         * Gateways, that MUST be clearly documented by the implementation.
         *
         * Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
         * add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the
         * associated GatewayClass. This ensures that a GatewayClass associated with a
         * Gateway is not deleted while in use.
         *
         * GatewayClass is a Cluster level resource.
         */
        export interface GatewayClass {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1beta1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "GatewayClass";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1beta1.GatewayClassSpec;
            status: outputs.gateway.v1beta1.GatewayClassStatus;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpec {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName: string;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description: string;
            parametersRef: outputs.gateway.v1beta1.GatewayClassSpecParametersRef;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRef {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace: string;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace: string;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpecPatch {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName: string;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description: string;
            parametersRef: outputs.gateway.v1beta1.GatewayClassSpecParametersRefPatch;
        }

        /**
         * Status defines the current state of GatewayClass.
         *
         * Implementations MUST populate status on all GatewayClass resources which
         * specify their controller name.
         */
        export interface GatewayClassStatus {
            /**
             * Conditions is the current status from the controller for
             * this GatewayClass.
             *
             * Controllers should prefer to publish conditions using values
             * of GatewayClassConditionType for the type of each Condition.
             */
            conditions: outputs.gateway.v1beta1.GatewayClassStatusConditions[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayClassStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayClassStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Status defines the current state of GatewayClass.
         *
         * Implementations MUST populate status on all GatewayClass resources which
         * specify their controller name.
         */
        export interface GatewayClassStatusPatch {
            /**
             * Conditions is the current status from the controller for
             * this GatewayClass.
             *
             * Controllers should prefer to publish conditions using values
             * of GatewayClassConditionType for the type of each Condition.
             */
            conditions: outputs.gateway.v1beta1.GatewayClassStatusConditionsPatch[];
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpec {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses: outputs.gateway.v1beta1.GatewaySpecAddresses[];
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName: string;
            infrastructure: outputs.gateway.v1beta1.GatewaySpecInfrastructure;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on their
             * targeted conformance profile:
             *
             * HTTP Profile
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLS Profile
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * The implementation can match inbound requests to a single distinct
             * Listener. When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * For example, the following Listener scenarios are distinct:
             *
             * 1. Multiple Listeners with the same Port that all use the "HTTP"
             *    Protocol that all have unique Hostname values.
             * 2. Multiple Listeners with the same Port that use either the "HTTPS" or
             *    "TLS" Protocol that all have unique Hostname values.
             * 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener
             *    with the same Protocol has the same Port value.
             *
             * Some fields in the Listener struct have possible values that affect
             * whether the Listener is distinct. Hostname is particularly relevant
             * for HTTP or HTTPS protocols.
             *
             * When using the Hostname value to select between same-Port, same-Protocol
             * Listeners, the Hostname value must be different on each Listener for the
             * Listener to be distinct.
             *
             * When the Listeners are distinct based on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches must be processed before wildcard matches, and wildcard
             * matches must be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are Conflicted, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners. To put this another way, implementations may
             * accept a partial Listener set only if they throw out *all* the conflicting
             * Listeners. No picking one of the conflicting listeners as the winner.
             * This also means that the Gateway must have at least one non-conflicting
             * Listener in this case, otherwise it violates the requirement that at
             * least one Listener must be present.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * A Gateway's Listeners are considered "compatible" if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Note that requests SHOULD match at most one Listener. For example, if
             * Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             * This concept is known as "Listener Isolation". Implementations that do
             * not support Listener Isolation MUST clearly document this.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * Support: Core
             */
            listeners: outputs.gateway.v1beta1.GatewaySpecListeners[];
        }

        /**
         * GatewayAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddresses {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * GatewayAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddressesPatch {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructure {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations: {[key: string]: string};
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels: {[key: string]: string};
            parametersRef: outputs.gateway.v1beta1.GatewaySpecInfrastructureParametersRef;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRef {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group: string;
            /**
             * Kind is kind of the referent.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructurePatch {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations: {[key: string]: string};
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels: {[key: string]: string};
            parametersRef: outputs.gateway.v1beta1.GatewaySpecInfrastructureParametersRefPatch;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListeners {
            allowedRoutes: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutes;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
             *   protocol layers as described above. If an implementation does not
             *   ensure that both the SNI and Host header match the Listener hostname,
             *   it MUST clearly document that.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname: string;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name: string;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port: number;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol: string;
            tls: outputs.gateway.v1beta1.GatewaySpecListenersTls;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutes {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesKinds[];
            namespaces: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespaces;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKinds {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespaces {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from: string;
            selector: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelector;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesPatch {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from: string;
            selector: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesPatch {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesKindsPatch[];
            namespaces: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesPatch;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListenersPatch {
            allowedRoutes: outputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesPatch;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
             *   protocol layers as described above. If an implementation does not
             *   ensure that both the SNI and Host header match the Listener hostname,
             *   it MUST clearly document that.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname: string;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name: string;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port: number;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol: string;
            tls: outputs.gateway.v1beta1.GatewaySpecListenersTlsPatch;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTls {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs: outputs.gateway.v1beta1.GatewaySpecListenersTlsCertificateRefs[];
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode: string;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options: {[key: string]: string};
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTlsPatch {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs: outputs.gateway.v1beta1.GatewaySpecListenersTlsCertificateRefsPatch[];
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode: string;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options: {[key: string]: string};
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpecPatch {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses: outputs.gateway.v1beta1.GatewaySpecAddressesPatch[];
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName: string;
            infrastructure: outputs.gateway.v1beta1.GatewaySpecInfrastructurePatch;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on their
             * targeted conformance profile:
             *
             * HTTP Profile
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLS Profile
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * The implementation can match inbound requests to a single distinct
             * Listener. When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * For example, the following Listener scenarios are distinct:
             *
             * 1. Multiple Listeners with the same Port that all use the "HTTP"
             *    Protocol that all have unique Hostname values.
             * 2. Multiple Listeners with the same Port that use either the "HTTPS" or
             *    "TLS" Protocol that all have unique Hostname values.
             * 3. A mixture of "TCP" and "UDP" Protocol Listeners, where no Listener
             *    with the same Protocol has the same Port value.
             *
             * Some fields in the Listener struct have possible values that affect
             * whether the Listener is distinct. Hostname is particularly relevant
             * for HTTP or HTTPS protocols.
             *
             * When using the Hostname value to select between same-Port, same-Protocol
             * Listeners, the Hostname value must be different on each Listener for the
             * Listener to be distinct.
             *
             * When the Listeners are distinct based on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches must be processed before wildcard matches, and wildcard
             * matches must be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are Conflicted, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners. To put this another way, implementations may
             * accept a partial Listener set only if they throw out *all* the conflicting
             * Listeners. No picking one of the conflicting listeners as the winner.
             * This also means that the Gateway must have at least one non-conflicting
             * Listener in this case, otherwise it violates the requirement that at
             * least one Listener must be present.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * A Gateway's Listeners are considered "compatible" if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Note that requests SHOULD match at most one Listener. For example, if
             * Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             * This concept is known as "Listener Isolation". Implementations that do
             * not support Listener Isolation MUST clearly document this.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * Support: Core
             */
            listeners: outputs.gateway.v1beta1.GatewaySpecListenersPatch[];
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatus {
            /**
             * Addresses lists the network addresses that have been bound to the
             * Gateway.
             *
             * This list may differ from the addresses provided in the spec under some
             * conditions:
             *
             *   * no addresses are specified, all addresses are dynamically assigned
             *   * a combination of specified and dynamic addresses are assigned
             *   * a specified address was unusable (e.g. already in use)
             */
            addresses: outputs.gateway.v1beta1.GatewayStatusAddresses[];
            /**
             * Conditions describe the current conditions of the Gateway.
             *
             * Implementations should prefer to express Gateway conditions
             * using the `GatewayConditionType` and `GatewayConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe Gateway state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             * * "Ready"
             */
            conditions: outputs.gateway.v1beta1.GatewayStatusConditions[];
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners: outputs.gateway.v1beta1.GatewayStatusListeners[];
        }

        /**
         * GatewayStatusAddress describes a network address that is bound to a Gateway.
         */
        export interface GatewayStatusAddresses {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * GatewayStatusAddress describes a network address that is bound to a Gateway.
         */
        export interface GatewayStatusAddressesPatch {
            /**
             * Type of the address.
             */
            type: string;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListeners {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes: number;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions: outputs.gateway.v1beta1.GatewayStatusListenersConditions[];
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name: string;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds: outputs.gateway.v1beta1.GatewayStatusListenersSupportedKinds[];
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusListenersConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusListenersConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListenersPatch {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes: number;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions: outputs.gateway.v1beta1.GatewayStatusListenersConditionsPatch[];
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name: string;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds: outputs.gateway.v1beta1.GatewayStatusListenersSupportedKindsPatch[];
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKinds {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group: string;
            /**
             * Kind is the kind of the Route.
             */
            kind: string;
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatusPatch {
            /**
             * Addresses lists the network addresses that have been bound to the
             * Gateway.
             *
             * This list may differ from the addresses provided in the spec under some
             * conditions:
             *
             *   * no addresses are specified, all addresses are dynamically assigned
             *   * a combination of specified and dynamic addresses are assigned
             *   * a specified address was unusable (e.g. already in use)
             */
            addresses: outputs.gateway.v1beta1.GatewayStatusAddressesPatch[];
            /**
             * Conditions describe the current conditions of the Gateway.
             *
             * Implementations should prefer to express Gateway conditions
             * using the `GatewayConditionType` and `GatewayConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe Gateway state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             * * "Ready"
             */
            conditions: outputs.gateway.v1beta1.GatewayStatusConditionsPatch[];
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners: outputs.gateway.v1beta1.GatewayStatusListenersPatch[];
        }

        /**
         * HTTPRoute provides a way to route HTTP requests. This includes the capability
         * to match requests by hostname, path, header, or query param. Filters can be
         * used to specify additional processing steps. Backends specify where matching
         * requests should be routed.
         */
        export interface HTTPRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1beta1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "HTTPRoute";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1beta1.HTTPRouteSpec;
            status: outputs.gateway.v1beta1.HTTPRouteStatus;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpec {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             */
            parentRefs: outputs.gateway.v1beta1.HTTPRouteSpecParentRefs[];
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules: outputs.gateway.v1beta1.HTTPRouteSpecRules[];
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpecPatch {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames: string[];
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             */
            parentRefs: outputs.gateway.v1beta1.HTTPRouteSpecParentRefsPatch[];
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules: outputs.gateway.v1beta1.HTTPRouteSpecRulesPatch[];
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefs[];
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that can not be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation can not support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters: outputs.gateway.v1beta1.HTTPRouteSpecRulesFilters[];
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatches[];
            timeouts: outputs.gateway.v1beta1.HTTPRouteSpecRulesTimeouts;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         * <gateway:experimental:description>
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         * </gateway:experimental:description>
         */
        export interface HTTPRouteSpecRulesBackendRefs {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFilters[];
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight: number;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFilters {
            extensionRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRef;
            requestHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier;
            requestMirror: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirror;
            requestRedirect: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect;
            responseHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersPatch {
            extensionRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch;
            requestHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch;
            requestMirror: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch;
            requestRedirect: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch;
            responseHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirror {
            backendRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
            backendRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         * <gateway:experimental:description>
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         * </gateway:experimental:description>
         */
        export interface HTTPRouteSpecRulesBackendRefsPatch {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersPatch[];
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight: number;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFilters {
            extensionRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersExtensionRef;
            requestHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifier;
            requestMirror: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirror;
            requestRedirect: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirect;
            responseHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifier;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewrite;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFiltersPatch {
            extensionRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersExtensionRefPatch;
            requestHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch;
            requestMirror: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorPatch;
            requestRedirect: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPatch;
            responseHeaderModifier: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
            urlRewrite: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePatch;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirror {
            backendRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRef;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group: string;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind: string;
            /**
             * Name is the name of the referent.
             */
            name: string;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port: number;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorPatch {
            backendRef: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPath;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPathPatch;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port: number;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme: string;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode: number;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSet[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch[];
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove: string[];
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch[];
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePath;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePathPatch;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath: string;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch: string;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type: string;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatches {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesHeaders[];
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPath;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesQueryParams[];
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeadersPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name: string;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value: string;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatchesPatch {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesHeadersPatch[];
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method: string;
            path: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPathPatch;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesQueryParamsPatch[];
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPath {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type: string;
            /**
             * Value of the HTTP path to match against.
             */
            value: string;
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPathPatch {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type: string;
            /**
             * Value of the HTTP path to match against.
             */
            value: string;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParams {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: string;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParamsPatch {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name: string;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type: string;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value: string;
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs: outputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsPatch[];
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that can not be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation can not support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters: outputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersPatch[];
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches: outputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPatch[];
            timeouts: outputs.gateway.v1beta1.HTTPRouteSpecRulesTimeoutsPatch;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeouts {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest: string;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request: string;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeoutsPatch {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest: string;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request: string;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents: outputs.gateway.v1beta1.HTTPRouteStatusParents[];
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface HTTPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a non-existent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions: outputs.gateway.v1beta1.HTTPRouteStatusParentsConditions[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
            parentRef: outputs.gateway.v1beta1.HTTPRouteStatusParentsParentRef;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface HTTPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface HTTPRouteStatusParentsConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRefPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind: string;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             *
             * Support: Core
             */
            namespace: string;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port: number;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName: string;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface HTTPRouteStatusParentsPatch {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a non-existent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions: outputs.gateway.v1beta1.HTTPRouteStatusParentsConditionsPatch[];
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName: string;
            parentRef: outputs.gateway.v1beta1.HTTPRouteStatusParentsParentRefPatch;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatusPatch {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents: outputs.gateway.v1beta1.HTTPRouteStatusParentsPatch[];
        }

        /**
         * ReferenceGrant identifies kinds of resources in other namespaces that are
         * trusted to reference the specified kinds of resources in the same namespace
         * as the policy.
         *
         * Each ReferenceGrant can be used to represent a unique trust relationship.
         * Additional Reference Grants can be used to add to the set of trusted
         * sources of inbound references for the namespace they are defined within.
         *
         * All cross-namespace references in Gateway API (with the exception of cross-namespace
         * Gateway-route attachment) require a ReferenceGrant.
         *
         * ReferenceGrant is a form of runtime verification allowing users to assert
         * which cross-namespace object references are permitted. Implementations that
         * support ReferenceGrant MUST NOT permit cross-namespace references which have
         * no grant, and MUST respond to the removal of a grant by revoking the access
         * that the grant allowed.
         */
        export interface ReferenceGrant {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "gateway.networking.k8s.io/v1beta1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ReferenceGrant";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.gateway.v1beta1.ReferenceGrantSpec;
        }

        /**
         * Spec defines the desired state of ReferenceGrant.
         */
        export interface ReferenceGrantSpec {
            /**
             * From describes the trusted namespaces and kinds that can reference the
             * resources described in "To". Each entry in this list MUST be considered
             * to be an additional place that references can be valid from, or to put
             * this another way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            from: outputs.gateway.v1beta1.ReferenceGrantSpecFrom[];
            /**
             * To describes the resources that may be referenced by the resources
             * described in "From". Each entry in this list MUST be considered to be an
             * additional place that references can be valid to, or to put this another
             * way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            to: outputs.gateway.v1beta1.ReferenceGrantSpecTo[];
        }

        /**
         * ReferenceGrantFrom describes trusted namespaces and kinds.
         */
        export interface ReferenceGrantSpecFrom {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field.
             *
             * When used to permit a SecretObjectReference:
             *
             * * Gateway
             *
             * When used to permit a BackendObjectReference:
             *
             * * GRPCRoute
             * * HTTPRoute
             * * TCPRoute
             * * TLSRoute
             * * UDPRoute
             */
            kind: string;
            /**
             * Namespace is the namespace of the referent.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * ReferenceGrantFrom describes trusted namespaces and kinds.
         */
        export interface ReferenceGrantSpecFromPatch {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field.
             *
             * When used to permit a SecretObjectReference:
             *
             * * Gateway
             *
             * When used to permit a BackendObjectReference:
             *
             * * GRPCRoute
             * * HTTPRoute
             * * TCPRoute
             * * TLSRoute
             * * UDPRoute
             */
            kind: string;
            /**
             * Namespace is the namespace of the referent.
             *
             * Support: Core
             */
            namespace: string;
        }

        /**
         * Spec defines the desired state of ReferenceGrant.
         */
        export interface ReferenceGrantSpecPatch {
            /**
             * From describes the trusted namespaces and kinds that can reference the
             * resources described in "To". Each entry in this list MUST be considered
             * to be an additional place that references can be valid from, or to put
             * this another way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            from: outputs.gateway.v1beta1.ReferenceGrantSpecFromPatch[];
            /**
             * To describes the resources that may be referenced by the resources
             * described in "From". Each entry in this list MUST be considered to be an
             * additional place that references can be valid to, or to put this another
             * way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            to: outputs.gateway.v1beta1.ReferenceGrantSpecToPatch[];
        }

        /**
         * ReferenceGrantTo describes what Kinds are allowed as targets of the
         * references.
         */
        export interface ReferenceGrantSpecTo {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field:
             *
             * * Secret when used to permit a SecretObjectReference
             * * Service when used to permit a BackendObjectReference
             */
            kind: string;
            /**
             * Name is the name of the referent. When unspecified, this policy
             * refers to all resources of the specified Group and Kind in the local
             * namespace.
             */
            name: string;
        }

        /**
         * ReferenceGrantTo describes what Kinds are allowed as targets of the
         * references.
         */
        export interface ReferenceGrantSpecToPatch {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group: string;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field:
             *
             * * Secret when used to permit a SecretObjectReference
             * * Service when used to permit a BackendObjectReference
             */
            kind: string;
            /**
             * Name is the name of the referent. When unspecified, this policy
             * refers to all resources of the specified Group and Kind in the local
             * namespace.
             */
            name: string;
        }

    }
}

export namespace helm {
    export namespace v1 {
        export interface HelmChart {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "helm.cattle.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "HelmChart";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.helm.v1.HelmChartSpec;
            status: outputs.helm.v1.HelmChartStatus;
        }

        export interface HelmChartConfig {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "helm.cattle.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "HelmChartConfig";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.helm.v1.HelmChartConfigSpec;
        }

        export interface HelmChartConfigSpec {
            failurePolicy: string;
            valuesContent: string;
        }

        export interface HelmChartConfigSpecPatch {
            failurePolicy: string;
            valuesContent: string;
        }

        export interface HelmChartSpec {
            authPassCredentials: boolean;
            authSecret: outputs.helm.v1.HelmChartSpecAuthSecret;
            backOffLimit: number;
            bootstrap: boolean;
            chart: string;
            chartContent: string;
            createNamespace: boolean;
            dockerRegistrySecret: outputs.helm.v1.HelmChartSpecDockerRegistrySecret;
            failurePolicy: string;
            helmVersion: string;
            insecureSkipTLSVerify: boolean;
            jobImage: string;
            plainHTTP: boolean;
            podSecurityContext: outputs.helm.v1.HelmChartSpecPodSecurityContext;
            repo: string;
            repoCA: string;
            repoCAConfigMap: outputs.helm.v1.HelmChartSpecRepoCAConfigMap;
            securityContext: outputs.helm.v1.HelmChartSpecSecurityContext;
            set: {[key: string]: number | string};
            targetNamespace: string;
            timeout: string;
            valuesContent: string;
            version: string;
        }

        export interface HelmChartSpecAuthSecret {
            name: string;
        }

        export interface HelmChartSpecAuthSecretPatch {
            name: string;
        }

        export interface HelmChartSpecDockerRegistrySecret {
            name: string;
        }

        export interface HelmChartSpecDockerRegistrySecretPatch {
            name: string;
        }

        export interface HelmChartSpecPatch {
            authPassCredentials: boolean;
            authSecret: outputs.helm.v1.HelmChartSpecAuthSecretPatch;
            backOffLimit: number;
            bootstrap: boolean;
            chart: string;
            chartContent: string;
            createNamespace: boolean;
            dockerRegistrySecret: outputs.helm.v1.HelmChartSpecDockerRegistrySecretPatch;
            failurePolicy: string;
            helmVersion: string;
            insecureSkipTLSVerify: boolean;
            jobImage: string;
            plainHTTP: boolean;
            podSecurityContext: outputs.helm.v1.HelmChartSpecPodSecurityContextPatch;
            repo: string;
            repoCA: string;
            repoCAConfigMap: outputs.helm.v1.HelmChartSpecRepoCAConfigMapPatch;
            securityContext: outputs.helm.v1.HelmChartSpecSecurityContextPatch;
            set: {[key: string]: number | string};
            targetNamespace: string;
            timeout: string;
            valuesContent: string;
            version: string;
        }

        export interface HelmChartSpecPodSecurityContext {
            appArmorProfile: outputs.helm.v1.HelmChartSpecPodSecurityContextAppArmorProfile;
            fsGroup: number;
            fsGroupChangePolicy: string;
            runAsGroup: number;
            runAsNonRoot: boolean;
            runAsUser: number;
            seLinuxOptions: outputs.helm.v1.HelmChartSpecPodSecurityContextSeLinuxOptions;
            seccompProfile: outputs.helm.v1.HelmChartSpecPodSecurityContextSeccompProfile;
            supplementalGroups: number[];
            sysctls: outputs.helm.v1.HelmChartSpecPodSecurityContextSysctls[];
            windowsOptions: outputs.helm.v1.HelmChartSpecPodSecurityContextWindowsOptions;
        }

        export interface HelmChartSpecPodSecurityContextAppArmorProfile {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecPodSecurityContextAppArmorProfilePatch {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecPodSecurityContextPatch {
            appArmorProfile: outputs.helm.v1.HelmChartSpecPodSecurityContextAppArmorProfilePatch;
            fsGroup: number;
            fsGroupChangePolicy: string;
            runAsGroup: number;
            runAsNonRoot: boolean;
            runAsUser: number;
            seLinuxOptions: outputs.helm.v1.HelmChartSpecPodSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.helm.v1.HelmChartSpecPodSecurityContextSeccompProfilePatch;
            supplementalGroups: number[];
            sysctls: outputs.helm.v1.HelmChartSpecPodSecurityContextSysctlsPatch[];
            windowsOptions: outputs.helm.v1.HelmChartSpecPodSecurityContextWindowsOptionsPatch;
        }

        export interface HelmChartSpecPodSecurityContextSeLinuxOptions {
            level: string;
            role: string;
            type: string;
            user: string;
        }

        export interface HelmChartSpecPodSecurityContextSeLinuxOptionsPatch {
            level: string;
            role: string;
            type: string;
            user: string;
        }

        export interface HelmChartSpecPodSecurityContextSeccompProfile {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecPodSecurityContextSeccompProfilePatch {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecPodSecurityContextSysctls {
            name: string;
            value: string;
        }

        export interface HelmChartSpecPodSecurityContextSysctlsPatch {
            name: string;
            value: string;
        }

        export interface HelmChartSpecPodSecurityContextWindowsOptions {
            gmsaCredentialSpec: string;
            gmsaCredentialSpecName: string;
            hostProcess: boolean;
            runAsUserName: string;
        }

        export interface HelmChartSpecPodSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec: string;
            gmsaCredentialSpecName: string;
            hostProcess: boolean;
            runAsUserName: string;
        }

        export interface HelmChartSpecRepoCAConfigMap {
            name: string;
        }

        export interface HelmChartSpecRepoCAConfigMapPatch {
            name: string;
        }

        export interface HelmChartSpecSecurityContext {
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.helm.v1.HelmChartSpecSecurityContextAppArmorProfile;
            capabilities: outputs.helm.v1.HelmChartSpecSecurityContextCapabilities;
            privileged: boolean;
            procMount: string;
            readOnlyRootFilesystem: boolean;
            runAsGroup: number;
            runAsNonRoot: boolean;
            runAsUser: number;
            seLinuxOptions: outputs.helm.v1.HelmChartSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.helm.v1.HelmChartSpecSecurityContextSeccompProfile;
            windowsOptions: outputs.helm.v1.HelmChartSpecSecurityContextWindowsOptions;
        }

        export interface HelmChartSpecSecurityContextAppArmorProfile {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecSecurityContextAppArmorProfilePatch {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecSecurityContextCapabilities {
            add: string[];
            drop: string[];
        }

        export interface HelmChartSpecSecurityContextCapabilitiesPatch {
            add: string[];
            drop: string[];
        }

        export interface HelmChartSpecSecurityContextPatch {
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.helm.v1.HelmChartSpecSecurityContextAppArmorProfilePatch;
            capabilities: outputs.helm.v1.HelmChartSpecSecurityContextCapabilitiesPatch;
            privileged: boolean;
            procMount: string;
            readOnlyRootFilesystem: boolean;
            runAsGroup: number;
            runAsNonRoot: boolean;
            runAsUser: number;
            seLinuxOptions: outputs.helm.v1.HelmChartSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.helm.v1.HelmChartSpecSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.helm.v1.HelmChartSpecSecurityContextWindowsOptionsPatch;
        }

        export interface HelmChartSpecSecurityContextSeLinuxOptions {
            level: string;
            role: string;
            type: string;
            user: string;
        }

        export interface HelmChartSpecSecurityContextSeLinuxOptionsPatch {
            level: string;
            role: string;
            type: string;
            user: string;
        }

        export interface HelmChartSpecSecurityContextSeccompProfile {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecSecurityContextSeccompProfilePatch {
            localhostProfile: string;
            type: string;
        }

        export interface HelmChartSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec: string;
            gmsaCredentialSpecName: string;
            hostProcess: boolean;
            runAsUserName: string;
        }

        export interface HelmChartSpecSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec: string;
            gmsaCredentialSpecName: string;
            hostProcess: boolean;
            runAsUserName: string;
        }

        export interface HelmChartStatus {
            conditions: outputs.helm.v1.HelmChartStatusConditions[];
            jobName: string;
        }

        export interface HelmChartStatusConditions {
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface HelmChartStatusConditionsPatch {
            message: string;
            reason: string;
            status: string;
            type: string;
        }

        export interface HelmChartStatusPatch {
            conditions: outputs.helm.v1.HelmChartStatusConditionsPatch[];
            jobName: string;
        }

    }
}

export namespace hub {
    export namespace v1alpha1 {
        /**
         * API defines an HTTP interface that is exposed to external clients. It specifies the supported versions
         * and provides instructions for accessing its documentation. Once instantiated, an API object is associated
         * with an Ingress, IngressRoute, or HTTPRoute resource, enabling the exposure of the described API to the outside world.
         */
        export interface API {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "API";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APISpec;
            status: outputs.hub.v1alpha1.APIStatus;
        }

        /**
         * APIAccess defines who can access to a set of APIs.
         */
        export interface APIAccess {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "APIAccess";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APIAccessSpec;
            status: outputs.hub.v1alpha1.APIAccessStatus;
        }

        /**
         * The desired behavior of this APIAccess.
         */
        export interface APIAccessSpec {
            /**
             * APIBundles defines a set of APIBundle that will be accessible to the configured audience.
             * Multiple APIAccesses can select the same APIBundles.
             */
            apiBundles: outputs.hub.v1alpha1.APIAccessSpecApiBundles[];
            apiPlan: outputs.hub.v1alpha1.APIAccessSpecApiPlan;
            apiSelector: outputs.hub.v1alpha1.APIAccessSpecApiSelector;
            /**
             * APIs defines a set of APIs that will be accessible to the configured audience.
             * Multiple APIAccesses can select the same APIs.
             * When combined with APISelector, this set of APIs is appended to the matching APIs.
             */
            apis: outputs.hub.v1alpha1.APIAccessSpecApis[];
            /**
             * Everyone indicates that all users will have access to the selected APIs.
             */
            everyone: boolean;
            /**
             * Groups are the consumer groups that will gain access to the selected APIs.
             */
            groups: string[];
            operationFilter: outputs.hub.v1alpha1.APIAccessSpecOperationFilter;
            /**
             * Weight specifies the evaluation order of the plan.
             */
            weight: number;
        }

        /**
         * APIBundleReference references an APIBundle.
         */
        export interface APIAccessSpecApiBundles {
            /**
             * Name of the APIBundle.
             */
            name: string;
        }

        /**
         * APIBundleReference references an APIBundle.
         */
        export interface APIAccessSpecApiBundlesPatch {
            /**
             * Name of the APIBundle.
             */
            name: string;
        }

        /**
         * APIPlan defines which APIPlan will be used.
         */
        export interface APIAccessSpecApiPlan {
            /**
             * Name of the APIPlan.
             */
            name: string;
        }

        /**
         * APIPlan defines which APIPlan will be used.
         */
        export interface APIAccessSpecApiPlanPatch {
            /**
             * Name of the APIPlan.
             */
            name: string;
        }

        /**
         * APISelector selects the APIs that will be accessible to the configured audience.
         * Multiple APIAccesses can select the same set of APIs.
         * This field is optional and follows standard label selector semantics.
         * An empty APISelector matches any API.
         */
        export interface APIAccessSpecApiSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.hub.v1alpha1.APIAccessSpecApiSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface APIAccessSpecApiSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface APIAccessSpecApiSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * APISelector selects the APIs that will be accessible to the configured audience.
         * Multiple APIAccesses can select the same set of APIs.
         * This field is optional and follows standard label selector semantics.
         * An empty APISelector matches any API.
         */
        export interface APIAccessSpecApiSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.hub.v1alpha1.APIAccessSpecApiSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * APIReference references an API.
         */
        export interface APIAccessSpecApis {
            /**
             * Name of the API.
             */
            name: string;
        }

        /**
         * APIReference references an API.
         */
        export interface APIAccessSpecApisPatch {
            /**
             * Name of the API.
             */
            name: string;
        }

        /**
         * OperationFilter specifies the allowed operations on APIs and APIVersions.
         * If not set, all operations are available.
         * An empty OperationFilter prohibits all operations.
         */
        export interface APIAccessSpecOperationFilter {
            /**
             * Include defines the names of OperationSets that will be accessible.
             */
            include: string[];
        }

        /**
         * OperationFilter specifies the allowed operations on APIs and APIVersions.
         * If not set, all operations are available.
         * An empty OperationFilter prohibits all operations.
         */
        export interface APIAccessSpecOperationFilterPatch {
            /**
             * Include defines the names of OperationSets that will be accessible.
             */
            include: string[];
        }

        /**
         * The desired behavior of this APIAccess.
         */
        export interface APIAccessSpecPatch {
            /**
             * APIBundles defines a set of APIBundle that will be accessible to the configured audience.
             * Multiple APIAccesses can select the same APIBundles.
             */
            apiBundles: outputs.hub.v1alpha1.APIAccessSpecApiBundlesPatch[];
            apiPlan: outputs.hub.v1alpha1.APIAccessSpecApiPlanPatch;
            apiSelector: outputs.hub.v1alpha1.APIAccessSpecApiSelectorPatch;
            /**
             * APIs defines a set of APIs that will be accessible to the configured audience.
             * Multiple APIAccesses can select the same APIs.
             * When combined with APISelector, this set of APIs is appended to the matching APIs.
             */
            apis: outputs.hub.v1alpha1.APIAccessSpecApisPatch[];
            /**
             * Everyone indicates that all users will have access to the selected APIs.
             */
            everyone: boolean;
            /**
             * Groups are the consumer groups that will gain access to the selected APIs.
             */
            groups: string[];
            operationFilter: outputs.hub.v1alpha1.APIAccessSpecOperationFilterPatch;
            /**
             * Weight specifies the evaluation order of the plan.
             */
            weight: number;
        }

        /**
         * The current status of this APIAccess.
         */
        export interface APIAccessStatus {
            /**
             * Hash is a hash representing the APIAccess.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this APIAccess.
         */
        export interface APIAccessStatusPatch {
            /**
             * Hash is a hash representing the APIAccess.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * APIBundle defines a set of APIs.
         */
        export interface APIBundle {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "APIBundle";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APIBundleSpec;
            status: outputs.hub.v1alpha1.APIBundleStatus;
        }

        /**
         * The desired behavior of this APIBundle.
         */
        export interface APIBundleSpec {
            apiSelector: outputs.hub.v1alpha1.APIBundleSpecApiSelector;
            /**
             * APIs defines a set of APIs that will be accessible to the configured audience.
             * Multiple APIBundles can select the same APIs.
             * When combined with APISelector, this set of APIs is appended to the matching APIs.
             */
            apis: outputs.hub.v1alpha1.APIBundleSpecApis[];
        }

        /**
         * APISelector selects the APIs that will be accessible to the configured audience.
         * Multiple APIBundles can select the same set of APIs.
         * This field is optional and follows standard label selector semantics.
         * An empty APISelector matches any API.
         */
        export interface APIBundleSpecApiSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.hub.v1alpha1.APIBundleSpecApiSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface APIBundleSpecApiSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface APIBundleSpecApiSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * APISelector selects the APIs that will be accessible to the configured audience.
         * Multiple APIBundles can select the same set of APIs.
         * This field is optional and follows standard label selector semantics.
         * An empty APISelector matches any API.
         */
        export interface APIBundleSpecApiSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.hub.v1alpha1.APIBundleSpecApiSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * APIReference references an API.
         */
        export interface APIBundleSpecApis {
            /**
             * Name of the API.
             */
            name: string;
        }

        /**
         * APIReference references an API.
         */
        export interface APIBundleSpecApisPatch {
            /**
             * Name of the API.
             */
            name: string;
        }

        /**
         * The desired behavior of this APIBundle.
         */
        export interface APIBundleSpecPatch {
            apiSelector: outputs.hub.v1alpha1.APIBundleSpecApiSelectorPatch;
            /**
             * APIs defines a set of APIs that will be accessible to the configured audience.
             * Multiple APIBundles can select the same APIs.
             * When combined with APISelector, this set of APIs is appended to the matching APIs.
             */
            apis: outputs.hub.v1alpha1.APIBundleSpecApisPatch[];
        }

        /**
         * The current status of this APIBundle.
         */
        export interface APIBundleStatus {
            /**
             * Hash is a hash representing the APIBundle.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this APIBundle.
         */
        export interface APIBundleStatusPatch {
            /**
             * Hash is a hash representing the APIBundle.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * APIPlan defines API Plan policy.
         */
        export interface APIPlan {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "APIPlan";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APIPlanSpec;
            status: outputs.hub.v1alpha1.APIPlanStatus;
        }

        /**
         * The desired behavior of this APIPlan.
         */
        export interface APIPlanSpec {
            /**
             * Description describes the plan.
             */
            description: string;
            quota: outputs.hub.v1alpha1.APIPlanSpecQuota;
            rateLimit: outputs.hub.v1alpha1.APIPlanSpecRateLimit;
            /**
             * Title is the human-readable name of the plan.
             */
            title: string;
        }

        /**
         * The desired behavior of this APIPlan.
         */
        export interface APIPlanSpecPatch {
            /**
             * Description describes the plan.
             */
            description: string;
            quota: outputs.hub.v1alpha1.APIPlanSpecQuotaPatch;
            rateLimit: outputs.hub.v1alpha1.APIPlanSpecRateLimitPatch;
            /**
             * Title is the human-readable name of the plan.
             */
            title: string;
        }

        /**
         * Quota defines the quota policy.
         */
        export interface APIPlanSpecQuota {
            /**
             * Limit is the maximum number of token in the bucket.
             */
            limit: number;
            /**
             * Period is the unit of time for the Limit.
             */
            period: string;
        }

        /**
         * Quota defines the quota policy.
         */
        export interface APIPlanSpecQuotaPatch {
            /**
             * Limit is the maximum number of token in the bucket.
             */
            limit: number;
            /**
             * Period is the unit of time for the Limit.
             */
            period: string;
        }

        /**
         * RateLimit defines the rate limit policy.
         */
        export interface APIPlanSpecRateLimit {
            /**
             * Limit is the maximum number of token in the bucket.
             */
            limit: number;
            /**
             * Period is the unit of time for the Limit.
             */
            period: string;
        }

        /**
         * RateLimit defines the rate limit policy.
         */
        export interface APIPlanSpecRateLimitPatch {
            /**
             * Limit is the maximum number of token in the bucket.
             */
            limit: number;
            /**
             * Period is the unit of time for the Limit.
             */
            period: string;
        }

        /**
         * The current status of this APIPlan.
         */
        export interface APIPlanStatus {
            /**
             * Hash is a hash representing the APIPlan.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this APIPlan.
         */
        export interface APIPlanStatusPatch {
            /**
             * Hash is a hash representing the APIPlan.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * APIPortal defines a developer portal for accessing the documentation of APIs.
         */
        export interface APIPortal {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "APIPortal";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APIPortalSpec;
            status: outputs.hub.v1alpha1.APIPortalStatus;
        }

        /**
         * The desired behavior of this APIPortal.
         */
        export interface APIPortalSpec {
            /**
             * Description of the APIPortal.
             */
            description: string;
            /**
             * Title is the public facing name of the APIPortal.
             */
            title: string;
            /**
             * TrustedURLs are the urls that are trusted by the OAuth 2.0 authorization server.
             */
            trustedUrls: string[];
            ui: outputs.hub.v1alpha1.APIPortalSpecUi;
        }

        /**
         * The desired behavior of this APIPortal.
         */
        export interface APIPortalSpecPatch {
            /**
             * Description of the APIPortal.
             */
            description: string;
            /**
             * Title is the public facing name of the APIPortal.
             */
            title: string;
            /**
             * TrustedURLs are the urls that are trusted by the OAuth 2.0 authorization server.
             */
            trustedUrls: string[];
            ui: outputs.hub.v1alpha1.APIPortalSpecUiPatch;
        }

        /**
         * UI holds the UI customization options.
         */
        export interface APIPortalSpecUi {
            /**
             * LogoURL is the public URL of the logo.
             */
            logoUrl: string;
        }

        /**
         * UI holds the UI customization options.
         */
        export interface APIPortalSpecUiPatch {
            /**
             * LogoURL is the public URL of the logo.
             */
            logoUrl: string;
        }

        /**
         * The current status of this APIPortal.
         */
        export interface APIPortalStatus {
            /**
             * Hash is a hash representing the APIPortal.
             */
            hash: string;
            oidc: outputs.hub.v1alpha1.APIPortalStatusOidc;
            syncedAt: string;
            version: string;
        }

        /**
         * OIDC is the OIDC configuration for accessing the exposed APIPortal WebUI.
         */
        export interface APIPortalStatusOidc {
            /**
             * ClientID is the OIDC ClientID for accessing the exposed APIPortal WebUI.
             */
            clientId: string;
            /**
             * CompanyClaim is the name of the JWT claim containing the user company.
             */
            companyClaim: string;
            /**
             * EmailClaim is the name of the JWT claim containing the user email.
             */
            emailClaim: string;
            /**
             * FirstnameClaim is the name of the JWT claim containing the user firstname.
             */
            firstnameClaim: string;
            /**
             * Generic indicates whether or not the APIPortal authentication relies on Generic OIDC.
             */
            generic: boolean;
            /**
             * GroupsClaim is the name of the JWT claim containing the user groups.
             */
            groupsClaim: string;
            /**
             * Issuer is the OIDC issuer for accessing the exposed APIPortal WebUI.
             */
            issuer: string;
            /**
             * LastnameClaim is the name of the JWT claim containing the user lastname.
             */
            lastnameClaim: string;
            /**
             * Scopes is the OIDC scopes for getting user attributes during the authentication to the exposed APIPortal WebUI.
             */
            scopes: string;
            /**
             * SecretName is the name of the secret containing the OIDC ClientSecret for accessing the exposed APIPortal WebUI.
             */
            secretName: string;
            /**
             * SyncedAttributes configure the user attributes to sync.
             */
            syncedAttributes: string[];
            /**
             * UserIDClaim is the name of the JWT claim containing the user ID.
             */
            userIdClaim: string;
        }

        /**
         * OIDC is the OIDC configuration for accessing the exposed APIPortal WebUI.
         */
        export interface APIPortalStatusOidcPatch {
            /**
             * ClientID is the OIDC ClientID for accessing the exposed APIPortal WebUI.
             */
            clientId: string;
            /**
             * CompanyClaim is the name of the JWT claim containing the user company.
             */
            companyClaim: string;
            /**
             * EmailClaim is the name of the JWT claim containing the user email.
             */
            emailClaim: string;
            /**
             * FirstnameClaim is the name of the JWT claim containing the user firstname.
             */
            firstnameClaim: string;
            /**
             * Generic indicates whether or not the APIPortal authentication relies on Generic OIDC.
             */
            generic: boolean;
            /**
             * GroupsClaim is the name of the JWT claim containing the user groups.
             */
            groupsClaim: string;
            /**
             * Issuer is the OIDC issuer for accessing the exposed APIPortal WebUI.
             */
            issuer: string;
            /**
             * LastnameClaim is the name of the JWT claim containing the user lastname.
             */
            lastnameClaim: string;
            /**
             * Scopes is the OIDC scopes for getting user attributes during the authentication to the exposed APIPortal WebUI.
             */
            scopes: string;
            /**
             * SecretName is the name of the secret containing the OIDC ClientSecret for accessing the exposed APIPortal WebUI.
             */
            secretName: string;
            /**
             * SyncedAttributes configure the user attributes to sync.
             */
            syncedAttributes: string[];
            /**
             * UserIDClaim is the name of the JWT claim containing the user ID.
             */
            userIdClaim: string;
        }

        /**
         * The current status of this APIPortal.
         */
        export interface APIPortalStatusPatch {
            /**
             * Hash is a hash representing the APIPortal.
             */
            hash: string;
            oidc: outputs.hub.v1alpha1.APIPortalStatusOidcPatch;
            syncedAt: string;
            version: string;
        }

        /**
         * APIRateLimit defines how group of consumers are rate limited on a set of APIs.
         */
        export interface APIRateLimit {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "APIRateLimit";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APIRateLimitSpec;
            status: outputs.hub.v1alpha1.APIRateLimitStatus;
        }

        /**
         * The desired behavior of this APIRateLimit.
         */
        export interface APIRateLimitSpec {
            apiSelector: outputs.hub.v1alpha1.APIRateLimitSpecApiSelector;
            /**
             * APIs defines a set of APIs that will be rate limited.
             * Multiple APIRateLimits can select the same APIs.
             * When combined with APISelector, this set of APIs is appended to the matching APIs.
             */
            apis: outputs.hub.v1alpha1.APIRateLimitSpecApis[];
            /**
             * Everyone indicates that all users will, by default, be rate limited with this configuration.
             * If an APIRateLimit explicitly target a group, the default rate limit will be ignored.
             */
            everyone: boolean;
            /**
             * Groups are the consumer groups that will be rate limited.
             * Multiple APIRateLimits can target the same set of consumer groups, the most restrictive one applies.
             * When a consumer belongs to multiple groups, the least restrictive APIRateLimit applies.
             */
            groups: string[];
            /**
             * Limit is the maximum number of token in the bucket.
             */
            limit: number;
            /**
             * Period is the unit of time for the Limit.
             */
            period: string;
            /**
             * Strategy defines how the bucket state will be synchronized between the different Traefik Hub instances.
             * It can be, either "local" or "distributed".
             */
            strategy: string;
        }

        /**
         * APISelector selects the APIs that will be rate limited.
         * Multiple APIRateLimits can select the same set of APIs.
         * This field is optional and follows standard label selector semantics.
         * An empty APISelector matches any API.
         */
        export interface APIRateLimitSpecApiSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.hub.v1alpha1.APIRateLimitSpecApiSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface APIRateLimitSpecApiSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface APIRateLimitSpecApiSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * APISelector selects the APIs that will be rate limited.
         * Multiple APIRateLimits can select the same set of APIs.
         * This field is optional and follows standard label selector semantics.
         * An empty APISelector matches any API.
         */
        export interface APIRateLimitSpecApiSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.hub.v1alpha1.APIRateLimitSpecApiSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * APIReference references an API.
         */
        export interface APIRateLimitSpecApis {
            /**
             * Name of the API.
             */
            name: string;
        }

        /**
         * APIReference references an API.
         */
        export interface APIRateLimitSpecApisPatch {
            /**
             * Name of the API.
             */
            name: string;
        }

        /**
         * The desired behavior of this APIRateLimit.
         */
        export interface APIRateLimitSpecPatch {
            apiSelector: outputs.hub.v1alpha1.APIRateLimitSpecApiSelectorPatch;
            /**
             * APIs defines a set of APIs that will be rate limited.
             * Multiple APIRateLimits can select the same APIs.
             * When combined with APISelector, this set of APIs is appended to the matching APIs.
             */
            apis: outputs.hub.v1alpha1.APIRateLimitSpecApisPatch[];
            /**
             * Everyone indicates that all users will, by default, be rate limited with this configuration.
             * If an APIRateLimit explicitly target a group, the default rate limit will be ignored.
             */
            everyone: boolean;
            /**
             * Groups are the consumer groups that will be rate limited.
             * Multiple APIRateLimits can target the same set of consumer groups, the most restrictive one applies.
             * When a consumer belongs to multiple groups, the least restrictive APIRateLimit applies.
             */
            groups: string[];
            /**
             * Limit is the maximum number of token in the bucket.
             */
            limit: number;
            /**
             * Period is the unit of time for the Limit.
             */
            period: string;
            /**
             * Strategy defines how the bucket state will be synchronized between the different Traefik Hub instances.
             * It can be, either "local" or "distributed".
             */
            strategy: string;
        }

        /**
         * The current status of this APIRateLimit.
         */
        export interface APIRateLimitStatus {
            /**
             * Hash is a hash representing the APIRateLimit.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this APIRateLimit.
         */
        export interface APIRateLimitStatusPatch {
            /**
             * Hash is a hash representing the APIRateLimit.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * APISpec describes the API.
         */
        export interface APISpec {
            openApiSpec: outputs.hub.v1alpha1.APISpecOpenApiSpec;
            /**
             * Versions are the different APIVersions available.
             */
            versions: outputs.hub.v1alpha1.APISpecVersions[];
        }

        /**
         * OpenAPISpec defines the API contract as an OpenAPI specification.
         */
        export interface APISpecOpenApiSpec {
            /**
             * OperationSets defines the sets of operations to be referenced for granular filtering in APIAccesses.
             */
            operationSets: outputs.hub.v1alpha1.APISpecOpenApiSpecOperationSets[];
            override: outputs.hub.v1alpha1.APISpecOpenApiSpecOverride;
            /**
             * Path specifies the endpoint path within the Kubernetes Service where the OpenAPI specification can be obtained.
             * The Service queried is determined by the associated Ingress, IngressRoute, or HTTPRoute resource to which the API is attached.
             * It's important to note that this option is incompatible if the Ingress or IngressRoute specifies multiple backend services.
             * The Path must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            path: string;
            /**
             * URL is a Traefik Hub agent accessible URL for obtaining the OpenAPI specification.
             * The URL must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            url: string;
        }

        /**
         * OperationSet gives a name to a set of matching OpenAPI operations.
         * This set of operations can then be referenced for granular filtering in APIAccesses.
         */
        export interface APISpecOpenApiSpecOperationSets {
            /**
             * Matchers defines a list of alternative rules for matching OpenAPI operations.
             */
            matchers: outputs.hub.v1alpha1.APISpecOpenApiSpecOperationSetsMatchers[];
            /**
             * Name is the name of the OperationSet to reference in APIAccesses.
             */
            name: string;
        }

        /**
         * OperationMatcher defines criteria for matching an OpenAPI operation.
         */
        export interface APISpecOpenApiSpecOperationSetsMatchers {
            /**
             * Methods specifies the HTTP methods to be included for selection.
             */
            methods: string[];
            /**
             * Path specifies the exact path of the operations to select.
             */
            path: string;
            /**
             * PathPrefix specifies the path prefix of the operations to select.
             */
            pathPrefix: string;
            /**
             * PathRegex specifies a regular expression pattern for matching operations based on their paths.
             */
            pathRegex: string;
        }

        /**
         * OperationMatcher defines criteria for matching an OpenAPI operation.
         */
        export interface APISpecOpenApiSpecOperationSetsMatchersPatch {
            /**
             * Methods specifies the HTTP methods to be included for selection.
             */
            methods: string[];
            /**
             * Path specifies the exact path of the operations to select.
             */
            path: string;
            /**
             * PathPrefix specifies the path prefix of the operations to select.
             */
            pathPrefix: string;
            /**
             * PathRegex specifies a regular expression pattern for matching operations based on their paths.
             */
            pathRegex: string;
        }

        /**
         * OperationSet gives a name to a set of matching OpenAPI operations.
         * This set of operations can then be referenced for granular filtering in APIAccesses.
         */
        export interface APISpecOpenApiSpecOperationSetsPatch {
            /**
             * Matchers defines a list of alternative rules for matching OpenAPI operations.
             */
            matchers: outputs.hub.v1alpha1.APISpecOpenApiSpecOperationSetsMatchersPatch[];
            /**
             * Name is the name of the OperationSet to reference in APIAccesses.
             */
            name: string;
        }

        /**
         * Override holds data used to override OpenAPI specification.
         */
        export interface APISpecOpenApiSpecOverride {
            servers: outputs.hub.v1alpha1.APISpecOpenApiSpecOverrideServers[];
        }

        /**
         * Override holds data used to override OpenAPI specification.
         */
        export interface APISpecOpenApiSpecOverridePatch {
            servers: outputs.hub.v1alpha1.APISpecOpenApiSpecOverrideServersPatch[];
        }

        export interface APISpecOpenApiSpecOverrideServers {
            url: string;
        }

        export interface APISpecOpenApiSpecOverrideServersPatch {
            url: string;
        }

        /**
         * OpenAPISpec defines the API contract as an OpenAPI specification.
         */
        export interface APISpecOpenApiSpecPatch {
            /**
             * OperationSets defines the sets of operations to be referenced for granular filtering in APIAccesses.
             */
            operationSets: outputs.hub.v1alpha1.APISpecOpenApiSpecOperationSetsPatch[];
            override: outputs.hub.v1alpha1.APISpecOpenApiSpecOverridePatch;
            /**
             * Path specifies the endpoint path within the Kubernetes Service where the OpenAPI specification can be obtained.
             * The Service queried is determined by the associated Ingress, IngressRoute, or HTTPRoute resource to which the API is attached.
             * It's important to note that this option is incompatible if the Ingress or IngressRoute specifies multiple backend services.
             * The Path must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            path: string;
            /**
             * URL is a Traefik Hub agent accessible URL for obtaining the OpenAPI specification.
             * The URL must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            url: string;
        }

        /**
         * APISpec describes the API.
         */
        export interface APISpecPatch {
            openApiSpec: outputs.hub.v1alpha1.APISpecOpenApiSpecPatch;
            /**
             * Versions are the different APIVersions available.
             */
            versions: outputs.hub.v1alpha1.APISpecVersionsPatch[];
        }

        /**
         * APIVersionRef references an APIVersion.
         */
        export interface APISpecVersions {
            /**
             * Name of the APIVersion.
             */
            name: string;
        }

        /**
         * APIVersionRef references an APIVersion.
         */
        export interface APISpecVersionsPatch {
            /**
             * Name of the APIVersion.
             */
            name: string;
        }

        /**
         * The current status of this API.
         */
        export interface APIStatus {
            /**
             * Hash is a hash representing the API.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this API.
         */
        export interface APIStatusPatch {
            /**
             * Hash is a hash representing the API.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * APIVersion defines a version of an API.
         */
        export interface APIVersion {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "APIVersion";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.APIVersionSpec;
            status: outputs.hub.v1alpha1.APIVersionStatus;
        }

        /**
         * The desired behavior of this APIVersion.
         */
        export interface APIVersionSpec {
            openApiSpec: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpec;
            /**
             * Release is the version number of the API.
             * This value must follow the SemVer format: https://semver.org/
             */
            release: string;
            /**
             * Title is the public facing name of the APIVersion.
             */
            title: string;
        }

        /**
         * OpenAPISpec defines the API contract as an OpenAPI specification.
         */
        export interface APIVersionSpecOpenApiSpec {
            /**
             * OperationSets defines the sets of operations to be referenced for granular filtering in APIAccesses.
             */
            operationSets: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOperationSets[];
            override: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOverride;
            /**
             * Path specifies the endpoint path within the Kubernetes Service where the OpenAPI specification can be obtained.
             * The Service queried is determined by the associated Ingress, IngressRoute, or HTTPRoute resource to which the API is attached.
             * It's important to note that this option is incompatible if the Ingress or IngressRoute specifies multiple backend services.
             * The Path must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            path: string;
            /**
             * URL is a Traefik Hub agent accessible URL for obtaining the OpenAPI specification.
             * The URL must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            url: string;
        }

        /**
         * OperationSet gives a name to a set of matching OpenAPI operations.
         * This set of operations can then be referenced for granular filtering in APIAccesses.
         */
        export interface APIVersionSpecOpenApiSpecOperationSets {
            /**
             * Matchers defines a list of alternative rules for matching OpenAPI operations.
             */
            matchers: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOperationSetsMatchers[];
            /**
             * Name is the name of the OperationSet to reference in APIAccesses.
             */
            name: string;
        }

        /**
         * OperationMatcher defines criteria for matching an OpenAPI operation.
         */
        export interface APIVersionSpecOpenApiSpecOperationSetsMatchers {
            /**
             * Methods specifies the HTTP methods to be included for selection.
             */
            methods: string[];
            /**
             * Path specifies the exact path of the operations to select.
             */
            path: string;
            /**
             * PathPrefix specifies the path prefix of the operations to select.
             */
            pathPrefix: string;
            /**
             * PathRegex specifies a regular expression pattern for matching operations based on their paths.
             */
            pathRegex: string;
        }

        /**
         * OperationMatcher defines criteria for matching an OpenAPI operation.
         */
        export interface APIVersionSpecOpenApiSpecOperationSetsMatchersPatch {
            /**
             * Methods specifies the HTTP methods to be included for selection.
             */
            methods: string[];
            /**
             * Path specifies the exact path of the operations to select.
             */
            path: string;
            /**
             * PathPrefix specifies the path prefix of the operations to select.
             */
            pathPrefix: string;
            /**
             * PathRegex specifies a regular expression pattern for matching operations based on their paths.
             */
            pathRegex: string;
        }

        /**
         * OperationSet gives a name to a set of matching OpenAPI operations.
         * This set of operations can then be referenced for granular filtering in APIAccesses.
         */
        export interface APIVersionSpecOpenApiSpecOperationSetsPatch {
            /**
             * Matchers defines a list of alternative rules for matching OpenAPI operations.
             */
            matchers: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOperationSetsMatchersPatch[];
            /**
             * Name is the name of the OperationSet to reference in APIAccesses.
             */
            name: string;
        }

        /**
         * Override holds data used to override OpenAPI specification.
         */
        export interface APIVersionSpecOpenApiSpecOverride {
            servers: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOverrideServers[];
        }

        /**
         * Override holds data used to override OpenAPI specification.
         */
        export interface APIVersionSpecOpenApiSpecOverridePatch {
            servers: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOverrideServersPatch[];
        }

        export interface APIVersionSpecOpenApiSpecOverrideServers {
            url: string;
        }

        export interface APIVersionSpecOpenApiSpecOverrideServersPatch {
            url: string;
        }

        /**
         * OpenAPISpec defines the API contract as an OpenAPI specification.
         */
        export interface APIVersionSpecOpenApiSpecPatch {
            /**
             * OperationSets defines the sets of operations to be referenced for granular filtering in APIAccesses.
             */
            operationSets: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOperationSetsPatch[];
            override: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecOverridePatch;
            /**
             * Path specifies the endpoint path within the Kubernetes Service where the OpenAPI specification can be obtained.
             * The Service queried is determined by the associated Ingress, IngressRoute, or HTTPRoute resource to which the API is attached.
             * It's important to note that this option is incompatible if the Ingress or IngressRoute specifies multiple backend services.
             * The Path must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            path: string;
            /**
             * URL is a Traefik Hub agent accessible URL for obtaining the OpenAPI specification.
             * The URL must be accessible via a GET request method and should serve a YAML or JSON document containing the OpenAPI specification.
             */
            url: string;
        }

        /**
         * The desired behavior of this APIVersion.
         */
        export interface APIVersionSpecPatch {
            openApiSpec: outputs.hub.v1alpha1.APIVersionSpecOpenApiSpecPatch;
            /**
             * Release is the version number of the API.
             * This value must follow the SemVer format: https://semver.org/
             */
            release: string;
            /**
             * Title is the public facing name of the APIVersion.
             */
            title: string;
        }

        /**
         * The current status of this APIVersion.
         */
        export interface APIVersionStatus {
            /**
             * Hash is a hash representing the APIVersion.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this APIVersion.
         */
        export interface APIVersionStatusPatch {
            /**
             * Hash is a hash representing the APIVersion.
             */
            hash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * AccessControlPolicy defines an access control policy.
         */
        export interface AccessControlPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "hub.traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "AccessControlPolicy";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.hub.v1alpha1.AccessControlPolicySpec;
            status: outputs.hub.v1alpha1.AccessControlPolicyStatus;
        }

        /**
         * AccessControlPolicySpec configures an access control policy.
         */
        export interface AccessControlPolicySpec {
            apiKey: outputs.hub.v1alpha1.AccessControlPolicySpecApiKey;
            basicAuth: outputs.hub.v1alpha1.AccessControlPolicySpecBasicAuth;
            jwt: outputs.hub.v1alpha1.AccessControlPolicySpecJwt;
            oAuthIntro: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntro;
            oidc: outputs.hub.v1alpha1.AccessControlPolicySpecOidc;
            oidcGoogle: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogle;
        }

        /**
         * AccessControlPolicyAPIKey configure an APIKey control policy.
         */
        export interface AccessControlPolicySpecApiKey {
            /**
             * ForwardHeaders instructs the middleware to forward key metadata as header values upon successful authentication.
             */
            forwardHeaders: {[key: string]: string};
            keySource: outputs.hub.v1alpha1.AccessControlPolicySpecApiKeyKeySource;
            /**
             * Keys define the set of authorized keys to access a protected resource.
             */
            keys: outputs.hub.v1alpha1.AccessControlPolicySpecApiKeyKeys[];
        }

        /**
         * KeySource defines how to extract API keys from requests.
         */
        export interface AccessControlPolicySpecApiKeyKeySource {
            /**
             * Cookie is the name of a cookie.
             */
            cookie: string;
            /**
             * Header is the name of a header.
             */
            header: string;
            /**
             * HeaderAuthScheme sets an optional auth scheme when Header is set to "Authorization".
             * If set, this scheme is removed from the token, and all requests not including it are dropped.
             */
            headerAuthScheme: string;
            /**
             * Query is the name of a query parameter.
             */
            query: string;
        }

        /**
         * KeySource defines how to extract API keys from requests.
         */
        export interface AccessControlPolicySpecApiKeyKeySourcePatch {
            /**
             * Cookie is the name of a cookie.
             */
            cookie: string;
            /**
             * Header is the name of a header.
             */
            header: string;
            /**
             * HeaderAuthScheme sets an optional auth scheme when Header is set to "Authorization".
             * If set, this scheme is removed from the token, and all requests not including it are dropped.
             */
            headerAuthScheme: string;
            /**
             * Query is the name of a query parameter.
             */
            query: string;
        }

        /**
         * AccessControlPolicyAPIKeyKey defines an API key.
         */
        export interface AccessControlPolicySpecApiKeyKeys {
            /**
             * ID is the unique identifier of the key.
             */
            id: string;
            /**
             * Metadata holds arbitrary metadata for this key, can be used by ForwardHeaders.
             */
            metadata: {[key: string]: string};
            /**
             * Value is the SHAKE-256 hash (using 64 bytes) of the API key.
             */
            value: string;
        }

        /**
         * AccessControlPolicyAPIKeyKey defines an API key.
         */
        export interface AccessControlPolicySpecApiKeyKeysPatch {
            /**
             * ID is the unique identifier of the key.
             */
            id: string;
            /**
             * Metadata holds arbitrary metadata for this key, can be used by ForwardHeaders.
             */
            metadata: {[key: string]: string};
            /**
             * Value is the SHAKE-256 hash (using 64 bytes) of the API key.
             */
            value: string;
        }

        /**
         * AccessControlPolicyAPIKey configure an APIKey control policy.
         */
        export interface AccessControlPolicySpecApiKeyPatch {
            /**
             * ForwardHeaders instructs the middleware to forward key metadata as header values upon successful authentication.
             */
            forwardHeaders: {[key: string]: string};
            keySource: outputs.hub.v1alpha1.AccessControlPolicySpecApiKeyKeySourcePatch;
            /**
             * Keys define the set of authorized keys to access a protected resource.
             */
            keys: outputs.hub.v1alpha1.AccessControlPolicySpecApiKeyKeysPatch[];
        }

        /**
         * AccessControlPolicyBasicAuth holds the HTTP basic authentication configuration.
         */
        export interface AccessControlPolicySpecBasicAuth {
            forwardUsernameHeader: string;
            realm: string;
            stripAuthorizationHeader: boolean;
            users: string[];
        }

        /**
         * AccessControlPolicyBasicAuth holds the HTTP basic authentication configuration.
         */
        export interface AccessControlPolicySpecBasicAuthPatch {
            forwardUsernameHeader: string;
            realm: string;
            stripAuthorizationHeader: boolean;
            users: string[];
        }

        /**
         * AccessControlPolicyJWT configures a JWT access control policy.
         */
        export interface AccessControlPolicySpecJwt {
            claims: string;
            forwardHeaders: {[key: string]: string};
            jwksFile: string;
            jwksUrl: string;
            publicKey: string;
            signingSecret: string;
            signingSecretBase64Encoded: boolean;
            stripAuthorizationHeader: boolean;
            tokenQueryKey: string;
        }

        /**
         * AccessControlPolicyJWT configures a JWT access control policy.
         */
        export interface AccessControlPolicySpecJwtPatch {
            claims: string;
            forwardHeaders: {[key: string]: string};
            jwksFile: string;
            jwksUrl: string;
            publicKey: string;
            signingSecret: string;
            signingSecretBase64Encoded: boolean;
            stripAuthorizationHeader: boolean;
            tokenQueryKey: string;
        }

        /**
         * AccessControlOAuthIntro configures an OAuth 2.0 Token Introspection access control policy.
         */
        export interface AccessControlPolicySpecOAuthIntro {
            claims: string;
            clientConfig: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroClientConfig;
            forwardHeaders: {[key: string]: string};
            tokenSource: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroTokenSource;
        }

        /**
         * AccessControlOAuthIntroClientConfig configures the OAuth 2.0 client for issuing token introspection requests.
         */
        export interface AccessControlPolicySpecOAuthIntroClientConfig {
            /**
             * Headers to set when sending requests to the Authorization Server.
             */
            headers: {[key: string]: string};
            /**
             * MaxRetries defines the number of retries for introspection requests.
             */
            maxRetries: number;
            /**
             * TimeoutSeconds configures the maximum amount of seconds to wait before giving up on requests.
             */
            timeoutSeconds: number;
            tls: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroClientConfigTls;
            /**
             * TokenTypeHint is a hint to pass to the Authorization Server.
             * See https://tools.ietf.org/html/rfc7662#section-2.1 for more information.
             */
            tokenTypeHint: string;
            /**
             * URL of the Authorization Server.
             */
            url: string;
        }

        /**
         * AccessControlOAuthIntroClientConfig configures the OAuth 2.0 client for issuing token introspection requests.
         */
        export interface AccessControlPolicySpecOAuthIntroClientConfigPatch {
            /**
             * Headers to set when sending requests to the Authorization Server.
             */
            headers: {[key: string]: string};
            /**
             * MaxRetries defines the number of retries for introspection requests.
             */
            maxRetries: number;
            /**
             * TimeoutSeconds configures the maximum amount of seconds to wait before giving up on requests.
             */
            timeoutSeconds: number;
            tls: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroClientConfigTlsPatch;
            /**
             * TokenTypeHint is a hint to pass to the Authorization Server.
             * See https://tools.ietf.org/html/rfc7662#section-2.1 for more information.
             */
            tokenTypeHint: string;
            /**
             * URL of the Authorization Server.
             */
            url: string;
        }

        /**
         * TLS configures TLS communication with the Authorization Server.
         */
        export interface AccessControlPolicySpecOAuthIntroClientConfigTls {
            /**
             * CA sets the CA bundle used to sign the Authorization Server certificate.
             */
            ca: string;
            /**
             * InsecureSkipVerify skips the Authorization Server certificate validation.
             * For testing purposes only, do not use in production.
             */
            insecureSkipVerify: boolean;
        }

        /**
         * TLS configures TLS communication with the Authorization Server.
         */
        export interface AccessControlPolicySpecOAuthIntroClientConfigTlsPatch {
            /**
             * CA sets the CA bundle used to sign the Authorization Server certificate.
             */
            ca: string;
            /**
             * InsecureSkipVerify skips the Authorization Server certificate validation.
             * For testing purposes only, do not use in production.
             */
            insecureSkipVerify: boolean;
        }

        /**
         * AccessControlOAuthIntro configures an OAuth 2.0 Token Introspection access control policy.
         */
        export interface AccessControlPolicySpecOAuthIntroPatch {
            claims: string;
            clientConfig: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroClientConfigPatch;
            forwardHeaders: {[key: string]: string};
            tokenSource: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroTokenSourcePatch;
        }

        /**
         * TokenSource describes how to extract tokens from HTTP requests.
         * If multiple sources are set, the order is the following: header > query > cookie.
         */
        export interface AccessControlPolicySpecOAuthIntroTokenSource {
            /**
             * Cookie is the name of a cookie.
             */
            cookie: string;
            /**
             * Header is the name of a header.
             */
            header: string;
            /**
             * HeaderAuthScheme sets an optional auth scheme when Header is set to "Authorization".
             * If set, this scheme is removed from the token, and all requests not including it are dropped.
             */
            headerAuthScheme: string;
            /**
             * Query is the name of a query parameter.
             */
            query: string;
        }

        /**
         * TokenSource describes how to extract tokens from HTTP requests.
         * If multiple sources are set, the order is the following: header > query > cookie.
         */
        export interface AccessControlPolicySpecOAuthIntroTokenSourcePatch {
            /**
             * Cookie is the name of a cookie.
             */
            cookie: string;
            /**
             * Header is the name of a header.
             */
            header: string;
            /**
             * HeaderAuthScheme sets an optional auth scheme when Header is set to "Authorization".
             * If set, this scheme is removed from the token, and all requests not including it are dropped.
             */
            headerAuthScheme: string;
            /**
             * Query is the name of a query parameter.
             */
            query: string;
        }

        /**
         * AccessControlPolicyOIDC holds the OIDC authentication configuration.
         */
        export interface AccessControlPolicySpecOidc {
            authParams: {[key: string]: string};
            claims: string;
            clientId: string;
            disableAuthRedirectionPaths: string[];
            forwardHeaders: {[key: string]: string};
            issuer: string;
            logoutUrl: string;
            redirectUrl: string;
            scopes: string[];
            secret: outputs.hub.v1alpha1.AccessControlPolicySpecOidcSecret;
            session: outputs.hub.v1alpha1.AccessControlPolicySpecOidcSession;
            stateCookie: outputs.hub.v1alpha1.AccessControlPolicySpecOidcStateCookie;
        }

        /**
         * AccessControlPolicyOIDCGoogle holds the Google OIDC authentication configuration.
         */
        export interface AccessControlPolicySpecOidcGoogle {
            authParams: {[key: string]: string};
            clientId: string;
            /**
             * Emails are the allowed emails to connect.
             */
            emails: string[];
            forwardHeaders: {[key: string]: string};
            logoutUrl: string;
            redirectUrl: string;
            secret: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogleSecret;
            session: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogleSession;
            stateCookie: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogleStateCookie;
        }

        /**
         * AccessControlPolicyOIDCGoogle holds the Google OIDC authentication configuration.
         */
        export interface AccessControlPolicySpecOidcGooglePatch {
            authParams: {[key: string]: string};
            clientId: string;
            /**
             * Emails are the allowed emails to connect.
             */
            emails: string[];
            forwardHeaders: {[key: string]: string};
            logoutUrl: string;
            redirectUrl: string;
            secret: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogleSecretPatch;
            session: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogleSessionPatch;
            stateCookie: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGoogleStateCookiePatch;
        }

        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret
         * in any namespace
         */
        export interface AccessControlPolicySpecOidcGoogleSecret {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name: string;
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace: string;
        }

        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret
         * in any namespace
         */
        export interface AccessControlPolicySpecOidcGoogleSecretPatch {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name: string;
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace: string;
        }

        /**
         * Session holds session configuration.
         */
        export interface AccessControlPolicySpecOidcGoogleSession {
            domain: string;
            path: string;
            refresh: boolean;
            sameSite: string;
            secure: boolean;
        }

        /**
         * Session holds session configuration.
         */
        export interface AccessControlPolicySpecOidcGoogleSessionPatch {
            domain: string;
            path: string;
            refresh: boolean;
            sameSite: string;
            secure: boolean;
        }

        /**
         * StateCookie holds state cookie configuration.
         */
        export interface AccessControlPolicySpecOidcGoogleStateCookie {
            domain: string;
            path: string;
            sameSite: string;
            secure: boolean;
        }

        /**
         * StateCookie holds state cookie configuration.
         */
        export interface AccessControlPolicySpecOidcGoogleStateCookiePatch {
            domain: string;
            path: string;
            sameSite: string;
            secure: boolean;
        }

        /**
         * AccessControlPolicyOIDC holds the OIDC authentication configuration.
         */
        export interface AccessControlPolicySpecOidcPatch {
            authParams: {[key: string]: string};
            claims: string;
            clientId: string;
            disableAuthRedirectionPaths: string[];
            forwardHeaders: {[key: string]: string};
            issuer: string;
            logoutUrl: string;
            redirectUrl: string;
            scopes: string[];
            secret: outputs.hub.v1alpha1.AccessControlPolicySpecOidcSecretPatch;
            session: outputs.hub.v1alpha1.AccessControlPolicySpecOidcSessionPatch;
            stateCookie: outputs.hub.v1alpha1.AccessControlPolicySpecOidcStateCookiePatch;
        }

        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret
         * in any namespace
         */
        export interface AccessControlPolicySpecOidcSecret {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name: string;
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace: string;
        }

        /**
         * SecretReference represents a Secret Reference. It has enough information to retrieve secret
         * in any namespace
         */
        export interface AccessControlPolicySpecOidcSecretPatch {
            /**
             * name is unique within a namespace to reference a secret resource.
             */
            name: string;
            /**
             * namespace defines the space within which the secret name must be unique.
             */
            namespace: string;
        }

        /**
         * Session holds session configuration.
         */
        export interface AccessControlPolicySpecOidcSession {
            domain: string;
            path: string;
            refresh: boolean;
            sameSite: string;
            secure: boolean;
        }

        /**
         * Session holds session configuration.
         */
        export interface AccessControlPolicySpecOidcSessionPatch {
            domain: string;
            path: string;
            refresh: boolean;
            sameSite: string;
            secure: boolean;
        }

        /**
         * StateCookie holds state cookie configuration.
         */
        export interface AccessControlPolicySpecOidcStateCookie {
            domain: string;
            path: string;
            sameSite: string;
            secure: boolean;
        }

        /**
         * StateCookie holds state cookie configuration.
         */
        export interface AccessControlPolicySpecOidcStateCookiePatch {
            domain: string;
            path: string;
            sameSite: string;
            secure: boolean;
        }

        /**
         * AccessControlPolicySpec configures an access control policy.
         */
        export interface AccessControlPolicySpecPatch {
            apiKey: outputs.hub.v1alpha1.AccessControlPolicySpecApiKeyPatch;
            basicAuth: outputs.hub.v1alpha1.AccessControlPolicySpecBasicAuthPatch;
            jwt: outputs.hub.v1alpha1.AccessControlPolicySpecJwtPatch;
            oAuthIntro: outputs.hub.v1alpha1.AccessControlPolicySpecOAuthIntroPatch;
            oidc: outputs.hub.v1alpha1.AccessControlPolicySpecOidcPatch;
            oidcGoogle: outputs.hub.v1alpha1.AccessControlPolicySpecOidcGooglePatch;
        }

        /**
         * The current status of this access control policy.
         */
        export interface AccessControlPolicyStatus {
            specHash: string;
            syncedAt: string;
            version: string;
        }

        /**
         * The current status of this access control policy.
         */
        export interface AccessControlPolicyStatusPatch {
            specHash: string;
            syncedAt: string;
            version: string;
        }

    }
}

export namespace k3s {
    export namespace v1 {
        export interface Addon {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "k3s.cattle.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Addon";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.k3s.v1.AddonSpec;
        }

        export interface AddonSpec {
            checksum: string;
            source: string;
        }

        export interface AddonSpecPatch {
            checksum: string;
            source: string;
        }

        export interface ETCDSnapshotFile {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "k3s.cattle.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ETCDSnapshotFile";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.k3s.v1.ETCDSnapshotFileSpec;
            status: outputs.k3s.v1.ETCDSnapshotFileStatus;
        }

        export interface ETCDSnapshotFileSpec {
            location: string;
            metadata: {[key: string]: string};
            nodeName: string;
            s3: outputs.k3s.v1.ETCDSnapshotFileSpecS3;
            snapshotName: string;
        }

        export interface ETCDSnapshotFileSpecPatch {
            location: string;
            metadata: {[key: string]: string};
            nodeName: string;
            s3: outputs.k3s.v1.ETCDSnapshotFileSpecS3Patch;
            snapshotName: string;
        }

        export interface ETCDSnapshotFileSpecS3 {
            bucket: string;
            endpoint: string;
            endpointCA: string;
            insecure: boolean;
            prefix: string;
            region: string;
            skipSSLVerify: boolean;
        }

        export interface ETCDSnapshotFileSpecS3Patch {
            bucket: string;
            endpoint: string;
            endpointCA: string;
            insecure: boolean;
            prefix: string;
            region: string;
            skipSSLVerify: boolean;
        }

        export interface ETCDSnapshotFileStatus {
            creationTime: string;
            error: outputs.k3s.v1.ETCDSnapshotFileStatusError;
            readyToUse: boolean;
            size: string;
        }

        export interface ETCDSnapshotFileStatusError {
            message: string;
            time: string;
        }

        export interface ETCDSnapshotFileStatusErrorPatch {
            message: string;
            time: string;
        }

        export interface ETCDSnapshotFileStatusPatch {
            creationTime: string;
            error: outputs.k3s.v1.ETCDSnapshotFileStatusErrorPatch;
            readyToUse: boolean;
            size: string;
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue: string;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount: number;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion: string;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType: string;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager: string;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation: string;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource: string;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntry[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReference[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations: {[key: string]: string};
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp: string;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds: number;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp: string;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers: string[];
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName: string;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation: number;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels: {[key: string]: string};
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields: outputs.meta.v1.ManagedFieldsEntryPatch[];
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace: string;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences: outputs.meta.v1.OwnerReferencePatch[];
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion: string;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink: string;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion: boolean;
            /**
             * If true, this reference points to the managing controller.
             */
            controller: boolean;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: string;
        }

    }
}

export namespace nfd {
    export namespace v1alpha1 {
        /**
         * NodeFeature resource holds the features discovered for one node in the
         * cluster.
         */
        export interface NodeFeature {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "nfd.k8s-sigs.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "NodeFeature";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.nfd.v1alpha1.NodeFeatureSpec;
        }

        /**
         * NodeFeatureGroup resource holds Node pools by featureGroup
         */
        export interface NodeFeatureGroup {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "nfd.k8s-sigs.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "NodeFeatureGroup";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.nfd.v1alpha1.NodeFeatureGroupSpec;
            status: outputs.nfd.v1alpha1.NodeFeatureGroupStatus;
        }

        /**
         * Spec defines the rules to be evaluated.
         */
        export interface NodeFeatureGroupSpec {
            /**
             * List of rules to evaluate to determine nodes that belong in this group.
             */
            featureGroupRules: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRules[];
        }

        /**
         * GroupRule defines a rule for nodegroup filtering.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRules {
            /**
             * MatchAny specifies a list of matchers one of which must match.
             */
            matchAny: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchAny[];
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchFeatures[];
            /**
             * Name of the rule.
             */
            name: string;
        }

        /**
         * MatchAnyElem specifies one sub-matcher of MatchAny.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchAny {
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeatures[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeatures {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeaturesMatchName;
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeaturesMatchName {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeaturesMatchNamePatch {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeaturesPatch {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeaturesMatchNamePatch;
        }

        /**
         * MatchAnyElem specifies one sub-matcher of MatchAny.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchAnyPatch {
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchAnyMatchFeaturesPatch[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchFeatures {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchFeaturesMatchName;
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchFeaturesMatchName {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchFeaturesMatchNamePatch {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesMatchFeaturesPatch {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchFeaturesMatchNamePatch;
        }

        /**
         * GroupRule defines a rule for nodegroup filtering.
         */
        export interface NodeFeatureGroupSpecFeatureGroupRulesPatch {
            /**
             * MatchAny specifies a list of matchers one of which must match.
             */
            matchAny: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchAnyPatch[];
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesMatchFeaturesPatch[];
            /**
             * Name of the rule.
             */
            name: string;
        }

        /**
         * Spec defines the rules to be evaluated.
         */
        export interface NodeFeatureGroupSpecPatch {
            /**
             * List of rules to evaluate to determine nodes that belong in this group.
             */
            featureGroupRules: outputs.nfd.v1alpha1.NodeFeatureGroupSpecFeatureGroupRulesPatch[];
        }

        /**
         * Status of the NodeFeatureGroup after the most recent evaluation of the
         * specification.
         */
        export interface NodeFeatureGroupStatus {
            /**
             * Nodes is a list of FeatureGroupNode in the cluster that match the featureGroupRules
             */
            nodes: outputs.nfd.v1alpha1.NodeFeatureGroupStatusNodes[];
        }

        export interface NodeFeatureGroupStatusNodes {
            /**
             * Name of the node.
             */
            name: string;
        }

        export interface NodeFeatureGroupStatusNodesPatch {
            /**
             * Name of the node.
             */
            name: string;
        }

        /**
         * Status of the NodeFeatureGroup after the most recent evaluation of the
         * specification.
         */
        export interface NodeFeatureGroupStatusPatch {
            /**
             * Nodes is a list of FeatureGroupNode in the cluster that match the featureGroupRules
             */
            nodes: outputs.nfd.v1alpha1.NodeFeatureGroupStatusNodesPatch[];
        }

        /**
         * NodeFeatureRule resource specifies a configuration for feature-based
         * customization of node objects, such as node labeling.
         */
        export interface NodeFeatureRule {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "nfd.k8s-sigs.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "NodeFeatureRule";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.nfd.v1alpha1.NodeFeatureRuleSpec;
        }

        /**
         * Spec defines the rules to be evaluated.
         */
        export interface NodeFeatureRuleSpec {
            /**
             * Rules is a list of node customization rules.
             */
            rules: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRules[];
        }

        /**
         * Spec defines the rules to be evaluated.
         */
        export interface NodeFeatureRuleSpecPatch {
            /**
             * Rules is a list of node customization rules.
             */
            rules: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesPatch[];
        }

        /**
         * Rule defines a rule for node customization such as labeling.
         */
        export interface NodeFeatureRuleSpecRules {
            /**
             * Annotations to create if the rule matches.
             */
            annotations: {[key: string]: string};
            /**
             * ExtendedResources to create if the rule matches.
             */
            extendedResources: {[key: string]: string};
            /**
             * Labels to create if the rule matches.
             */
            labels: {[key: string]: string};
            /**
             * LabelsTemplate specifies a template to expand for dynamically generating
             * multiple labels. Data (after template expansion) must be keys with an
             * optional value (<key>[=<value>]) separated by newlines.
             */
            labelsTemplate: string;
            /**
             * MatchAny specifies a list of matchers one of which must match.
             */
            matchAny: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAny[];
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchFeatures[];
            /**
             * Name of the rule.
             */
            name: string;
            /**
             * Taints to create if the rule matches.
             */
            taints: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesTaints[];
            /**
             * Vars is the variables to store if the rule matches. Variables do not
             * directly inflict any changes in the node object. However, they can be
             * referenced from other rules enabling more complex rule hierarchies,
             * without exposing intermediary output values as labels.
             */
            vars: {[key: string]: string};
            /**
             * VarsTemplate specifies a template to expand for dynamically generating
             * multiple variables. Data (after template expansion) must be keys with an
             * optional value (<key>[=<value>]) separated by newlines.
             */
            varsTemplate: string;
        }

        /**
         * MatchAnyElem specifies one sub-matcher of MatchAny.
         */
        export interface NodeFeatureRuleSpecRulesMatchAny {
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyMatchFeatures[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyMatchFeatures {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesMatchName;
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesMatchName {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesMatchNamePatch {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesPatch {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesMatchNamePatch;
        }

        /**
         * MatchAnyElem specifies one sub-matcher of MatchAny.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyPatch {
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesPatch[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchFeatures {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchFeaturesMatchName;
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchFeaturesMatchName {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * MatchName in an expression that is matched against the name of each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchFeaturesMatchNamePatch {
            /**
             * Op is the operator to be applied.
             */
            op: string;
            /**
             * Value is the list of values that the operand evaluates the input
             * against. Value should be empty if the operator is Exists, DoesNotExist,
             * IsTrue or IsFalse. Value should contain exactly one element if the
             * operator is Gt or Lt and exactly two elements if the operator is GtLt.
             * In other cases Value should contain at least one element.
             */
            value: string[];
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All
         * requirements (specified as MatchExpressions) are evaluated against each
         * element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchFeaturesPatch {
            /**
             * Feature is the name of the feature set to match against.
             */
            feature: string;
            /**
             * MatchExpressions is the set of per-element expressions evaluated. These
             * match against the value of the specified elements.
             */
            matchExpressions: {[key: string]: {[key: string]: string}};
            matchName: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchFeaturesMatchNamePatch;
        }

        /**
         * Rule defines a rule for node customization such as labeling.
         */
        export interface NodeFeatureRuleSpecRulesPatch {
            /**
             * Annotations to create if the rule matches.
             */
            annotations: {[key: string]: string};
            /**
             * ExtendedResources to create if the rule matches.
             */
            extendedResources: {[key: string]: string};
            /**
             * Labels to create if the rule matches.
             */
            labels: {[key: string]: string};
            /**
             * LabelsTemplate specifies a template to expand for dynamically generating
             * multiple labels. Data (after template expansion) must be keys with an
             * optional value (<key>[=<value>]) separated by newlines.
             */
            labelsTemplate: string;
            /**
             * MatchAny specifies a list of matchers one of which must match.
             */
            matchAny: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyPatch[];
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchFeaturesPatch[];
            /**
             * Name of the rule.
             */
            name: string;
            /**
             * Taints to create if the rule matches.
             */
            taints: outputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesTaintsPatch[];
            /**
             * Vars is the variables to store if the rule matches. Variables do not
             * directly inflict any changes in the node object. However, they can be
             * referenced from other rules enabling more complex rule hierarchies,
             * without exposing intermediary output values as labels.
             */
            vars: {[key: string]: string};
            /**
             * VarsTemplate specifies a template to expand for dynamically generating
             * multiple variables. Data (after template expansion) must be keys with an
             * optional value (<key>[=<value>]) separated by newlines.
             */
            varsTemplate: string;
        }

        /**
         * The node this Taint is attached to has the "effect" on
         * any pod that does not tolerate the Taint.
         */
        export interface NodeFeatureRuleSpecRulesTaints {
            /**
             * Required. The effect of the taint on pods
             * that do not tolerate the taint.
             * Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Required. The taint key to be applied to a node.
             */
            key: string;
            /**
             * TimeAdded represents the time at which the taint was added.
             * It is only written for NoExecute taints.
             */
            timeAdded: string;
            /**
             * The taint value corresponding to the taint key.
             */
            value: string;
        }

        /**
         * The node this Taint is attached to has the "effect" on
         * any pod that does not tolerate the Taint.
         */
        export interface NodeFeatureRuleSpecRulesTaintsPatch {
            /**
             * Required. The effect of the taint on pods
             * that do not tolerate the taint.
             * Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Required. The taint key to be applied to a node.
             */
            key: string;
            /**
             * TimeAdded represents the time at which the taint was added.
             * It is only written for NoExecute taints.
             */
            timeAdded: string;
            /**
             * The taint value corresponding to the taint key.
             */
            value: string;
        }

        /**
         * Specification of the NodeFeature, containing features discovered for a node.
         */
        export interface NodeFeatureSpec {
            features: outputs.nfd.v1alpha1.NodeFeatureSpecFeatures;
            /**
             * Labels is the set of node labels that are requested to be created.
             */
            labels: {[key: string]: string};
        }

        /**
         * Features is the full "raw" features data that has been discovered.
         */
        export interface NodeFeatureSpecFeatures {
            /**
             * Attributes contains all the attribute-type features of the node.
             */
            attributes: {[key: string]: {[key: string]: string}};
            /**
             * Flags contains all the flag-type features of the node.
             */
            flags: {[key: string]: {[key: string]: string}};
            /**
             * Instances contains all the instance-type features of the node.
             */
            instances: {[key: string]: {[key: string]: string}};
        }

        /**
         * Features is the full "raw" features data that has been discovered.
         */
        export interface NodeFeatureSpecFeaturesPatch {
            /**
             * Attributes contains all the attribute-type features of the node.
             */
            attributes: {[key: string]: {[key: string]: string}};
            /**
             * Flags contains all the flag-type features of the node.
             */
            flags: {[key: string]: {[key: string]: string}};
            /**
             * Instances contains all the instance-type features of the node.
             */
            instances: {[key: string]: {[key: string]: string}};
        }

        /**
         * Specification of the NodeFeature, containing features discovered for a node.
         */
        export interface NodeFeatureSpecPatch {
            features: outputs.nfd.v1alpha1.NodeFeatureSpecFeaturesPatch;
            /**
             * Labels is the set of node labels that are requested to be created.
             */
            labels: {[key: string]: string};
        }

    }
}

export namespace postgresql {
    export namespace v1 {
        /**
         * Backup is the Schema for the backups API
         */
        export interface Backup {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "postgresql.cnpg.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Backup";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.postgresql.v1.BackupSpec;
            status: outputs.postgresql.v1.BackupStatus;
        }

        /**
         * Specification of the desired behavior of the backup.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface BackupSpec {
            cluster: outputs.postgresql.v1.BackupSpecCluster;
            /**
             * The backup method to be used, possible options are `barmanObjectStore`,
             * `volumeSnapshot` or `plugin`. Defaults to: `barmanObjectStore`.
             */
            method: string;
            /**
             * Whether the default type of backup with volume snapshots is
             * online/hot (`true`, default) or offline/cold (`false`)
             * Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
             */
            online: boolean;
            onlineConfiguration: outputs.postgresql.v1.BackupSpecOnlineConfiguration;
            pluginConfiguration: outputs.postgresql.v1.BackupSpecPluginConfiguration;
            /**
             * The policy to decide which instance should perform this backup. If empty,
             * it defaults to `cluster.spec.backup.target`.
             * Available options are empty string, `primary` and `prefer-standby`.
             * `primary` to have backups run always on primary instances,
             * `prefer-standby` to have backups run preferably on the most updated
             * standby, if available.
             */
            target: string;
        }

        /**
         * The cluster to backup
         */
        export interface BackupSpecCluster {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The cluster to backup
         */
        export interface BackupSpecClusterPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Configuration parameters to control the online/hot backup with volume snapshots
         * Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
         */
        export interface BackupSpecOnlineConfiguration {
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * If false, the function will return immediately after the backup is completed,
             * without waiting for WAL to be archived.
             * This behavior is only useful with backup software that independently monitors WAL archiving.
             * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
             * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
             * enabled.
             * On a standby, this means that it will wait only when archive_mode = always.
             * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
             * an immediate segment switch.
             */
            waitForArchive: boolean;
        }

        /**
         * Configuration parameters to control the online/hot backup with volume snapshots
         * Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
         */
        export interface BackupSpecOnlineConfigurationPatch {
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * If false, the function will return immediately after the backup is completed,
             * without waiting for WAL to be archived.
             * This behavior is only useful with backup software that independently monitors WAL archiving.
             * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
             * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
             * enabled.
             * On a standby, this means that it will wait only when archive_mode = always.
             * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
             * an immediate segment switch.
             */
            waitForArchive: boolean;
        }

        /**
         * Specification of the desired behavior of the backup.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface BackupSpecPatch {
            cluster: outputs.postgresql.v1.BackupSpecClusterPatch;
            /**
             * The backup method to be used, possible options are `barmanObjectStore`,
             * `volumeSnapshot` or `plugin`. Defaults to: `barmanObjectStore`.
             */
            method: string;
            /**
             * Whether the default type of backup with volume snapshots is
             * online/hot (`true`, default) or offline/cold (`false`)
             * Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
             */
            online: boolean;
            onlineConfiguration: outputs.postgresql.v1.BackupSpecOnlineConfigurationPatch;
            pluginConfiguration: outputs.postgresql.v1.BackupSpecPluginConfigurationPatch;
            /**
             * The policy to decide which instance should perform this backup. If empty,
             * it defaults to `cluster.spec.backup.target`.
             * Available options are empty string, `primary` and `prefer-standby`.
             * `primary` to have backups run always on primary instances,
             * `prefer-standby` to have backups run preferably on the most updated
             * standby, if available.
             */
            target: string;
        }

        /**
         * Configuration parameters passed to the plugin managing this backup
         */
        export interface BackupSpecPluginConfiguration {
            /**
             * Name is the name of the plugin managing this backup
             */
            name: string;
            /**
             * Parameters are the configuration parameters passed to the backup
             * plugin for this backup
             */
            parameters: {[key: string]: string};
        }

        /**
         * Configuration parameters passed to the plugin managing this backup
         */
        export interface BackupSpecPluginConfigurationPatch {
            /**
             * Name is the name of the plugin managing this backup
             */
            name: string;
            /**
             * Parameters are the configuration parameters passed to the backup
             * plugin for this backup
             */
            parameters: {[key: string]: string};
        }

        /**
         * Most recently observed status of the backup. This data may not be up to
         * date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface BackupStatus {
            azureCredentials: outputs.postgresql.v1.BackupStatusAzureCredentials;
            /**
             * The ID of the Barman backup
             */
            backupId: string;
            /**
             * Backup label file content as returned by Postgres in case of online (hot) backups
             */
            backupLabelFile: string;
            /**
             * The Name of the Barman backup
             */
            backupName: string;
            /**
             * The starting xlog
             */
            beginLSN: string;
            /**
             * The starting WAL
             */
            beginWal: string;
            /**
             * The backup command output in case of error
             */
            commandError: string;
            /**
             * Unused. Retained for compatibility with old versions.
             */
            commandOutput: string;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder)
             * this path, with different destination folders, will be used for WALs
             * and for data. This may not be populated in case of errors.
             */
            destinationPath: string;
            /**
             * Encryption method required to S3 API
             */
            encryption: string;
            /**
             * The ending xlog
             */
            endLSN: string;
            /**
             * The ending WAL
             */
            endWal: string;
            endpointCA: outputs.postgresql.v1.BackupStatusEndpointCA;
            /**
             * Endpoint to be used to upload data to the cloud,
             * overriding the automatic endpoint discovery
             */
            endpointURL: string;
            /**
             * The detected error
             */
            error: string;
            googleCredentials: outputs.postgresql.v1.BackupStatusGoogleCredentials;
            instanceID: outputs.postgresql.v1.BackupStatusInstanceID;
            /**
             * The backup method being used
             */
            method: string;
            /**
             * Whether the backup was online/hot (`true`) or offline/cold (`false`)
             */
            online: boolean;
            /**
             * The last backup status
             */
            phase: string;
            s3Credentials: outputs.postgresql.v1.BackupStatusS3Credentials;
            /**
             * The server name on S3, the cluster name is used if this
             * parameter is omitted
             */
            serverName: string;
            snapshotBackupStatus: outputs.postgresql.v1.BackupStatusSnapshotBackupStatus;
            /**
             * When the backup was started
             */
            startedAt: string;
            /**
             * When the backup was terminated
             */
            stoppedAt: string;
            /**
             * Tablespace map file content as returned by Postgres in case of online (hot) backups
             */
            tablespaceMapFile: string;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface BackupStatusAzureCredentials {
            connectionString: outputs.postgresql.v1.BackupStatusAzureCredentialsConnectionString;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD: boolean;
            storageAccount: outputs.postgresql.v1.BackupStatusAzureCredentialsStorageAccount;
            storageKey: outputs.postgresql.v1.BackupStatusAzureCredentialsStorageKey;
            storageSasToken: outputs.postgresql.v1.BackupStatusAzureCredentialsStorageSasToken;
        }

        /**
         * The connection string to be used
         */
        export interface BackupStatusAzureCredentialsConnectionString {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The connection string to be used
         */
        export interface BackupStatusAzureCredentialsConnectionStringPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface BackupStatusAzureCredentialsPatch {
            connectionString: outputs.postgresql.v1.BackupStatusAzureCredentialsConnectionStringPatch;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD: boolean;
            storageAccount: outputs.postgresql.v1.BackupStatusAzureCredentialsStorageAccountPatch;
            storageKey: outputs.postgresql.v1.BackupStatusAzureCredentialsStorageKeyPatch;
            storageSasToken: outputs.postgresql.v1.BackupStatusAzureCredentialsStorageSasTokenPatch;
        }

        /**
         * The storage account where to upload data
         */
        export interface BackupStatusAzureCredentialsStorageAccount {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account where to upload data
         */
        export interface BackupStatusAzureCredentialsStorageAccountPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account key to be used in conjunction
         * with the storage account name
         */
        export interface BackupStatusAzureCredentialsStorageKey {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account key to be used in conjunction
         * with the storage account name
         */
        export interface BackupStatusAzureCredentialsStorageKeyPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * A shared-access-signature to be used in conjunction with
         * the storage account name
         */
        export interface BackupStatusAzureCredentialsStorageSasToken {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * A shared-access-signature to be used in conjunction with
         * the storage account name
         */
        export interface BackupStatusAzureCredentialsStorageSasTokenPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive.
         */
        export interface BackupStatusEndpointCA {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive.
         */
        export interface BackupStatusEndpointCAPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface BackupStatusGoogleCredentials {
            applicationCredentials: outputs.postgresql.v1.BackupStatusGoogleCredentialsApplicationCredentials;
            /**
             * If set to true, will presume that it's running inside a GKE environment,
             * default to false.
             */
            gkeEnvironment: boolean;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface BackupStatusGoogleCredentialsApplicationCredentials {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface BackupStatusGoogleCredentialsApplicationCredentialsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface BackupStatusGoogleCredentialsPatch {
            applicationCredentials: outputs.postgresql.v1.BackupStatusGoogleCredentialsApplicationCredentialsPatch;
            /**
             * If set to true, will presume that it's running inside a GKE environment,
             * default to false.
             */
            gkeEnvironment: boolean;
        }

        /**
         * Information to identify the instance where the backup has been taken from
         */
        export interface BackupStatusInstanceID {
            /**
             * The container ID
             */
            ContainerID: string;
            /**
             * The pod name
             */
            podName: string;
        }

        /**
         * Information to identify the instance where the backup has been taken from
         */
        export interface BackupStatusInstanceIDPatch {
            /**
             * The container ID
             */
            ContainerID: string;
            /**
             * The pod name
             */
            podName: string;
        }

        /**
         * Most recently observed status of the backup. This data may not be up to
         * date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface BackupStatusPatch {
            azureCredentials: outputs.postgresql.v1.BackupStatusAzureCredentialsPatch;
            /**
             * The ID of the Barman backup
             */
            backupId: string;
            /**
             * Backup label file content as returned by Postgres in case of online (hot) backups
             */
            backupLabelFile: string;
            /**
             * The Name of the Barman backup
             */
            backupName: string;
            /**
             * The starting xlog
             */
            beginLSN: string;
            /**
             * The starting WAL
             */
            beginWal: string;
            /**
             * The backup command output in case of error
             */
            commandError: string;
            /**
             * Unused. Retained for compatibility with old versions.
             */
            commandOutput: string;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder)
             * this path, with different destination folders, will be used for WALs
             * and for data. This may not be populated in case of errors.
             */
            destinationPath: string;
            /**
             * Encryption method required to S3 API
             */
            encryption: string;
            /**
             * The ending xlog
             */
            endLSN: string;
            /**
             * The ending WAL
             */
            endWal: string;
            endpointCA: outputs.postgresql.v1.BackupStatusEndpointCAPatch;
            /**
             * Endpoint to be used to upload data to the cloud,
             * overriding the automatic endpoint discovery
             */
            endpointURL: string;
            /**
             * The detected error
             */
            error: string;
            googleCredentials: outputs.postgresql.v1.BackupStatusGoogleCredentialsPatch;
            instanceID: outputs.postgresql.v1.BackupStatusInstanceIDPatch;
            /**
             * The backup method being used
             */
            method: string;
            /**
             * Whether the backup was online/hot (`true`) or offline/cold (`false`)
             */
            online: boolean;
            /**
             * The last backup status
             */
            phase: string;
            s3Credentials: outputs.postgresql.v1.BackupStatusS3CredentialsPatch;
            /**
             * The server name on S3, the cluster name is used if this
             * parameter is omitted
             */
            serverName: string;
            snapshotBackupStatus: outputs.postgresql.v1.BackupStatusSnapshotBackupStatusPatch;
            /**
             * When the backup was started
             */
            startedAt: string;
            /**
             * When the backup was terminated
             */
            stoppedAt: string;
            /**
             * Tablespace map file content as returned by Postgres in case of online (hot) backups
             */
            tablespaceMapFile: string;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface BackupStatusS3Credentials {
            accessKeyId: outputs.postgresql.v1.BackupStatusS3CredentialsAccessKeyId;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole: boolean;
            region: outputs.postgresql.v1.BackupStatusS3CredentialsRegion;
            secretAccessKey: outputs.postgresql.v1.BackupStatusS3CredentialsSecretAccessKey;
            sessionToken: outputs.postgresql.v1.BackupStatusS3CredentialsSessionToken;
        }

        /**
         * The reference to the access key id
         */
        export interface BackupStatusS3CredentialsAccessKeyId {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the access key id
         */
        export interface BackupStatusS3CredentialsAccessKeyIdPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface BackupStatusS3CredentialsPatch {
            accessKeyId: outputs.postgresql.v1.BackupStatusS3CredentialsAccessKeyIdPatch;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole: boolean;
            region: outputs.postgresql.v1.BackupStatusS3CredentialsRegionPatch;
            secretAccessKey: outputs.postgresql.v1.BackupStatusS3CredentialsSecretAccessKeyPatch;
            sessionToken: outputs.postgresql.v1.BackupStatusS3CredentialsSessionTokenPatch;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface BackupStatusS3CredentialsRegion {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface BackupStatusS3CredentialsRegionPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret access key
         */
        export interface BackupStatusS3CredentialsSecretAccessKey {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret access key
         */
        export interface BackupStatusS3CredentialsSecretAccessKeyPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The references to the session key
         */
        export interface BackupStatusS3CredentialsSessionToken {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The references to the session key
         */
        export interface BackupStatusS3CredentialsSessionTokenPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Status of the volumeSnapshot backup
         */
        export interface BackupStatusSnapshotBackupStatus {
            /**
             * The elements list, populated with the gathered volume snapshots
             */
            elements: outputs.postgresql.v1.BackupStatusSnapshotBackupStatusElements[];
        }

        /**
         * BackupSnapshotElementStatus is a volume snapshot that is part of a volume snapshot method backup
         */
        export interface BackupStatusSnapshotBackupStatusElements {
            /**
             * Name is the snapshot resource name
             */
            name: string;
            /**
             * TablespaceName is the name of the snapshotted tablespace. Only set
             * when type is PG_TABLESPACE
             */
            tablespaceName: string;
            /**
             * Type is tho role of the snapshot in the cluster, such as PG_DATA, PG_WAL and PG_TABLESPACE
             */
            type: string;
        }

        /**
         * BackupSnapshotElementStatus is a volume snapshot that is part of a volume snapshot method backup
         */
        export interface BackupStatusSnapshotBackupStatusElementsPatch {
            /**
             * Name is the snapshot resource name
             */
            name: string;
            /**
             * TablespaceName is the name of the snapshotted tablespace. Only set
             * when type is PG_TABLESPACE
             */
            tablespaceName: string;
            /**
             * Type is tho role of the snapshot in the cluster, such as PG_DATA, PG_WAL and PG_TABLESPACE
             */
            type: string;
        }

        /**
         * Status of the volumeSnapshot backup
         */
        export interface BackupStatusSnapshotBackupStatusPatch {
            /**
             * The elements list, populated with the gathered volume snapshots
             */
            elements: outputs.postgresql.v1.BackupStatusSnapshotBackupStatusElementsPatch[];
        }

        /**
         * Cluster is the Schema for the PostgreSQL API
         */
        export interface Cluster {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "postgresql.cnpg.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Cluster";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.postgresql.v1.ClusterSpec;
            status: outputs.postgresql.v1.ClusterStatus;
        }

        /**
         * ClusterImageCatalog is the Schema for the clusterimagecatalogs API
         */
        export interface ClusterImageCatalog {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "postgresql.cnpg.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ClusterImageCatalog";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.postgresql.v1.ClusterImageCatalogSpec;
        }

        /**
         * Specification of the desired behavior of the ClusterImageCatalog.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterImageCatalogSpec {
            /**
             * List of CatalogImages available in the catalog
             */
            images: outputs.postgresql.v1.ClusterImageCatalogSpecImages[];
        }

        /**
         * CatalogImage defines the image and major version
         */
        export interface ClusterImageCatalogSpecImages {
            /**
             * The image reference
             */
            image: string;
            /**
             * The PostgreSQL major version of the image. Must be unique within the catalog.
             */
            major: number;
        }

        /**
         * CatalogImage defines the image and major version
         */
        export interface ClusterImageCatalogSpecImagesPatch {
            /**
             * The image reference
             */
            image: string;
            /**
             * The PostgreSQL major version of the image. Must be unique within the catalog.
             */
            major: number;
        }

        /**
         * Specification of the desired behavior of the ClusterImageCatalog.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterImageCatalogSpecPatch {
            /**
             * List of CatalogImages available in the catalog
             */
            images: outputs.postgresql.v1.ClusterImageCatalogSpecImagesPatch[];
        }

        /**
         * Specification of the desired behavior of the cluster.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterSpec {
            affinity: outputs.postgresql.v1.ClusterSpecAffinity;
            backup: outputs.postgresql.v1.ClusterSpecBackup;
            bootstrap: outputs.postgresql.v1.ClusterSpecBootstrap;
            certificates: outputs.postgresql.v1.ClusterSpecCertificates;
            /**
             * Description of this PostgreSQL cluster
             */
            description: string;
            /**
             * Manage the `PodDisruptionBudget` resources within the cluster. When
             * configured as `true` (default setting), the pod disruption budgets
             * will safeguard the primary node from being terminated. Conversely,
             * setting it to `false` will result in the absence of any
             * `PodDisruptionBudget` resource, permitting the shutdown of all nodes
             * hosting the PostgreSQL cluster. This latter configuration is
             * advisable for any PostgreSQL cluster employed for
             * development/staging purposes.
             */
            enablePDB: boolean;
            /**
             * When this option is enabled, the operator will use the `SuperuserSecret`
             * to update the `postgres` user password (if the secret is
             * not present, the operator will automatically create one). When this
             * option is disabled, the operator will ignore the `SuperuserSecret` content, delete
             * it when automatically created, and then blank the password of the `postgres`
             * user by setting it to `NULL`. Disabled by default.
             */
            enableSuperuserAccess: boolean;
            /**
             * Env follows the Env format to pass environment variables
             * to the pods created in the cluster
             */
            env: outputs.postgresql.v1.ClusterSpecEnv[];
            /**
             * EnvFrom follows the EnvFrom format to pass environment variables
             * sources to the pods to be used by Env
             */
            envFrom: outputs.postgresql.v1.ClusterSpecEnvFrom[];
            ephemeralVolumeSource: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSource;
            ephemeralVolumesSizeLimit: outputs.postgresql.v1.ClusterSpecEphemeralVolumesSizeLimit;
            /**
             * The list of external clusters which are used in the configuration
             */
            externalClusters: outputs.postgresql.v1.ClusterSpecExternalClusters[];
            /**
             * The amount of time (in seconds) to wait before triggering a failover
             * after the primary PostgreSQL instance in the cluster was detected
             * to be unhealthy
             */
            failoverDelay: number;
            imageCatalogRef: outputs.postgresql.v1.ClusterSpecImageCatalogRef;
            /**
             * Name of the container image, supporting both tags (`<image>:<tag>`)
             * and digests for deterministic and repeatable deployments
             * (`<image>:<tag>@sha256:<digestValue>`)
             */
            imageName: string;
            /**
             * Image pull policy.
             * One of `Always`, `Never` or `IfNotPresent`.
             * If not defined, it defaults to `IfNotPresent`.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            /**
             * The list of pull secrets to be used to pull the images
             */
            imagePullSecrets: outputs.postgresql.v1.ClusterSpecImagePullSecrets[];
            inheritedMetadata: outputs.postgresql.v1.ClusterSpecInheritedMetadata;
            /**
             * Number of instances required in the cluster
             */
            instances: number;
            /**
             * LivenessProbeTimeout is the time (in seconds) that is allowed for a PostgreSQL instance
             * to successfully respond to the liveness probe (default 30).
             * The Liveness probe failure threshold is derived from this value using the formula:
             * ceiling(livenessProbe / 10).
             */
            livenessProbeTimeout: number;
            /**
             * The instances' log level, one of the following values: error, warning, info (default), debug, trace
             */
            logLevel: string;
            managed: outputs.postgresql.v1.ClusterSpecManaged;
            /**
             * The target value for the synchronous replication quorum, that can be
             * decreased if the number of ready standbys is lower than this.
             * Undefined or 0 disable synchronous replication.
             */
            maxSyncReplicas: number;
            /**
             * Minimum number of instances required in synchronous replication with the
             * primary. Undefined or 0 allow writes to complete when no standby is
             * available.
             */
            minSyncReplicas: number;
            monitoring: outputs.postgresql.v1.ClusterSpecMonitoring;
            nodeMaintenanceWindow: outputs.postgresql.v1.ClusterSpecNodeMaintenanceWindow;
            /**
             * The plugins configuration, containing
             * any plugin to be loaded with the corresponding configuration
             */
            plugins: outputs.postgresql.v1.ClusterSpecPlugins[];
            /**
             * The GID of the `postgres` user inside the image, defaults to `26`
             */
            postgresGID: number;
            /**
             * The UID of the `postgres` user inside the image, defaults to `26`
             */
            postgresUID: number;
            postgresql: outputs.postgresql.v1.ClusterSpecPostgresql;
            /**
             * Method to follow to upgrade the primary server during a rolling
             * update procedure, after all replicas have been successfully updated:
             * it can be with a switchover (`switchover`) or in-place (`restart` - default)
             */
            primaryUpdateMethod: string;
            /**
             * Deployment strategy to follow to upgrade the primary server during a rolling
             * update procedure, after all replicas have been successfully updated:
             * it can be automated (`unsupervised` - default) or manual (`supervised`)
             */
            primaryUpdateStrategy: string;
            /**
             * Name of the priority class which will be used in every generated Pod, if the PriorityClass
             * specified does not exist, the pod will not be able to schedule.  Please refer to
             * https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
             * for more information
             */
            priorityClassName: string;
            projectedVolumeTemplate: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplate;
            replica: outputs.postgresql.v1.ClusterSpecReplica;
            replicationSlots: outputs.postgresql.v1.ClusterSpecReplicationSlots;
            resources: outputs.postgresql.v1.ClusterSpecResources;
            /**
             * If specified, the pod will be dispatched by specified Kubernetes
             * scheduler. If not specified, the pod will be dispatched by the default
             * scheduler. More info:
             * https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/
             */
            schedulerName: string;
            seccompProfile: outputs.postgresql.v1.ClusterSpecSeccompProfile;
            serviceAccountTemplate: outputs.postgresql.v1.ClusterSpecServiceAccountTemplate;
            /**
             * The time in seconds that controls the window of time reserved for the smart shutdown of Postgres to complete.
             * Make sure you reserve enough time for the operator to request a fast shutdown of Postgres
             * (that is: `stopDelay` - `smartShutdownTimeout`).
             */
            smartShutdownTimeout: number;
            /**
             * The time in seconds that is allowed for a PostgreSQL instance to
             * successfully start up (default 3600).
             * The startup probe failure threshold is derived from this value using the formula:
             * ceiling(startDelay / 10).
             */
            startDelay: number;
            /**
             * The time in seconds that is allowed for a PostgreSQL instance to
             * gracefully shutdown (default 1800)
             */
            stopDelay: number;
            storage: outputs.postgresql.v1.ClusterSpecStorage;
            superuserSecret: outputs.postgresql.v1.ClusterSpecSuperuserSecret;
            /**
             * The time in seconds that is allowed for a primary PostgreSQL instance
             * to gracefully shutdown during a switchover.
             * Default value is 3600 seconds (1 hour).
             */
            switchoverDelay: number;
            /**
             * The tablespaces configuration
             */
            tablespaces: outputs.postgresql.v1.ClusterSpecTablespaces[];
            /**
             * TopologySpreadConstraints specifies how to spread matching pods among the given topology.
             * More info:
             * https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
             */
            topologySpreadConstraints: outputs.postgresql.v1.ClusterSpecTopologySpreadConstraints[];
            walStorage: outputs.postgresql.v1.ClusterSpecWalStorage;
        }

        /**
         * Affinity/Anti-affinity rules for Pods
         */
        export interface ClusterSpecAffinity {
            additionalPodAffinity: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinity;
            additionalPodAntiAffinity: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinity;
            /**
             * Activates anti-affinity for the pods. The operator will define pods
             * anti-affinity unless this field is explicitly set to false
             */
            enablePodAntiAffinity: boolean;
            nodeAffinity: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinity;
            /**
             * NodeSelector is map of key-value pairs used to define the nodes on which
             * the pods can run.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * PodAntiAffinityType allows the user to decide whether pod anti-affinity between cluster instance has to be
             * considered a strong requirement during scheduling or not. Allowed values are: "preferred" (default if empty) or
             * "required". Setting it to "required", could lead to instances remaining pending until new kubernetes nodes are
             * added if all the existing nodes don't match the required pod anti-affinity rule.
             * More info:
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
             */
            podAntiAffinityType: string;
            /**
             * Tolerations is a list of Tolerations that should be set for all the pods, in order to allow them to run
             * on tainted nodes.
             * More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
             */
            tolerations: outputs.postgresql.v1.ClusterSpecAffinityTolerations[];
            /**
             * TopologyKey to use for anti-affinity configuration. See k8s documentation
             * for more info on that
             */
            topologyKey: string;
        }

        /**
         * AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated
         * by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated
         * by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * NodeAffinity describes node affinity scheduling rules for the pod.
         * More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
         */
        export interface ClusterSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * NodeAffinity describes node affinity scheduling rules for the pod.
         * More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
         */
        export interface ClusterSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * Affinity/Anti-affinity rules for Pods
         */
        export interface ClusterSpecAffinityPatch {
            additionalPodAffinity: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPatch;
            additionalPodAntiAffinity: outputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPatch;
            /**
             * Activates anti-affinity for the pods. The operator will define pods
             * anti-affinity unless this field is explicitly set to false
             */
            enablePodAntiAffinity: boolean;
            nodeAffinity: outputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPatch;
            /**
             * NodeSelector is map of key-value pairs used to define the nodes on which
             * the pods can run.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            /**
             * PodAntiAffinityType allows the user to decide whether pod anti-affinity between cluster instance has to be
             * considered a strong requirement during scheduling or not. Allowed values are: "preferred" (default if empty) or
             * "required". Setting it to "required", could lead to instances remaining pending until new kubernetes nodes are
             * added if all the existing nodes don't match the required pod anti-affinity rule.
             * More info:
             * https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
             */
            podAntiAffinityType: string;
            /**
             * Tolerations is a list of Tolerations that should be set for all the pods, in order to allow them to run
             * on tainted nodes.
             * More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
             */
            tolerations: outputs.postgresql.v1.ClusterSpecAffinityTolerationsPatch[];
            /**
             * TopologyKey to use for anti-affinity configuration. See k8s documentation
             * for more info on that
             */
            topologyKey: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterSpecAffinityTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterSpecAffinityTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The configuration to be used for backups
         */
        export interface ClusterSpecBackup {
            barmanObjectStore: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStore;
            /**
             * RetentionPolicy is the retention policy to be used for backups
             * and WALs (i.e. '60d'). The retention policy is expressed in the form
             * of `XXu` where `XX` is a positive integer and `u` is in `[dwm]` -
             * days, weeks, months.
             * It's currently only applicable when using the BarmanObjectStore method.
             */
            retentionPolicy: string;
            /**
             * The policy to decide which instance should perform backups. Available
             * options are empty string, which will default to `prefer-standby` policy,
             * `primary` to have backups run always on primary instances, `prefer-standby`
             * to have backups run preferably on the most updated standby, if available.
             */
            target: string;
            volumeSnapshot: outputs.postgresql.v1.ClusterSpecBackupVolumeSnapshot;
        }

        /**
         * The configuration for the barman-cloud tool suite
         */
        export interface ClusterSpecBackupBarmanObjectStore {
            azureCredentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentials;
            data: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreData;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder)
             * this path, with different destination folders, will be used for WALs
             * and for data
             */
            destinationPath: string;
            endpointCA: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreEndpointCA;
            /**
             * Endpoint to be used to upload data to the cloud,
             * overriding the automatic endpoint discovery
             */
            endpointURL: string;
            googleCredentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreGoogleCredentials;
            /**
             * HistoryTags is a list of key value pairs that will be passed to the
             * Barman --history-tags option.
             */
            historyTags: {[key: string]: string};
            s3Credentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3Credentials;
            /**
             * The server name on S3, the cluster name is used if this
             * parameter is omitted
             */
            serverName: string;
            /**
             * Tags is a list of key value pairs that will be passed to the
             * Barman --tags option.
             */
            tags: {[key: string]: string};
            wal: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreWal;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentials {
            connectionString: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionString;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD: boolean;
            storageAccount: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccount;
            storageKey: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKey;
            storageSasToken: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasToken;
        }

        /**
         * The connection string to be used
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionString {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The connection string to be used
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionStringPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsPatch {
            connectionString: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionStringPatch;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD: boolean;
            storageAccount: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccountPatch;
            storageKey: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKeyPatch;
            storageSasToken: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasTokenPatch;
        }

        /**
         * The storage account where to upload data
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccount {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account where to upload data
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccountPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account key to be used in conjunction
         * with the storage account name
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKey {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account key to be used in conjunction
         * with the storage account name
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKeyPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * A shared-access-signature to be used in conjunction with
         * the storage account name
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasToken {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * A shared-access-signature to be used in conjunction with
         * the storage account name
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasTokenPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The configuration to be used to backup the data files
         * When not defined, base backups files will be stored uncompressed and may
         * be unencrypted in the object store, according to the bucket default
         * policy.
         */
        export interface ClusterSpecBackupBarmanObjectStoreData {
            /**
             * AdditionalCommandArgs represents additional arguments that can be appended
             * to the 'barman-cloud-backup' command-line invocation. These arguments
             * provide flexibility to customize the backup process further according to
             * specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-backup' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            additionalCommandArgs: string[];
            /**
             * Compress a backup file (a tar file per tablespace) while streaming it
             * to the object store. Available options are empty string (no
             * compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * The number of parallel jobs to be used to upload the backup, defaults
             * to 2
             */
            jobs: number;
        }

        /**
         * The configuration to be used to backup the data files
         * When not defined, base backups files will be stored uncompressed and may
         * be unencrypted in the object store, according to the bucket default
         * policy.
         */
        export interface ClusterSpecBackupBarmanObjectStoreDataPatch {
            /**
             * AdditionalCommandArgs represents additional arguments that can be appended
             * to the 'barman-cloud-backup' command-line invocation. These arguments
             * provide flexibility to customize the backup process further according to
             * specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-backup' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            additionalCommandArgs: string[];
            /**
             * Compress a backup file (a tar file per tablespace) while streaming it
             * to the object store. Available options are empty string (no
             * compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * The number of parallel jobs to be used to upload the backup, defaults
             * to 2
             */
            jobs: number;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive
         */
        export interface ClusterSpecBackupBarmanObjectStoreEndpointCA {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive
         */
        export interface ClusterSpecBackupBarmanObjectStoreEndpointCAPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface ClusterSpecBackupBarmanObjectStoreGoogleCredentials {
            applicationCredentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentials;
            /**
             * If set to true, will presume that it's running inside a GKE environment,
             * default to false.
             */
            gkeEnvironment: boolean;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentials {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentialsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface ClusterSpecBackupBarmanObjectStoreGoogleCredentialsPatch {
            applicationCredentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentialsPatch;
            /**
             * If set to true, will presume that it's running inside a GKE environment,
             * default to false.
             */
            gkeEnvironment: boolean;
        }

        /**
         * The configuration for the barman-cloud tool suite
         */
        export interface ClusterSpecBackupBarmanObjectStorePatch {
            azureCredentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsPatch;
            data: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreDataPatch;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder)
             * this path, with different destination folders, will be used for WALs
             * and for data
             */
            destinationPath: string;
            endpointCA: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreEndpointCAPatch;
            /**
             * Endpoint to be used to upload data to the cloud,
             * overriding the automatic endpoint discovery
             */
            endpointURL: string;
            googleCredentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreGoogleCredentialsPatch;
            /**
             * HistoryTags is a list of key value pairs that will be passed to the
             * Barman --history-tags option.
             */
            historyTags: {[key: string]: string};
            s3Credentials: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsPatch;
            /**
             * The server name on S3, the cluster name is used if this
             * parameter is omitted
             */
            serverName: string;
            /**
             * Tags is a list of key value pairs that will be passed to the
             * Barman --tags option.
             */
            tags: {[key: string]: string};
            wal: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreWalPatch;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3Credentials {
            accessKeyId: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyId;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole: boolean;
            region: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsRegion;
            secretAccessKey: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKey;
            sessionToken: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionToken;
        }

        /**
         * The reference to the access key id
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyId {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the access key id
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyIdPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsPatch {
            accessKeyId: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyIdPatch;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole: boolean;
            region: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsRegionPatch;
            secretAccessKey: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKeyPatch;
            sessionToken: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionTokenPatch;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsRegion {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsRegionPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret access key
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKey {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret access key
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKeyPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The references to the session key
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionToken {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The references to the session key
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionTokenPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The configuration for the backup of the WAL stream.
         * When not defined, WAL files will be stored uncompressed and may be
         * unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecBackupBarmanObjectStoreWal {
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-archive'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL archive process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            archiveAdditionalCommandArgs: string[];
            /**
             * Compress a WAL file before sending it to the object store. Available
             * options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Number of WAL files to be either archived in parallel (when the
             * PostgreSQL instance is archiving to a backup object store) or
             * restored in parallel (when a PostgreSQL standby is fetching WAL
             * files from a recovery object store). If not specified, WAL files
             * will be processed one at a time. It accepts a positive integer as a
             * value - with 1 being the minimum accepted value.
             */
            maxParallel: number;
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-restore'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL restore process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            restoreAdditionalCommandArgs: string[];
        }

        /**
         * The configuration for the backup of the WAL stream.
         * When not defined, WAL files will be stored uncompressed and may be
         * unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecBackupBarmanObjectStoreWalPatch {
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-archive'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL archive process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            archiveAdditionalCommandArgs: string[];
            /**
             * Compress a WAL file before sending it to the object store. Available
             * options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Number of WAL files to be either archived in parallel (when the
             * PostgreSQL instance is archiving to a backup object store) or
             * restored in parallel (when a PostgreSQL standby is fetching WAL
             * files from a recovery object store). If not specified, WAL files
             * will be processed one at a time. It accepts a positive integer as a
             * value - with 1 being the minimum accepted value.
             */
            maxParallel: number;
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-restore'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL restore process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            restoreAdditionalCommandArgs: string[];
        }

        /**
         * The configuration to be used for backups
         */
        export interface ClusterSpecBackupPatch {
            barmanObjectStore: outputs.postgresql.v1.ClusterSpecBackupBarmanObjectStorePatch;
            /**
             * RetentionPolicy is the retention policy to be used for backups
             * and WALs (i.e. '60d'). The retention policy is expressed in the form
             * of `XXu` where `XX` is a positive integer and `u` is in `[dwm]` -
             * days, weeks, months.
             * It's currently only applicable when using the BarmanObjectStore method.
             */
            retentionPolicy: string;
            /**
             * The policy to decide which instance should perform backups. Available
             * options are empty string, which will default to `prefer-standby` policy,
             * `primary` to have backups run always on primary instances, `prefer-standby`
             * to have backups run preferably on the most updated standby, if available.
             */
            target: string;
            volumeSnapshot: outputs.postgresql.v1.ClusterSpecBackupVolumeSnapshotPatch;
        }

        /**
         * VolumeSnapshot provides the configuration for the execution of volume snapshot backups.
         */
        export interface ClusterSpecBackupVolumeSnapshot {
            /**
             * Annotations key-value pairs that will be added to .metadata.annotations snapshot resources.
             */
            annotations: {[key: string]: string};
            /**
             * ClassName specifies the Snapshot Class to be used for PG_DATA PersistentVolumeClaim.
             * It is the default class for the other types if no specific class is present
             */
            className: string;
            /**
             * Labels are key-value pairs that will be added to .metadata.labels snapshot resources.
             */
            labels: {[key: string]: string};
            /**
             * Whether the default type of backup with volume snapshots is
             * online/hot (`true`, default) or offline/cold (`false`)
             */
            online: boolean;
            onlineConfiguration: outputs.postgresql.v1.ClusterSpecBackupVolumeSnapshotOnlineConfiguration;
            /**
             * SnapshotOwnerReference indicates the type of owner reference the snapshot should have
             */
            snapshotOwnerReference: string;
            /**
             * TablespaceClassName specifies the Snapshot Class to be used for the tablespaces.
             * defaults to the PGDATA Snapshot Class, if set
             */
            tablespaceClassName: {[key: string]: string};
            /**
             * WalClassName specifies the Snapshot Class to be used for the PG_WAL PersistentVolumeClaim.
             */
            walClassName: string;
        }

        /**
         * Configuration parameters to control the online/hot backup with volume snapshots
         */
        export interface ClusterSpecBackupVolumeSnapshotOnlineConfiguration {
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * If false, the function will return immediately after the backup is completed,
             * without waiting for WAL to be archived.
             * This behavior is only useful with backup software that independently monitors WAL archiving.
             * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
             * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
             * enabled.
             * On a standby, this means that it will wait only when archive_mode = always.
             * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
             * an immediate segment switch.
             */
            waitForArchive: boolean;
        }

        /**
         * Configuration parameters to control the online/hot backup with volume snapshots
         */
        export interface ClusterSpecBackupVolumeSnapshotOnlineConfigurationPatch {
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * If false, the function will return immediately after the backup is completed,
             * without waiting for WAL to be archived.
             * This behavior is only useful with backup software that independently monitors WAL archiving.
             * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
             * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
             * enabled.
             * On a standby, this means that it will wait only when archive_mode = always.
             * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
             * an immediate segment switch.
             */
            waitForArchive: boolean;
        }

        /**
         * VolumeSnapshot provides the configuration for the execution of volume snapshot backups.
         */
        export interface ClusterSpecBackupVolumeSnapshotPatch {
            /**
             * Annotations key-value pairs that will be added to .metadata.annotations snapshot resources.
             */
            annotations: {[key: string]: string};
            /**
             * ClassName specifies the Snapshot Class to be used for PG_DATA PersistentVolumeClaim.
             * It is the default class for the other types if no specific class is present
             */
            className: string;
            /**
             * Labels are key-value pairs that will be added to .metadata.labels snapshot resources.
             */
            labels: {[key: string]: string};
            /**
             * Whether the default type of backup with volume snapshots is
             * online/hot (`true`, default) or offline/cold (`false`)
             */
            online: boolean;
            onlineConfiguration: outputs.postgresql.v1.ClusterSpecBackupVolumeSnapshotOnlineConfigurationPatch;
            /**
             * SnapshotOwnerReference indicates the type of owner reference the snapshot should have
             */
            snapshotOwnerReference: string;
            /**
             * TablespaceClassName specifies the Snapshot Class to be used for the tablespaces.
             * defaults to the PGDATA Snapshot Class, if set
             */
            tablespaceClassName: {[key: string]: string};
            /**
             * WalClassName specifies the Snapshot Class to be used for the PG_WAL PersistentVolumeClaim.
             */
            walClassName: string;
        }

        /**
         * Instructions to bootstrap this cluster
         */
        export interface ClusterSpecBootstrap {
            initdb: outputs.postgresql.v1.ClusterSpecBootstrapInitdb;
            pg_basebackup: outputs.postgresql.v1.ClusterSpecBootstrapPgBasebackup;
            recovery: outputs.postgresql.v1.ClusterSpecBootstrapRecovery;
        }

        /**
         * Bootstrap the cluster via initdb
         */
        export interface ClusterSpecBootstrapInitdb {
            /**
             * Whether the `-k` option should be passed to initdb,
             * enabling checksums on data pages (default: `false`)
             */
            dataChecksums: boolean;
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database: string;
            /**
             * The value to be passed as option `--encoding` for initdb (default:`UTF8`)
             */
            encoding: string;
            import: outputs.postgresql.v1.ClusterSpecBootstrapInitdbImport;
            /**
             * The value to be passed as option `--lc-ctype` for initdb (default:`C`)
             */
            localeCType: string;
            /**
             * The value to be passed as option `--lc-collate` for initdb (default:`C`)
             */
            localeCollate: string;
            /**
             * The list of options that must be passed to initdb when creating the cluster.
             * Deprecated: This could lead to inconsistent configurations,
             * please use the explicit provided parameters instead.
             * If defined, explicit values will be ignored.
             */
            options: string[];
            /**
             * Name of the owner of the database in the instance to be used
             * by applications. Defaults to the value of the `database` key.
             */
            owner: string;
            /**
             * List of SQL queries to be executed as a superuser in the application
             * database right after the cluster has been created - to be used with extreme care
             * (by default empty)
             */
            postInitApplicationSQL: string[];
            postInitApplicationSQLRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefs;
            /**
             * List of SQL queries to be executed as a superuser in the `postgres`
             * database right after the cluster has been created - to be used with extreme care
             * (by default empty)
             */
            postInitSQL: string[];
            postInitSQLRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitSQLRefs;
            /**
             * List of SQL queries to be executed as a superuser in the `template1`
             * database right after the cluster has been created - to be used with extreme care
             * (by default empty)
             */
            postInitTemplateSQL: string[];
            postInitTemplateSQLRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitTemplateSQLRefs;
            secret: outputs.postgresql.v1.ClusterSpecBootstrapInitdbSecret;
            /**
             * The value in megabytes (1 to 1024) to be passed to the `--wal-segsize`
             * option for initdb (default: empty, resulting in PostgreSQL default: 16MB)
             */
            walSegmentSize: number;
        }

        /**
         * Bootstraps the new cluster by importing data from an existing PostgreSQL
         * instance using logical backup (`pg_dump` and `pg_restore`)
         */
        export interface ClusterSpecBootstrapInitdbImport {
            /**
             * The databases to import
             */
            databases: string[];
            /**
             * List of SQL queries to be executed as a superuser in the application
             * database right after is imported - to be used with extreme care
             * (by default empty). Only available in microservice type.
             */
            postImportApplicationSQL: string[];
            /**
             * The roles to import
             */
            roles: string[];
            /**
             * When set to true, only the `pre-data` and `post-data` sections of
             * `pg_restore` are invoked, avoiding data import. Default: `false`.
             */
            schemaOnly: boolean;
            source: outputs.postgresql.v1.ClusterSpecBootstrapInitdbImportSource;
            /**
             * The import type. Can be `microservice` or `monolith`.
             */
            type: string;
        }

        /**
         * Bootstraps the new cluster by importing data from an existing PostgreSQL
         * instance using logical backup (`pg_dump` and `pg_restore`)
         */
        export interface ClusterSpecBootstrapInitdbImportPatch {
            /**
             * The databases to import
             */
            databases: string[];
            /**
             * List of SQL queries to be executed as a superuser in the application
             * database right after is imported - to be used with extreme care
             * (by default empty). Only available in microservice type.
             */
            postImportApplicationSQL: string[];
            /**
             * The roles to import
             */
            roles: string[];
            /**
             * When set to true, only the `pre-data` and `post-data` sections of
             * `pg_restore` are invoked, avoiding data import. Default: `false`.
             */
            schemaOnly: boolean;
            source: outputs.postgresql.v1.ClusterSpecBootstrapInitdbImportSourcePatch;
            /**
             * The import type. Can be `microservice` or `monolith`.
             */
            type: string;
        }

        /**
         * The source of the import
         */
        export interface ClusterSpecBootstrapInitdbImportSource {
            /**
             * The name of the externalCluster used for import
             */
            externalCluster: string;
        }

        /**
         * The source of the import
         */
        export interface ClusterSpecBootstrapInitdbImportSourcePatch {
            /**
             * The name of the externalCluster used for import
             */
            externalCluster: string;
        }

        /**
         * Bootstrap the cluster via initdb
         */
        export interface ClusterSpecBootstrapInitdbPatch {
            /**
             * Whether the `-k` option should be passed to initdb,
             * enabling checksums on data pages (default: `false`)
             */
            dataChecksums: boolean;
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database: string;
            /**
             * The value to be passed as option `--encoding` for initdb (default:`UTF8`)
             */
            encoding: string;
            import: outputs.postgresql.v1.ClusterSpecBootstrapInitdbImportPatch;
            /**
             * The value to be passed as option `--lc-ctype` for initdb (default:`C`)
             */
            localeCType: string;
            /**
             * The value to be passed as option `--lc-collate` for initdb (default:`C`)
             */
            localeCollate: string;
            /**
             * The list of options that must be passed to initdb when creating the cluster.
             * Deprecated: This could lead to inconsistent configurations,
             * please use the explicit provided parameters instead.
             * If defined, explicit values will be ignored.
             */
            options: string[];
            /**
             * Name of the owner of the database in the instance to be used
             * by applications. Defaults to the value of the `database` key.
             */
            owner: string;
            /**
             * List of SQL queries to be executed as a superuser in the application
             * database right after the cluster has been created - to be used with extreme care
             * (by default empty)
             */
            postInitApplicationSQL: string[];
            postInitApplicationSQLRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsPatch;
            /**
             * List of SQL queries to be executed as a superuser in the `postgres`
             * database right after the cluster has been created - to be used with extreme care
             * (by default empty)
             */
            postInitSQL: string[];
            postInitSQLRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitSQLRefsPatch;
            /**
             * List of SQL queries to be executed as a superuser in the `template1`
             * database right after the cluster has been created - to be used with extreme care
             * (by default empty)
             */
            postInitTemplateSQL: string[];
            postInitTemplateSQLRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsPatch;
            secret: outputs.postgresql.v1.ClusterSpecBootstrapInitdbSecretPatch;
            /**
             * The value in megabytes (1 to 1024) to be passed to the `--wal-segsize`
             * option for initdb (default: empty, resulting in PostgreSQL default: 16MB)
             */
            walSegmentSize: number;
        }

        /**
         * List of references to ConfigMaps or Secrets containing SQL files
         * to be executed as a superuser in the application database right after
         * the cluster has been created. The references are processed in a specific order:
         * first, all Secrets are processed, followed by all ConfigMaps.
         * Within each group, the processing order follows the sequence specified
         * in their respective arrays.
         * (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefs {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefs[];
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefs[];
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefs {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * List of references to ConfigMaps or Secrets containing SQL files
         * to be executed as a superuser in the application database right after
         * the cluster has been created. The references are processed in a specific order:
         * first, all Secrets are processed, followed by all ConfigMaps.
         * Within each group, the processing order follows the sequence specified
         * in their respective arrays.
         * (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsPatch {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsPatch[];
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsPatch[];
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefs {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * List of references to ConfigMaps or Secrets containing SQL files
         * to be executed as a superuser in the `postgres` database right after
         * the cluster has been created. The references are processed in a specific order:
         * first, all Secrets are processed, followed by all ConfigMaps.
         * Within each group, the processing order follows the sequence specified
         * in their respective arrays.
         * (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitSQLRefs {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefs[];
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefs[];
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefs {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * List of references to ConfigMaps or Secrets containing SQL files
         * to be executed as a superuser in the `postgres` database right after
         * the cluster has been created. The references are processed in a specific order:
         * first, all Secrets are processed, followed by all ConfigMaps.
         * Within each group, the processing order follows the sequence specified
         * in their respective arrays.
         * (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitSQLRefsPatch {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefsPatch[];
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefsPatch[];
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefs {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * List of references to ConfigMaps or Secrets containing SQL files
         * to be executed as a superuser in the `template1` database right after
         * the cluster has been created. The references are processed in a specific order:
         * first, all Secrets are processed, followed by all ConfigMaps.
         * Within each group, the processing order follows the sequence specified
         * in their respective arrays.
         * (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitTemplateSQLRefs {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefs[];
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefs[];
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefs {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * List of references to ConfigMaps or Secrets containing SQL files
         * to be executed as a superuser in the `template1` database right after
         * the cluster has been created. The references are processed in a specific order:
         * first, all Secrets are processed, followed by all ConfigMaps.
         * Within each group, the processing order follows the sequence specified
         * in their respective arrays.
         * (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsPatch {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefsPatch[];
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefsPatch[];
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefs {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Name of the secret containing the initial credentials for the
         * owner of the user database. If empty a new secret will be
         * created from scratch
         */
        export interface ClusterSpecBootstrapInitdbSecret {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Name of the secret containing the initial credentials for the
         * owner of the user database. If empty a new secret will be
         * created from scratch
         */
        export interface ClusterSpecBootstrapInitdbSecretPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Instructions to bootstrap this cluster
         */
        export interface ClusterSpecBootstrapPatch {
            initdb: outputs.postgresql.v1.ClusterSpecBootstrapInitdbPatch;
            pg_basebackup: outputs.postgresql.v1.ClusterSpecBootstrapPgBasebackupPatch;
            recovery: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryPatch;
        }

        /**
         * Bootstrap the cluster taking a physical backup of another compatible
         * PostgreSQL instance
         */
        export interface ClusterSpecBootstrapPgBasebackup {
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database: string;
            /**
             * Name of the owner of the database in the instance to be used
             * by applications. Defaults to the value of the `database` key.
             */
            owner: string;
            secret: outputs.postgresql.v1.ClusterSpecBootstrapPgBasebackupSecret;
            /**
             * The name of the server of which we need to take a physical backup
             */
            source: string;
        }

        /**
         * Bootstrap the cluster taking a physical backup of another compatible
         * PostgreSQL instance
         */
        export interface ClusterSpecBootstrapPgBasebackupPatch {
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database: string;
            /**
             * Name of the owner of the database in the instance to be used
             * by applications. Defaults to the value of the `database` key.
             */
            owner: string;
            secret: outputs.postgresql.v1.ClusterSpecBootstrapPgBasebackupSecretPatch;
            /**
             * The name of the server of which we need to take a physical backup
             */
            source: string;
        }

        /**
         * Name of the secret containing the initial credentials for the
         * owner of the user database. If empty a new secret will be
         * created from scratch
         */
        export interface ClusterSpecBootstrapPgBasebackupSecret {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Name of the secret containing the initial credentials for the
         * owner of the user database. If empty a new secret will be
         * created from scratch
         */
        export interface ClusterSpecBootstrapPgBasebackupSecretPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Bootstrap the cluster from a backup
         */
        export interface ClusterSpecBootstrapRecovery {
            backup: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryBackup;
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database: string;
            /**
             * Name of the owner of the database in the instance to be used
             * by applications. Defaults to the value of the `database` key.
             */
            owner: string;
            recoveryTarget: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryRecoveryTarget;
            secret: outputs.postgresql.v1.ClusterSpecBootstrapRecoverySecret;
            /**
             * The external cluster whose backup we will restore. This is also
             * used as the name of the folder under which the backup is stored,
             * so it must be set to the name of the source cluster
             * Mutually exclusive with `backup`.
             */
            source: string;
            volumeSnapshots: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshots;
        }

        /**
         * The backup object containing the physical base backup from which to
         * initiate the recovery procedure.
         * Mutually exclusive with `source` and `volumeSnapshots`.
         */
        export interface ClusterSpecBootstrapRecoveryBackup {
            endpointCA: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryBackupEndpointCA;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive.
         */
        export interface ClusterSpecBootstrapRecoveryBackupEndpointCA {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive.
         */
        export interface ClusterSpecBootstrapRecoveryBackupEndpointCAPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The backup object containing the physical base backup from which to
         * initiate the recovery procedure.
         * Mutually exclusive with `source` and `volumeSnapshots`.
         */
        export interface ClusterSpecBootstrapRecoveryBackupPatch {
            endpointCA: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryBackupEndpointCAPatch;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Bootstrap the cluster from a backup
         */
        export interface ClusterSpecBootstrapRecoveryPatch {
            backup: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryBackupPatch;
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database: string;
            /**
             * Name of the owner of the database in the instance to be used
             * by applications. Defaults to the value of the `database` key.
             */
            owner: string;
            recoveryTarget: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryRecoveryTargetPatch;
            secret: outputs.postgresql.v1.ClusterSpecBootstrapRecoverySecretPatch;
            /**
             * The external cluster whose backup we will restore. This is also
             * used as the name of the folder under which the backup is stored,
             * so it must be set to the name of the source cluster
             * Mutually exclusive with `backup`.
             */
            source: string;
            volumeSnapshots: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsPatch;
        }

        /**
         * By default, the recovery process applies all the available
         * WAL files in the archive (full recovery). However, you can also
         * end the recovery as soon as a consistent state is reached or
         * recover to a point-in-time (PITR) by specifying a `RecoveryTarget` object,
         * as expected by PostgreSQL (i.e., timestamp, transaction Id, LSN, ...).
         * More info: https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET
         */
        export interface ClusterSpecBootstrapRecoveryRecoveryTarget {
            /**
             * The ID of the backup from which to start the recovery process.
             * If empty (default) the operator will automatically detect the backup
             * based on targetTime or targetLSN if specified. Otherwise use the
             * latest available backup in chronological order.
             */
            backupID: string;
            /**
             * Set the target to be exclusive. If omitted, defaults to false, so that
             * in Postgres, `recovery_target_inclusive` will be true
             */
            exclusive: boolean;
            /**
             * End recovery as soon as a consistent state is reached
             */
            targetImmediate: boolean;
            /**
             * The target LSN (Log Sequence Number)
             */
            targetLSN: string;
            /**
             * The target name (to be previously created
             * with `pg_create_restore_point`)
             */
            targetName: string;
            /**
             * The target timeline ("latest" or a positive integer)
             */
            targetTLI: string;
            /**
             * The target time as a timestamp in the RFC3339 standard
             */
            targetTime: string;
            /**
             * The target transaction ID
             */
            targetXID: string;
        }

        /**
         * By default, the recovery process applies all the available
         * WAL files in the archive (full recovery). However, you can also
         * end the recovery as soon as a consistent state is reached or
         * recover to a point-in-time (PITR) by specifying a `RecoveryTarget` object,
         * as expected by PostgreSQL (i.e., timestamp, transaction Id, LSN, ...).
         * More info: https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET
         */
        export interface ClusterSpecBootstrapRecoveryRecoveryTargetPatch {
            /**
             * The ID of the backup from which to start the recovery process.
             * If empty (default) the operator will automatically detect the backup
             * based on targetTime or targetLSN if specified. Otherwise use the
             * latest available backup in chronological order.
             */
            backupID: string;
            /**
             * Set the target to be exclusive. If omitted, defaults to false, so that
             * in Postgres, `recovery_target_inclusive` will be true
             */
            exclusive: boolean;
            /**
             * End recovery as soon as a consistent state is reached
             */
            targetImmediate: boolean;
            /**
             * The target LSN (Log Sequence Number)
             */
            targetLSN: string;
            /**
             * The target name (to be previously created
             * with `pg_create_restore_point`)
             */
            targetName: string;
            /**
             * The target timeline ("latest" or a positive integer)
             */
            targetTLI: string;
            /**
             * The target time as a timestamp in the RFC3339 standard
             */
            targetTime: string;
            /**
             * The target transaction ID
             */
            targetXID: string;
        }

        /**
         * Name of the secret containing the initial credentials for the
         * owner of the user database. If empty a new secret will be
         * created from scratch
         */
        export interface ClusterSpecBootstrapRecoverySecret {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Name of the secret containing the initial credentials for the
         * owner of the user database. If empty a new secret will be
         * created from scratch
         */
        export interface ClusterSpecBootstrapRecoverySecretPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The static PVC data source(s) from which to initiate the
         * recovery procedure. Currently supporting `VolumeSnapshot`
         * and `PersistentVolumeClaim` resources that map an existing
         * PVC group, compatible with CloudNativePG, and taken with
         * a cold backup copy on a fenced Postgres instance (limitation
         * which will be removed in the future when online backup
         * will be implemented).
         * Mutually exclusive with `backup`.
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshots {
            storage: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsStorage;
            /**
             * Configuration of the storage for PostgreSQL tablespaces
             */
            tablespaceStorage: {[key: string]: {[key: string]: string}};
            walStorage: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorage;
        }

        /**
         * The static PVC data source(s) from which to initiate the
         * recovery procedure. Currently supporting `VolumeSnapshot`
         * and `PersistentVolumeClaim` resources that map an existing
         * PVC group, compatible with CloudNativePG, and taken with
         * a cold backup copy on a fenced Postgres instance (limitation
         * which will be removed in the future when online backup
         * will be implemented).
         * Mutually exclusive with `backup`.
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsPatch {
            storage: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsStoragePatch;
            /**
             * Configuration of the storage for PostgreSQL tablespaces
             */
            tablespaceStorage: {[key: string]: {[key: string]: string}};
            walStorage: outputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStoragePatch;
        }

        /**
         * Configuration of the storage of the instances
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsStorage {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Configuration of the storage of the instances
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsStoragePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorage {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStoragePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * The configuration for the CA and related certificates
         */
        export interface ClusterSpecCertificates {
            /**
             * The secret containing the Client CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate all the client certificates.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the client certificates,
             * used as `ssl_ca_file` of all the instances.<br />
             * - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided,
             * this can be omitted.<br />
             */
            clientCASecret: string;
            /**
             * The secret of type kubernetes.io/tls containing the client certificate to authenticate as
             * the `streaming_replica` user.
             * If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be
             * created using the provided CA.
             */
            replicationTLSSecret: string;
            /**
             * The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
             */
            serverAltDNSNames: string[];
            /**
             * The secret containing the Server CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the server certificate,
             * used as `sslrootcert` in client connection strings.<br />
             * - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided,
             * this can be omitted.<br />
             */
            serverCASecret: string;
            /**
             * The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as
             * `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely.
             * If not defined, ServerCASecret must provide also `ca.key` and a new secret will be
             * created using the provided CA.
             */
            serverTLSSecret: string;
        }

        /**
         * The configuration for the CA and related certificates
         */
        export interface ClusterSpecCertificatesPatch {
            /**
             * The secret containing the Client CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate all the client certificates.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the client certificates,
             * used as `ssl_ca_file` of all the instances.<br />
             * - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided,
             * this can be omitted.<br />
             */
            clientCASecret: string;
            /**
             * The secret of type kubernetes.io/tls containing the client certificate to authenticate as
             * the `streaming_replica` user.
             * If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be
             * created using the provided CA.
             */
            replicationTLSSecret: string;
            /**
             * The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
             */
            serverAltDNSNames: string[];
            /**
             * The secret containing the Server CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the server certificate,
             * used as `sslrootcert` in client connection strings.<br />
             * - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided,
             * this can be omitted.<br />
             */
            serverCASecret: string;
            /**
             * The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as
             * `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely.
             * If not defined, ServerCASecret must provide also `ca.key` and a new secret will be
             * created using the provided CA.
             */
            serverTLSSecret: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.ClusterSpecEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterSpecEnvFrom {
            configMapRef: outputs.postgresql.v1.ClusterSpecEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.ClusterSpecEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterSpecEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterSpecEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterSpecEnvFromPatch {
            configMapRef: outputs.postgresql.v1.ClusterSpecEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.ClusterSpecEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterSpecEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterSpecEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterSpecEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.ClusterSpecEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterSpecEnvValueFrom {
            configMapKeyRef: outputs.postgresql.v1.ClusterSpecEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.postgresql.v1.ClusterSpecEnvValueFromFieldRef;
            resourceFieldRef: outputs.postgresql.v1.ClusterSpecEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.postgresql.v1.ClusterSpecEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterSpecEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterSpecEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterSpecEnvValueFromPatch {
            configMapKeyRef: outputs.postgresql.v1.ClusterSpecEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.postgresql.v1.ClusterSpecEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.postgresql.v1.ClusterSpecEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.postgresql.v1.ClusterSpecEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterSpecEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterSpecEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * EphemeralVolumeSource allows the user to configure the source of ephemeral volumes.
         */
        export interface ClusterSpecEphemeralVolumeSource {
            volumeClaimTemplate: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplate;
        }

        /**
         * EphemeralVolumeSource allows the user to configure the source of ephemeral volumes.
         */
        export interface ClusterSpecEphemeralVolumeSourcePatch {
            volumeClaimTemplate: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplatePatch;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         *
         * Required, must not be nil.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC
             * when creating it. No other fields are allowed and will be rejected during
             * validation.
             */
            metadata: {[key: string]: string};
            spec: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpec;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         *
         * Required, must not be nil.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplatePatch {
            /**
             * May contain labels and annotations that will be copied into the PVC
             * when creating it. No other fields are allowed and will be rejected during
             * validation.
             */
            metadata: {[key: string]: string};
            spec: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecPatch;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResources;
            selector: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * EphemeralVolumesSizeLimit allows the user to set the limits for the ephemeral
         * volumes
         */
        export interface ClusterSpecEphemeralVolumesSizeLimit {
            /**
             * Shm is the size limit of the shared memory volume
             */
            shm: number | string;
            /**
             * TemporaryData is the size limit of the temporary data volume
             */
            temporaryData: number | string;
        }

        /**
         * EphemeralVolumesSizeLimit allows the user to set the limits for the ephemeral
         * volumes
         */
        export interface ClusterSpecEphemeralVolumesSizeLimitPatch {
            /**
             * Shm is the size limit of the shared memory volume
             */
            shm: number | string;
            /**
             * TemporaryData is the size limit of the temporary data volume
             */
            temporaryData: number | string;
        }

        /**
         * ExternalCluster represents the connection parameters to an
         * external cluster which is used in the other sections of the configuration
         */
        export interface ClusterSpecExternalClusters {
            barmanObjectStore: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStore;
            /**
             * The list of connection parameters, such as dbname, host, username, etc
             */
            connectionParameters: {[key: string]: string};
            /**
             * The server name, required
             */
            name: string;
            password: outputs.postgresql.v1.ClusterSpecExternalClustersPassword;
            sslCert: outputs.postgresql.v1.ClusterSpecExternalClustersSslCert;
            sslKey: outputs.postgresql.v1.ClusterSpecExternalClustersSslKey;
            sslRootCert: outputs.postgresql.v1.ClusterSpecExternalClustersSslRootCert;
        }

        /**
         * The configuration for the barman-cloud tool suite
         */
        export interface ClusterSpecExternalClustersBarmanObjectStore {
            azureCredentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentials;
            data: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreData;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder)
             * this path, with different destination folders, will be used for WALs
             * and for data
             */
            destinationPath: string;
            endpointCA: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreEndpointCA;
            /**
             * Endpoint to be used to upload data to the cloud,
             * overriding the automatic endpoint discovery
             */
            endpointURL: string;
            googleCredentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentials;
            /**
             * HistoryTags is a list of key value pairs that will be passed to the
             * Barman --history-tags option.
             */
            historyTags: {[key: string]: string};
            s3Credentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3Credentials;
            /**
             * The server name on S3, the cluster name is used if this
             * parameter is omitted
             */
            serverName: string;
            /**
             * Tags is a list of key value pairs that will be passed to the
             * Barman --tags option.
             */
            tags: {[key: string]: string};
            wal: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreWal;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentials {
            connectionString: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsConnectionString;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD: boolean;
            storageAccount: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageAccount;
            storageKey: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageKey;
            storageSasToken: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageSasToken;
        }

        /**
         * The connection string to be used
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsConnectionString {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The connection string to be used
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsConnectionStringPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsPatch {
            connectionString: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsConnectionStringPatch;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD: boolean;
            storageAccount: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageAccountPatch;
            storageKey: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageKeyPatch;
            storageSasToken: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageSasTokenPatch;
        }

        /**
         * The storage account where to upload data
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageAccount {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account where to upload data
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageAccountPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account key to be used in conjunction
         * with the storage account name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageKey {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The storage account key to be used in conjunction
         * with the storage account name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageKeyPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * A shared-access-signature to be used in conjunction with
         * the storage account name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageSasToken {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * A shared-access-signature to be used in conjunction with
         * the storage account name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageSasTokenPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The configuration to be used to backup the data files
         * When not defined, base backups files will be stored uncompressed and may
         * be unencrypted in the object store, according to the bucket default
         * policy.
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreData {
            /**
             * AdditionalCommandArgs represents additional arguments that can be appended
             * to the 'barman-cloud-backup' command-line invocation. These arguments
             * provide flexibility to customize the backup process further according to
             * specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-backup' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            additionalCommandArgs: string[];
            /**
             * Compress a backup file (a tar file per tablespace) while streaming it
             * to the object store. Available options are empty string (no
             * compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * The number of parallel jobs to be used to upload the backup, defaults
             * to 2
             */
            jobs: number;
        }

        /**
         * The configuration to be used to backup the data files
         * When not defined, base backups files will be stored uncompressed and may
         * be unencrypted in the object store, according to the bucket default
         * policy.
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreDataPatch {
            /**
             * AdditionalCommandArgs represents additional arguments that can be appended
             * to the 'barman-cloud-backup' command-line invocation. These arguments
             * provide flexibility to customize the backup process further according to
             * specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-backup' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            additionalCommandArgs: string[];
            /**
             * Compress a backup file (a tar file per tablespace) while streaming it
             * to the object store. Available options are empty string (no
             * compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * The number of parallel jobs to be used to upload the backup, defaults
             * to 2
             */
            jobs: number;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreEndpointCA {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint.
         * Useful when using self-signed certificates to avoid
         * errors with certificate issuer and barman-cloud-wal-archive
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreEndpointCAPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentials {
            applicationCredentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsApplicationCredentials;
            /**
             * If set to true, will presume that it's running inside a GKE environment,
             * default to false.
             */
            gkeEnvironment: boolean;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsApplicationCredentials {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsApplicationCredentialsPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsPatch {
            applicationCredentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsApplicationCredentialsPatch;
            /**
             * If set to true, will presume that it's running inside a GKE environment,
             * default to false.
             */
            gkeEnvironment: boolean;
        }

        /**
         * The configuration for the barman-cloud tool suite
         */
        export interface ClusterSpecExternalClustersBarmanObjectStorePatch {
            azureCredentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsPatch;
            data: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreDataPatch;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder)
             * this path, with different destination folders, will be used for WALs
             * and for data
             */
            destinationPath: string;
            endpointCA: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreEndpointCAPatch;
            /**
             * Endpoint to be used to upload data to the cloud,
             * overriding the automatic endpoint discovery
             */
            endpointURL: string;
            googleCredentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsPatch;
            /**
             * HistoryTags is a list of key value pairs that will be passed to the
             * Barman --history-tags option.
             */
            historyTags: {[key: string]: string};
            s3Credentials: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsPatch;
            /**
             * The server name on S3, the cluster name is used if this
             * parameter is omitted
             */
            serverName: string;
            /**
             * Tags is a list of key value pairs that will be passed to the
             * Barman --tags option.
             */
            tags: {[key: string]: string};
            wal: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreWalPatch;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3Credentials {
            accessKeyId: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsAccessKeyId;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole: boolean;
            region: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsRegion;
            secretAccessKey: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSecretAccessKey;
            sessionToken: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSessionToken;
        }

        /**
         * The reference to the access key id
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsAccessKeyId {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the access key id
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsAccessKeyIdPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsPatch {
            accessKeyId: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsAccessKeyIdPatch;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole: boolean;
            region: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsRegionPatch;
            secretAccessKey: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSecretAccessKeyPatch;
            sessionToken: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSessionTokenPatch;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsRegion {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsRegionPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret access key
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSecretAccessKey {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The reference to the secret access key
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSecretAccessKeyPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The references to the session key
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSessionToken {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The references to the session key
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSessionTokenPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The configuration for the backup of the WAL stream.
         * When not defined, WAL files will be stored uncompressed and may be
         * unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreWal {
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-archive'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL archive process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            archiveAdditionalCommandArgs: string[];
            /**
             * Compress a WAL file before sending it to the object store. Available
             * options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Number of WAL files to be either archived in parallel (when the
             * PostgreSQL instance is archiving to a backup object store) or
             * restored in parallel (when a PostgreSQL standby is fetching WAL
             * files from a recovery object store). If not specified, WAL files
             * will be processed one at a time. It accepts a positive integer as a
             * value - with 1 being the minimum accepted value.
             */
            maxParallel: number;
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-restore'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL restore process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            restoreAdditionalCommandArgs: string[];
        }

        /**
         * The configuration for the backup of the WAL stream.
         * When not defined, WAL files will be stored uncompressed and may be
         * unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreWalPatch {
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-archive'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL archive process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            archiveAdditionalCommandArgs: string[];
            /**
             * Compress a WAL file before sending it to the object store. Available
             * options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression: string;
            /**
             * Whenever to force the encryption of files (if the bucket is
             * not already configured for that).
             * Allowed options are empty string (use the bucket policy, default),
             * `AES256` and `aws:kms`
             */
            encryption: string;
            /**
             * Number of WAL files to be either archived in parallel (when the
             * PostgreSQL instance is archiving to a backup object store) or
             * restored in parallel (when a PostgreSQL standby is fetching WAL
             * files from a recovery object store). If not specified, WAL files
             * will be processed one at a time. It accepts a positive integer as a
             * value - with 1 being the minimum accepted value.
             */
            maxParallel: number;
            /**
             * Additional arguments that can be appended to the 'barman-cloud-wal-restore'
             * command-line invocation. These arguments provide flexibility to customize
             * the WAL restore process further, according to specific requirements or configurations.
             *
             *
             * Example:
             * In a scenario where specialized backup options are required, such as setting
             * a specific timeout or defining custom behavior, users can use this field
             * to specify additional command arguments.
             *
             *
             * Note:
             * It's essential to ensure that the provided arguments are valid and supported
             * by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
             * behavior during execution.
             */
            restoreAdditionalCommandArgs: string[];
        }

        /**
         * The reference to the password to be used to connect to the server.
         * If a password is provided, CloudNativePG creates a PostgreSQL
         * passfile at `/controller/external/NAME/pass` (where "NAME" is the
         * cluster's name). This passfile is automatically referenced in the
         * connection string when establishing a connection to the remote
         * PostgreSQL server from the current PostgreSQL `Cluster`. This ensures
         * secure and efficient password management for external clusters.
         */
        export interface ClusterSpecExternalClustersPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The reference to the password to be used to connect to the server.
         * If a password is provided, CloudNativePG creates a PostgreSQL
         * passfile at `/controller/external/NAME/pass` (where "NAME" is the
         * cluster's name). This passfile is automatically referenced in the
         * connection string when establishing a connection to the remote
         * PostgreSQL server from the current PostgreSQL `Cluster`. This ensures
         * secure and efficient password management for external clusters.
         */
        export interface ClusterSpecExternalClustersPasswordPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * ExternalCluster represents the connection parameters to an
         * external cluster which is used in the other sections of the configuration
         */
        export interface ClusterSpecExternalClustersPatch {
            barmanObjectStore: outputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStorePatch;
            /**
             * The list of connection parameters, such as dbname, host, username, etc
             */
            connectionParameters: {[key: string]: string};
            /**
             * The server name, required
             */
            name: string;
            password: outputs.postgresql.v1.ClusterSpecExternalClustersPasswordPatch;
            sslCert: outputs.postgresql.v1.ClusterSpecExternalClustersSslCertPatch;
            sslKey: outputs.postgresql.v1.ClusterSpecExternalClustersSslKeyPatch;
            sslRootCert: outputs.postgresql.v1.ClusterSpecExternalClustersSslRootCertPatch;
        }

        /**
         * The reference to an SSL certificate to be used to connect to this
         * instance
         */
        export interface ClusterSpecExternalClustersSslCert {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The reference to an SSL certificate to be used to connect to this
         * instance
         */
        export interface ClusterSpecExternalClustersSslCertPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The reference to an SSL private key to be used to connect to this
         * instance
         */
        export interface ClusterSpecExternalClustersSslKey {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The reference to an SSL private key to be used to connect to this
         * instance
         */
        export interface ClusterSpecExternalClustersSslKeyPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The reference to an SSL CA public key to be used to connect to this
         * instance
         */
        export interface ClusterSpecExternalClustersSslRootCert {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * The reference to an SSL CA public key to be used to connect to this
         * instance
         */
        export interface ClusterSpecExternalClustersSslRootCertPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Defines the major PostgreSQL version we want to use within an ImageCatalog
         */
        export interface ClusterSpecImageCatalogRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * The major version of PostgreSQL we want to use from the ImageCatalog
             */
            major: number;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * Defines the major PostgreSQL version we want to use within an ImageCatalog
         */
        export interface ClusterSpecImageCatalogRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * The major version of PostgreSQL we want to use from the ImageCatalog
             */
            major: number;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate a
         * local object with a known type inside the same namespace
         */
        export interface ClusterSpecImagePullSecrets {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate a
         * local object with a known type inside the same namespace
         */
        export interface ClusterSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Metadata that will be inherited by all objects related to the Cluster
         */
        export interface ClusterSpecInheritedMetadata {
            annotations: {[key: string]: string};
            labels: {[key: string]: string};
        }

        /**
         * Metadata that will be inherited by all objects related to the Cluster
         */
        export interface ClusterSpecInheritedMetadataPatch {
            annotations: {[key: string]: string};
            labels: {[key: string]: string};
        }

        /**
         * The configuration that is used by the portions of PostgreSQL that are managed by the instance manager
         */
        export interface ClusterSpecManaged {
            /**
             * Database roles managed by the `Cluster`
             */
            roles: outputs.postgresql.v1.ClusterSpecManagedRoles[];
            services: outputs.postgresql.v1.ClusterSpecManagedServices;
        }

        /**
         * The configuration that is used by the portions of PostgreSQL that are managed by the instance manager
         */
        export interface ClusterSpecManagedPatch {
            /**
             * Database roles managed by the `Cluster`
             */
            roles: outputs.postgresql.v1.ClusterSpecManagedRolesPatch[];
            services: outputs.postgresql.v1.ClusterSpecManagedServicesPatch;
        }

        /**
         * RoleConfiguration is the representation, in Kubernetes, of a PostgreSQL role
         * with the additional field Ensure specifying whether to ensure the presence or
         * absence of the role in the database
         *
         *
         * The defaults of the CREATE ROLE command are applied
         * Reference: https://www.postgresql.org/docs/current/sql-createrole.html
         */
        export interface ClusterSpecManagedRoles {
            /**
             * Whether a role bypasses every row-level security (RLS) policy.
             * Default is `false`.
             */
            bypassrls: boolean;
            /**
             * Description of the role
             */
            comment: string;
            /**
             * If the role can log in, this specifies how many concurrent
             * connections the role can make. `-1` (the default) means no limit.
             */
            connectionLimit: number;
            /**
             * When set to `true`, the role being defined will be allowed to create
             * new databases. Specifying `false` (default) will deny a role the
             * ability to create databases.
             */
            createdb: boolean;
            /**
             * Whether the role will be permitted to create, alter, drop, comment
             * on, change the security label for, and grant or revoke membership in
             * other roles. Default is `false`.
             */
            createrole: boolean;
            /**
             * DisablePassword indicates that a role's password should be set to NULL in Postgres
             */
            disablePassword: boolean;
            /**
             * Ensure the role is `present` or `absent` - defaults to "present"
             */
            ensure: string;
            /**
             * List of one or more existing roles to which this role will be
             * immediately added as a new member. Default empty.
             */
            inRoles: string[];
            /**
             * Whether a role "inherits" the privileges of roles it is a member of.
             * Defaults is `true`.
             */
            inherit: boolean;
            /**
             * Whether the role is allowed to log in. A role having the `login`
             * attribute can be thought of as a user. Roles without this attribute
             * are useful for managing database privileges, but are not users in
             * the usual sense of the word. Default is `false`.
             */
            login: boolean;
            /**
             * Name of the role
             */
            name: string;
            passwordSecret: outputs.postgresql.v1.ClusterSpecManagedRolesPasswordSecret;
            /**
             * Whether a role is a replication role. A role must have this
             * attribute (or be a superuser) in order to be able to connect to the
             * server in replication mode (physical or logical replication) and in
             * order to be able to create or drop replication slots. A role having
             * the `replication` attribute is a very highly privileged role, and
             * should only be used on roles actually used for replication. Default
             * is `false`.
             */
            replication: boolean;
            /**
             * Whether the role is a `superuser` who can override all access
             * restrictions within the database - superuser status is dangerous and
             * should be used only when really needed. You must yourself be a
             * superuser to create a new superuser. Defaults is `false`.
             */
            superuser: boolean;
            /**
             * Date and time after which the role's password is no longer valid.
             * When omitted, the password will never expire (default).
             */
            validUntil: string;
        }

        /**
         * Secret containing the password of the role (if present)
         * If null, the password will be ignored unless DisablePassword is set
         */
        export interface ClusterSpecManagedRolesPasswordSecret {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Secret containing the password of the role (if present)
         * If null, the password will be ignored unless DisablePassword is set
         */
        export interface ClusterSpecManagedRolesPasswordSecretPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * RoleConfiguration is the representation, in Kubernetes, of a PostgreSQL role
         * with the additional field Ensure specifying whether to ensure the presence or
         * absence of the role in the database
         *
         *
         * The defaults of the CREATE ROLE command are applied
         * Reference: https://www.postgresql.org/docs/current/sql-createrole.html
         */
        export interface ClusterSpecManagedRolesPatch {
            /**
             * Whether a role bypasses every row-level security (RLS) policy.
             * Default is `false`.
             */
            bypassrls: boolean;
            /**
             * Description of the role
             */
            comment: string;
            /**
             * If the role can log in, this specifies how many concurrent
             * connections the role can make. `-1` (the default) means no limit.
             */
            connectionLimit: number;
            /**
             * When set to `true`, the role being defined will be allowed to create
             * new databases. Specifying `false` (default) will deny a role the
             * ability to create databases.
             */
            createdb: boolean;
            /**
             * Whether the role will be permitted to create, alter, drop, comment
             * on, change the security label for, and grant or revoke membership in
             * other roles. Default is `false`.
             */
            createrole: boolean;
            /**
             * DisablePassword indicates that a role's password should be set to NULL in Postgres
             */
            disablePassword: boolean;
            /**
             * Ensure the role is `present` or `absent` - defaults to "present"
             */
            ensure: string;
            /**
             * List of one or more existing roles to which this role will be
             * immediately added as a new member. Default empty.
             */
            inRoles: string[];
            /**
             * Whether a role "inherits" the privileges of roles it is a member of.
             * Defaults is `true`.
             */
            inherit: boolean;
            /**
             * Whether the role is allowed to log in. A role having the `login`
             * attribute can be thought of as a user. Roles without this attribute
             * are useful for managing database privileges, but are not users in
             * the usual sense of the word. Default is `false`.
             */
            login: boolean;
            /**
             * Name of the role
             */
            name: string;
            passwordSecret: outputs.postgresql.v1.ClusterSpecManagedRolesPasswordSecretPatch;
            /**
             * Whether a role is a replication role. A role must have this
             * attribute (or be a superuser) in order to be able to connect to the
             * server in replication mode (physical or logical replication) and in
             * order to be able to create or drop replication slots. A role having
             * the `replication` attribute is a very highly privileged role, and
             * should only be used on roles actually used for replication. Default
             * is `false`.
             */
            replication: boolean;
            /**
             * Whether the role is a `superuser` who can override all access
             * restrictions within the database - superuser status is dangerous and
             * should be used only when really needed. You must yourself be a
             * superuser to create a new superuser. Defaults is `false`.
             */
            superuser: boolean;
            /**
             * Date and time after which the role's password is no longer valid.
             * When omitted, the password will never expire (default).
             */
            validUntil: string;
        }

        /**
         * Services roles managed by the `Cluster`
         */
        export interface ClusterSpecManagedServices {
            /**
             * Additional is a list of additional managed services specified by the user.
             */
            additional: outputs.postgresql.v1.ClusterSpecManagedServicesAdditional[];
            /**
             * DisabledDefaultServices is a list of service types that are disabled by default.
             * Valid values are "r", and "ro", representing read, and read-only services.
             */
            disabledDefaultServices: string[];
        }

        /**
         * ManagedService represents a specific service managed by the cluster.
         * It includes the type of service and its associated template specification.
         */
        export interface ClusterSpecManagedServicesAdditional {
            /**
             * SelectorType specifies the type of selectors that the service will have.
             * Valid values are "rw", "r", and "ro", representing read-write, read, and read-only services.
             */
            selectorType: string;
            serviceTemplate: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplate;
            /**
             * UpdateStrategy describes how the service differences should be reconciled
             */
            updateStrategy: string;
        }

        /**
         * ManagedService represents a specific service managed by the cluster.
         * It includes the type of service and its associated template specification.
         */
        export interface ClusterSpecManagedServicesAdditionalPatch {
            /**
             * SelectorType specifies the type of selectors that the service will have.
             * Valid values are "rw", "r", and "ro", representing read-write, read, and read-only services.
             */
            selectorType: string;
            serviceTemplate: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplatePatch;
            /**
             * UpdateStrategy describes how the service differences should be reconciled
             */
            updateStrategy: string;
        }

        /**
         * ServiceTemplate is the template specification for the service.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplate {
            metadata: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateMetadata;
            spec: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpec;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateMetadataPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * ServiceTemplate is the template specification for the service.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplatePatch {
            metadata: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateMetadataPatch;
            spec: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecPatch;
        }

        /**
         * Specification of the desired behavior of the service.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpec {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically
             * allocated for services with type LoadBalancer.  Default is "true". It
             * may be set to "false" if the cluster load-balancer does not rely on
             * NodePorts.  If the caller requests specific NodePorts (by specifying a
             * value), those requests will be respected, regardless of this field.
             * This field may only be set for services with type LoadBalancer and will
             * be cleared if the type is changed to any other type.
             */
            allocateLoadBalancerNodePorts: boolean;
            /**
             * clusterIP is the IP address of the service and is usually assigned
             * randomly. If an address is specified manually, is in-range (as per
             * system configuration), and is not in use, it will be allocated to the
             * service; otherwise creation of the service will fail. This field may not
             * be changed through updates unless the type field is also being changed
             * to ExternalName (which requires this field to be blank) or the type
             * field is being changed from ExternalName (in which case this field may
             * optionally be specified, as describe above).  Valid values are "None",
             * empty string (""), or a valid IP address. Setting this to "None" makes a
             * "headless service" (no virtual IP), which is useful when direct endpoint
             * connections are preferred and proxying is not required.  Only applies to
             * types ClusterIP, NodePort, and LoadBalancer. If this field is specified
             * when creating a Service of type ExternalName, creation will fail. This
             * field will be wiped when updating a Service to type ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP: string;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are
             * usually assigned randomly.  If an address is specified manually, is
             * in-range (as per system configuration), and is not in use, it will be
             * allocated to the service; otherwise creation of the service will fail.
             * This field may not be changed through updates unless the type field is
             * also being changed to ExternalName (which requires this field to be
             * empty) or the type field is being changed from ExternalName (in which
             * case this field may optionally be specified, as describe above).  Valid
             * values are "None", empty string (""), or a valid IP address.  Setting
             * this to "None" makes a "headless service" (no virtual IP), which is
             * useful when direct endpoint connections are preferred and proxying is
             * not required.  Only applies to types ClusterIP, NodePort, and
             * LoadBalancer. If this field is specified when creating a Service of type
             * ExternalName, creation will fail. This field will be wiped when updating
             * a Service to type ExternalName.  If this field is not specified, it will
             * be initialized from the clusterIP field.  If this field is specified,
             * clients must ensure that clusterIPs[0] and clusterIP have the same
             * value.
             *
             *
             * This field may hold a maximum of two entries (dual-stack IPs, in either order).
             * These IPs must correspond to the values of the ipFamilies field. Both
             * clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs: string[];
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster
             * will also accept traffic for this service.  These IPs are not managed by
             * Kubernetes.  The user is responsible for ensuring that traffic arrives
             * at a node with this IP.  A common example is external load-balancers
             * that are not part of the Kubernetes system.
             */
            externalIPs: string[];
            /**
             * externalName is the external reference that discovery mechanisms will
             * return as an alias for this service (e.g. a DNS CNAME record). No
             * proxying will be involved.  Must be a lowercase RFC-1123 hostname
             * (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName: string;
            /**
             * externalTrafficPolicy describes how nodes distribute service traffic they
             * receive on one of the Service's "externally-facing" addresses (NodePorts,
             * ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
             * the service in a way that assumes that external load balancers will take care
             * of balancing the service traffic between nodes, and so each node will deliver
             * traffic only to the node-local endpoints of the service, without masquerading
             * the client source IP. (Traffic mistakenly sent to a node with no endpoints will
             * be dropped.) The default value, "Cluster", uses the standard behavior of
             * routing to all endpoints evenly (possibly modified by topology and other
             * features). Note that traffic sent to an External IP or LoadBalancer IP from
             * within the cluster will always get "Cluster" semantics, but clients sending to
             * a NodePort from within the cluster may need to take traffic policy into account
             * when picking a node.
             */
            externalTrafficPolicy: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service.
             * This only applies when type is set to LoadBalancer and
             * externalTrafficPolicy is set to Local. If a value is specified, is
             * in-range, and is not in use, it will be used.  If not specified, a value
             * will be automatically allocated.  External systems (e.g. load-balancers)
             * can use this port to determine if a given node holds endpoints for this
             * service or not.  If this field is specified when creating a Service
             * which does not need it, creation will fail. This field will be wiped
             * when updating a Service to no longer need it (e.g. changing type).
             * This field cannot be updated once set.
             */
            healthCheckNodePort: number;
            /**
             * InternalTrafficPolicy describes how nodes distribute service traffic they
             * receive on the ClusterIP. If set to "Local", the proxy will assume that pods
             * only want to talk to endpoints of the service on the same node as the pod,
             * dropping the traffic if there are no local endpoints. The default value,
             * "Cluster", uses the standard behavior of routing to all endpoints evenly
             * (possibly modified by topology and other features).
             */
            internalTrafficPolicy: string;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
             * service. This field is usually assigned automatically based on cluster
             * configuration and the ipFamilyPolicy field. If this field is specified
             * manually, the requested family is available in the cluster,
             * and ipFamilyPolicy allows it, it will be used; otherwise creation of
             * the service will fail. This field is conditionally mutable: it allows
             * for adding or removing a secondary IP family, but it does not allow
             * changing the primary IP family of the Service. Valid values are "IPv4"
             * and "IPv6".  This field only applies to Services of types ClusterIP,
             * NodePort, and LoadBalancer, and does apply to "headless" services.
             * This field will be wiped when updating a Service to type ExternalName.
             *
             *
             * This field may hold a maximum of two entries (dual-stack families, in
             * either order).  These families must correspond to the values of the
             * clusterIPs field, if specified. Both clusterIPs and ipFamilies are
             * governed by the ipFamilyPolicy field.
             */
            ipFamilies: string[];
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by
             * this Service. If there is no value provided, then this field will be set
             * to SingleStack. Services can be "SingleStack" (a single IP family),
             * "PreferDualStack" (two IP families on dual-stack configured clusters or
             * a single IP family on single-stack clusters), or "RequireDualStack"
             * (two IP families on dual-stack configured clusters, otherwise fail). The
             * ipFamilies and clusterIPs fields depend on the value of this field. This
             * field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy: string;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to.
             * If specified, the value of this field must be a label-style identifier, with an optional prefix,
             * e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
             * This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
             * balancer implementation is used, today this is typically done through the cloud provider integration,
             * but should apply for any default implementation. If set, it is assumed that a load balancer
             * implementation is watching for Services with a matching class. Any default load balancer
             * implementation (e.g. cloud providers) should ignore Services that set this field.
             * This field can only be set when creating or updating a Service to type 'LoadBalancer'.
             * Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass: string;
            /**
             * Only applies to Service Type: LoadBalancer.
             * This feature depends on whether the underlying cloud-provider supports specifying
             * the loadBalancerIP when a load balancer is created.
             * This field will be ignored if the cloud-provider does not support the feature.
             * Deprecated: This field was under-specified and its meaning varies across implementations.
             * Using it is non-portable and it may not support dual-stack.
             * Users are encouraged to use implementation-specific annotations when available.
             */
            loadBalancerIP: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider
             * load-balancer will be restricted to the specified client IPs. This field will be ignored if the
             * cloud-provider does not support the feature."
             * More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges: string[];
            /**
             * The list of ports that are exposed by this service.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecPorts[];
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this
             * Service should disregard any indications of ready/not-ready.
             * The primary use case for setting this field is for a StatefulSet's Headless Service to
             * propagate SRV DNS records for its Pods for the purpose of peer discovery.
             * The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
             * Services interpret this to mean that all endpoints are considered "ready" even if the
             * Pods themselves are not. Agents which consume only Kubernetes generated endpoints
             * through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this
             * selector. If empty or not present, the service is assumed to have an
             * external process managing its endpoints, which Kubernetes will not
             * modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
             * Ignored if type is ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity.
             * Enable client IP based session affinity.
             * Must be ClientIP or None.
             * Defaults to None.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity: string;
            sessionAffinityConfig: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfig;
            /**
             * TrafficDistribution offers a way to express preferences for how traffic is
             * distributed to Service endpoints. Implementations can use this field as a
             * hint, but are not required to guarantee strict adherence. If the field is
             * not set, the implementation will apply its default routing strategy. If set
             * to "PreferClose", implementations should prioritize endpoints that are
             * topologically close (e.g., same zone).
             * This is an alpha field and requires enabling ServiceTrafficDistribution feature.
             */
            trafficDistribution: string;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid
             * options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
             * "ClusterIP" allocates a cluster-internal IP address for load-balancing
             * to endpoints. Endpoints are determined by the selector or if that is not
             * specified, by manual construction of an Endpoints object or
             * EndpointSlice objects. If clusterIP is "None", no virtual IP is
             * allocated and the endpoints are published as a set of endpoints rather
             * than a virtual IP.
             * "NodePort" builds on ClusterIP and allocates a port on every node which
             * routes to the same endpoints as the clusterIP.
             * "LoadBalancer" builds on NodePort and creates an external load-balancer
             * (if supported in the current cloud) which routes to the same endpoints
             * as the clusterIP.
             * "ExternalName" aliases this service to the specified externalName.
             * Several other fields do not apply to ExternalName services.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: string;
        }

        /**
         * Specification of the desired behavior of the service.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecPatch {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically
             * allocated for services with type LoadBalancer.  Default is "true". It
             * may be set to "false" if the cluster load-balancer does not rely on
             * NodePorts.  If the caller requests specific NodePorts (by specifying a
             * value), those requests will be respected, regardless of this field.
             * This field may only be set for services with type LoadBalancer and will
             * be cleared if the type is changed to any other type.
             */
            allocateLoadBalancerNodePorts: boolean;
            /**
             * clusterIP is the IP address of the service and is usually assigned
             * randomly. If an address is specified manually, is in-range (as per
             * system configuration), and is not in use, it will be allocated to the
             * service; otherwise creation of the service will fail. This field may not
             * be changed through updates unless the type field is also being changed
             * to ExternalName (which requires this field to be blank) or the type
             * field is being changed from ExternalName (in which case this field may
             * optionally be specified, as describe above).  Valid values are "None",
             * empty string (""), or a valid IP address. Setting this to "None" makes a
             * "headless service" (no virtual IP), which is useful when direct endpoint
             * connections are preferred and proxying is not required.  Only applies to
             * types ClusterIP, NodePort, and LoadBalancer. If this field is specified
             * when creating a Service of type ExternalName, creation will fail. This
             * field will be wiped when updating a Service to type ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP: string;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are
             * usually assigned randomly.  If an address is specified manually, is
             * in-range (as per system configuration), and is not in use, it will be
             * allocated to the service; otherwise creation of the service will fail.
             * This field may not be changed through updates unless the type field is
             * also being changed to ExternalName (which requires this field to be
             * empty) or the type field is being changed from ExternalName (in which
             * case this field may optionally be specified, as describe above).  Valid
             * values are "None", empty string (""), or a valid IP address.  Setting
             * this to "None" makes a "headless service" (no virtual IP), which is
             * useful when direct endpoint connections are preferred and proxying is
             * not required.  Only applies to types ClusterIP, NodePort, and
             * LoadBalancer. If this field is specified when creating a Service of type
             * ExternalName, creation will fail. This field will be wiped when updating
             * a Service to type ExternalName.  If this field is not specified, it will
             * be initialized from the clusterIP field.  If this field is specified,
             * clients must ensure that clusterIPs[0] and clusterIP have the same
             * value.
             *
             *
             * This field may hold a maximum of two entries (dual-stack IPs, in either order).
             * These IPs must correspond to the values of the ipFamilies field. Both
             * clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs: string[];
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster
             * will also accept traffic for this service.  These IPs are not managed by
             * Kubernetes.  The user is responsible for ensuring that traffic arrives
             * at a node with this IP.  A common example is external load-balancers
             * that are not part of the Kubernetes system.
             */
            externalIPs: string[];
            /**
             * externalName is the external reference that discovery mechanisms will
             * return as an alias for this service (e.g. a DNS CNAME record). No
             * proxying will be involved.  Must be a lowercase RFC-1123 hostname
             * (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName: string;
            /**
             * externalTrafficPolicy describes how nodes distribute service traffic they
             * receive on one of the Service's "externally-facing" addresses (NodePorts,
             * ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
             * the service in a way that assumes that external load balancers will take care
             * of balancing the service traffic between nodes, and so each node will deliver
             * traffic only to the node-local endpoints of the service, without masquerading
             * the client source IP. (Traffic mistakenly sent to a node with no endpoints will
             * be dropped.) The default value, "Cluster", uses the standard behavior of
             * routing to all endpoints evenly (possibly modified by topology and other
             * features). Note that traffic sent to an External IP or LoadBalancer IP from
             * within the cluster will always get "Cluster" semantics, but clients sending to
             * a NodePort from within the cluster may need to take traffic policy into account
             * when picking a node.
             */
            externalTrafficPolicy: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service.
             * This only applies when type is set to LoadBalancer and
             * externalTrafficPolicy is set to Local. If a value is specified, is
             * in-range, and is not in use, it will be used.  If not specified, a value
             * will be automatically allocated.  External systems (e.g. load-balancers)
             * can use this port to determine if a given node holds endpoints for this
             * service or not.  If this field is specified when creating a Service
             * which does not need it, creation will fail. This field will be wiped
             * when updating a Service to no longer need it (e.g. changing type).
             * This field cannot be updated once set.
             */
            healthCheckNodePort: number;
            /**
             * InternalTrafficPolicy describes how nodes distribute service traffic they
             * receive on the ClusterIP. If set to "Local", the proxy will assume that pods
             * only want to talk to endpoints of the service on the same node as the pod,
             * dropping the traffic if there are no local endpoints. The default value,
             * "Cluster", uses the standard behavior of routing to all endpoints evenly
             * (possibly modified by topology and other features).
             */
            internalTrafficPolicy: string;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
             * service. This field is usually assigned automatically based on cluster
             * configuration and the ipFamilyPolicy field. If this field is specified
             * manually, the requested family is available in the cluster,
             * and ipFamilyPolicy allows it, it will be used; otherwise creation of
             * the service will fail. This field is conditionally mutable: it allows
             * for adding or removing a secondary IP family, but it does not allow
             * changing the primary IP family of the Service. Valid values are "IPv4"
             * and "IPv6".  This field only applies to Services of types ClusterIP,
             * NodePort, and LoadBalancer, and does apply to "headless" services.
             * This field will be wiped when updating a Service to type ExternalName.
             *
             *
             * This field may hold a maximum of two entries (dual-stack families, in
             * either order).  These families must correspond to the values of the
             * clusterIPs field, if specified. Both clusterIPs and ipFamilies are
             * governed by the ipFamilyPolicy field.
             */
            ipFamilies: string[];
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by
             * this Service. If there is no value provided, then this field will be set
             * to SingleStack. Services can be "SingleStack" (a single IP family),
             * "PreferDualStack" (two IP families on dual-stack configured clusters or
             * a single IP family on single-stack clusters), or "RequireDualStack"
             * (two IP families on dual-stack configured clusters, otherwise fail). The
             * ipFamilies and clusterIPs fields depend on the value of this field. This
             * field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy: string;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to.
             * If specified, the value of this field must be a label-style identifier, with an optional prefix,
             * e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
             * This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
             * balancer implementation is used, today this is typically done through the cloud provider integration,
             * but should apply for any default implementation. If set, it is assumed that a load balancer
             * implementation is watching for Services with a matching class. Any default load balancer
             * implementation (e.g. cloud providers) should ignore Services that set this field.
             * This field can only be set when creating or updating a Service to type 'LoadBalancer'.
             * Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass: string;
            /**
             * Only applies to Service Type: LoadBalancer.
             * This feature depends on whether the underlying cloud-provider supports specifying
             * the loadBalancerIP when a load balancer is created.
             * This field will be ignored if the cloud-provider does not support the feature.
             * Deprecated: This field was under-specified and its meaning varies across implementations.
             * Using it is non-portable and it may not support dual-stack.
             * Users are encouraged to use implementation-specific annotations when available.
             */
            loadBalancerIP: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider
             * load-balancer will be restricted to the specified client IPs. This field will be ignored if the
             * cloud-provider does not support the feature."
             * More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges: string[];
            /**
             * The list of ports that are exposed by this service.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecPortsPatch[];
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this
             * Service should disregard any indications of ready/not-ready.
             * The primary use case for setting this field is for a StatefulSet's Headless Service to
             * propagate SRV DNS records for its Pods for the purpose of peer discovery.
             * The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
             * Services interpret this to mean that all endpoints are considered "ready" even if the
             * Pods themselves are not. Agents which consume only Kubernetes generated endpoints
             * through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this
             * selector. If empty or not present, the service is assumed to have an
             * external process managing its endpoints, which Kubernetes will not
             * modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
             * Ignored if type is ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity.
             * Enable client IP based session affinity.
             * Must be ClientIP or None.
             * Defaults to None.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity: string;
            sessionAffinityConfig: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfigPatch;
            /**
             * TrafficDistribution offers a way to express preferences for how traffic is
             * distributed to Service endpoints. Implementations can use this field as a
             * hint, but are not required to guarantee strict adherence. If the field is
             * not set, the implementation will apply its default routing strategy. If set
             * to "PreferClose", implementations should prioritize endpoints that are
             * topologically close (e.g., same zone).
             * This is an alpha field and requires enabling ServiceTrafficDistribution feature.
             */
            trafficDistribution: string;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid
             * options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
             * "ClusterIP" allocates a cluster-internal IP address for load-balancing
             * to endpoints. Endpoints are determined by the selector or if that is not
             * specified, by manual construction of an Endpoints object or
             * EndpointSlice objects. If clusterIP is "None", no virtual IP is
             * allocated and the endpoints are published as a set of endpoints rather
             * than a virtual IP.
             * "NodePort" builds on ClusterIP and allocates a port on every node which
             * routes to the same endpoints as the clusterIP.
             * "LoadBalancer" builds on NodePort and creates an external load-balancer
             * (if supported in the current cloud) which routes to the same endpoints
             * as the clusterIP.
             * "ExternalName" aliases this service to the specified externalName.
             * Several other fields do not apply to ExternalName services.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecPorts {
            /**
             * The application protocol for this port.
             * This is used as a hint for implementations to offer richer behavior for protocols that they understand.
             * This field follows standard Kubernetes label syntax.
             * Valid values are either:
             *
             *
             * * Un-prefixed protocol names - reserved for IANA standard service names (as per
             * RFC-6335 and https://www.iana.org/assignments/service-names).
             *
             *
             * * Kubernetes-defined prefixed names:
             *   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
             *   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
             *   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
             *
             *
             * * Other protocols should use implementation-defined prefixed names such as
             * mycompany.com/my-custom-protocol.
             */
            appProtocol: string;
            /**
             * The name of this port within the service. This must be a DNS_LABEL.
             * All ports within a ServiceSpec must have unique names. When considering
             * the endpoints for a Service, this must match the 'name' field in the
             * EndpointPort.
             * Optional if only one ServicePort is defined on this service.
             */
            name: string;
            /**
             * The port on each node on which this service is exposed when type is
             * NodePort or LoadBalancer.  Usually assigned by the system. If a value is
             * specified, in-range, and not in use it will be used, otherwise the
             * operation will fail.  If not specified, a port will be allocated if this
             * Service requires one.  If this field is specified when creating a
             * Service which does not need it, creation will fail. This field will be
             * wiped when updating a Service to no longer need it (e.g. changing type
             * from NodePort to ClusterIP).
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
             * Default is TCP.
             */
            protocol: string;
            /**
             * Number or name of the port to access on the pods targeted by the service.
             * Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             * If this is a string, it will be looked up as a named port in the
             * target Pod's container ports. If this is not specified, the value
             * of the 'port' field is used (an identity map).
             * This field is ignored for services with clusterIP=None, and should be
             * omitted or set equal to the 'port' field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort: number | string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecPortsPatch {
            /**
             * The application protocol for this port.
             * This is used as a hint for implementations to offer richer behavior for protocols that they understand.
             * This field follows standard Kubernetes label syntax.
             * Valid values are either:
             *
             *
             * * Un-prefixed protocol names - reserved for IANA standard service names (as per
             * RFC-6335 and https://www.iana.org/assignments/service-names).
             *
             *
             * * Kubernetes-defined prefixed names:
             *   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
             *   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
             *   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
             *
             *
             * * Other protocols should use implementation-defined prefixed names such as
             * mycompany.com/my-custom-protocol.
             */
            appProtocol: string;
            /**
             * The name of this port within the service. This must be a DNS_LABEL.
             * All ports within a ServiceSpec must have unique names. When considering
             * the endpoints for a Service, this must match the 'name' field in the
             * EndpointPort.
             * Optional if only one ServicePort is defined on this service.
             */
            name: string;
            /**
             * The port on each node on which this service is exposed when type is
             * NodePort or LoadBalancer.  Usually assigned by the system. If a value is
             * specified, in-range, and not in use it will be used, otherwise the
             * operation will fail.  If not specified, a port will be allocated if this
             * Service requires one.  If this field is specified when creating a
             * Service which does not need it, creation will fail. This field will be
             * wiped when updating a Service to no longer need it (e.g. changing type
             * from NodePort to ClusterIP).
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
             * Default is TCP.
             */
            protocol: string;
            /**
             * Number or name of the port to access on the pods targeted by the service.
             * Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             * If this is a string, it will be looked up as a named port in the
             * target Pod's container ports. If this is not specified, the value
             * of the 'port' field is used (an identity map).
             * This field is ignored for services with clusterIP=None, and should be
             * omitted or set equal to the 'port' field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort: number | string;
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfig {
            clientIP: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfigClientIP;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time.
             * The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
             * Default value is 10800(for 3 hours).
             */
            timeoutSeconds: number;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfigClientIPPatch {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time.
             * The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
             * Default value is 10800(for 3 hours).
             */
            timeoutSeconds: number;
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfigPatch {
            clientIP: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalServiceTemplateSpecSessionAffinityConfigClientIPPatch;
        }

        /**
         * Services roles managed by the `Cluster`
         */
        export interface ClusterSpecManagedServicesPatch {
            /**
             * Additional is a list of additional managed services specified by the user.
             */
            additional: outputs.postgresql.v1.ClusterSpecManagedServicesAdditionalPatch[];
            /**
             * DisabledDefaultServices is a list of service types that are disabled by default.
             * Valid values are "r", and "ro", representing read, and read-only services.
             */
            disabledDefaultServices: string[];
        }

        /**
         * The configuration of the monitoring infrastructure of this cluster
         */
        export interface ClusterSpecMonitoring {
            /**
             * The list of config maps containing the custom queries
             */
            customQueriesConfigMap: outputs.postgresql.v1.ClusterSpecMonitoringCustomQueriesConfigMap[];
            /**
             * The list of secrets containing the custom queries
             */
            customQueriesSecret: outputs.postgresql.v1.ClusterSpecMonitoringCustomQueriesSecret[];
            /**
             * Whether the default queries should be injected.
             * Set it to `true` if you don't want to inject default queries into the cluster.
             * Default: false.
             */
            disableDefaultQueries: boolean;
            /**
             * Enable or disable the `PodMonitor`
             */
            enablePodMonitor: boolean;
            /**
             * The list of metric relabelings for the `PodMonitor`. Applied to samples before ingestion.
             */
            podMonitorMetricRelabelings: outputs.postgresql.v1.ClusterSpecMonitoringPodMonitorMetricRelabelings[];
            /**
             * The list of relabelings for the `PodMonitor`. Applied to samples before scraping.
             */
            podMonitorRelabelings: outputs.postgresql.v1.ClusterSpecMonitoringPodMonitorRelabelings[];
            tls: outputs.postgresql.v1.ClusterSpecMonitoringTls;
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecMonitoringCustomQueriesConfigMap {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate
         * the key of a ConfigMap
         */
        export interface ClusterSpecMonitoringCustomQueriesConfigMapPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecMonitoringCustomQueriesSecret {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * SecretKeySelector contains enough information to let you locate
         * the key of a Secret
         */
        export interface ClusterSpecMonitoringCustomQueriesSecretPatch {
            /**
             * The key to select
             */
            key: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The configuration of the monitoring infrastructure of this cluster
         */
        export interface ClusterSpecMonitoringPatch {
            /**
             * The list of config maps containing the custom queries
             */
            customQueriesConfigMap: outputs.postgresql.v1.ClusterSpecMonitoringCustomQueriesConfigMapPatch[];
            /**
             * The list of secrets containing the custom queries
             */
            customQueriesSecret: outputs.postgresql.v1.ClusterSpecMonitoringCustomQueriesSecretPatch[];
            /**
             * Whether the default queries should be injected.
             * Set it to `true` if you don't want to inject default queries into the cluster.
             * Default: false.
             */
            disableDefaultQueries: boolean;
            /**
             * Enable or disable the `PodMonitor`
             */
            enablePodMonitor: boolean;
            /**
             * The list of metric relabelings for the `PodMonitor`. Applied to samples before ingestion.
             */
            podMonitorMetricRelabelings: outputs.postgresql.v1.ClusterSpecMonitoringPodMonitorMetricRelabelingsPatch[];
            /**
             * The list of relabelings for the `PodMonitor`. Applied to samples before scraping.
             */
            podMonitorRelabelings: outputs.postgresql.v1.ClusterSpecMonitoringPodMonitorRelabelingsPatch[];
            tls: outputs.postgresql.v1.ClusterSpecMonitoringTlsPatch;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface ClusterSpecMonitoringPodMonitorMetricRelabelings {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface ClusterSpecMonitoringPodMonitorMetricRelabelingsPatch {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface ClusterSpecMonitoringPodMonitorRelabelings {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface ClusterSpecMonitoringPodMonitorRelabelingsPatch {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * Configure TLS communication for the metrics endpoint.
         * Changing tls.enabled option will force a rollout of all instances.
         */
        export interface ClusterSpecMonitoringTls {
            /**
             * Enable TLS for the monitoring endpoint.
             * Changing this option will force a rollout of all instances.
             */
            enabled: boolean;
        }

        /**
         * Configure TLS communication for the metrics endpoint.
         * Changing tls.enabled option will force a rollout of all instances.
         */
        export interface ClusterSpecMonitoringTlsPatch {
            /**
             * Enable TLS for the monitoring endpoint.
             * Changing this option will force a rollout of all instances.
             */
            enabled: boolean;
        }

        /**
         * Define a maintenance window for the Kubernetes nodes
         */
        export interface ClusterSpecNodeMaintenanceWindow {
            /**
             * Is there a node maintenance activity in progress?
             */
            inProgress: boolean;
            /**
             * Reuse the existing PVC (wait for the node to come
             * up again) or not (recreate it elsewhere - when `instances` >1)
             */
            reusePVC: boolean;
        }

        /**
         * Define a maintenance window for the Kubernetes nodes
         */
        export interface ClusterSpecNodeMaintenanceWindowPatch {
            /**
             * Is there a node maintenance activity in progress?
             */
            inProgress: boolean;
            /**
             * Reuse the existing PVC (wait for the node to come
             * up again) or not (recreate it elsewhere - when `instances` >1)
             */
            reusePVC: boolean;
        }

        /**
         * Specification of the desired behavior of the cluster.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterSpecPatch {
            affinity: outputs.postgresql.v1.ClusterSpecAffinityPatch;
            backup: outputs.postgresql.v1.ClusterSpecBackupPatch;
            bootstrap: outputs.postgresql.v1.ClusterSpecBootstrapPatch;
            certificates: outputs.postgresql.v1.ClusterSpecCertificatesPatch;
            /**
             * Description of this PostgreSQL cluster
             */
            description: string;
            /**
             * Manage the `PodDisruptionBudget` resources within the cluster. When
             * configured as `true` (default setting), the pod disruption budgets
             * will safeguard the primary node from being terminated. Conversely,
             * setting it to `false` will result in the absence of any
             * `PodDisruptionBudget` resource, permitting the shutdown of all nodes
             * hosting the PostgreSQL cluster. This latter configuration is
             * advisable for any PostgreSQL cluster employed for
             * development/staging purposes.
             */
            enablePDB: boolean;
            /**
             * When this option is enabled, the operator will use the `SuperuserSecret`
             * to update the `postgres` user password (if the secret is
             * not present, the operator will automatically create one). When this
             * option is disabled, the operator will ignore the `SuperuserSecret` content, delete
             * it when automatically created, and then blank the password of the `postgres`
             * user by setting it to `NULL`. Disabled by default.
             */
            enableSuperuserAccess: boolean;
            /**
             * Env follows the Env format to pass environment variables
             * to the pods created in the cluster
             */
            env: outputs.postgresql.v1.ClusterSpecEnvPatch[];
            /**
             * EnvFrom follows the EnvFrom format to pass environment variables
             * sources to the pods to be used by Env
             */
            envFrom: outputs.postgresql.v1.ClusterSpecEnvFromPatch[];
            ephemeralVolumeSource: outputs.postgresql.v1.ClusterSpecEphemeralVolumeSourcePatch;
            ephemeralVolumesSizeLimit: outputs.postgresql.v1.ClusterSpecEphemeralVolumesSizeLimitPatch;
            /**
             * The list of external clusters which are used in the configuration
             */
            externalClusters: outputs.postgresql.v1.ClusterSpecExternalClustersPatch[];
            /**
             * The amount of time (in seconds) to wait before triggering a failover
             * after the primary PostgreSQL instance in the cluster was detected
             * to be unhealthy
             */
            failoverDelay: number;
            imageCatalogRef: outputs.postgresql.v1.ClusterSpecImageCatalogRefPatch;
            /**
             * Name of the container image, supporting both tags (`<image>:<tag>`)
             * and digests for deterministic and repeatable deployments
             * (`<image>:<tag>@sha256:<digestValue>`)
             */
            imageName: string;
            /**
             * Image pull policy.
             * One of `Always`, `Never` or `IfNotPresent`.
             * If not defined, it defaults to `IfNotPresent`.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            /**
             * The list of pull secrets to be used to pull the images
             */
            imagePullSecrets: outputs.postgresql.v1.ClusterSpecImagePullSecretsPatch[];
            inheritedMetadata: outputs.postgresql.v1.ClusterSpecInheritedMetadataPatch;
            /**
             * Number of instances required in the cluster
             */
            instances: number;
            /**
             * LivenessProbeTimeout is the time (in seconds) that is allowed for a PostgreSQL instance
             * to successfully respond to the liveness probe (default 30).
             * The Liveness probe failure threshold is derived from this value using the formula:
             * ceiling(livenessProbe / 10).
             */
            livenessProbeTimeout: number;
            /**
             * The instances' log level, one of the following values: error, warning, info (default), debug, trace
             */
            logLevel: string;
            managed: outputs.postgresql.v1.ClusterSpecManagedPatch;
            /**
             * The target value for the synchronous replication quorum, that can be
             * decreased if the number of ready standbys is lower than this.
             * Undefined or 0 disable synchronous replication.
             */
            maxSyncReplicas: number;
            /**
             * Minimum number of instances required in synchronous replication with the
             * primary. Undefined or 0 allow writes to complete when no standby is
             * available.
             */
            minSyncReplicas: number;
            monitoring: outputs.postgresql.v1.ClusterSpecMonitoringPatch;
            nodeMaintenanceWindow: outputs.postgresql.v1.ClusterSpecNodeMaintenanceWindowPatch;
            /**
             * The plugins configuration, containing
             * any plugin to be loaded with the corresponding configuration
             */
            plugins: outputs.postgresql.v1.ClusterSpecPluginsPatch[];
            /**
             * The GID of the `postgres` user inside the image, defaults to `26`
             */
            postgresGID: number;
            /**
             * The UID of the `postgres` user inside the image, defaults to `26`
             */
            postgresUID: number;
            postgresql: outputs.postgresql.v1.ClusterSpecPostgresqlPatch;
            /**
             * Method to follow to upgrade the primary server during a rolling
             * update procedure, after all replicas have been successfully updated:
             * it can be with a switchover (`switchover`) or in-place (`restart` - default)
             */
            primaryUpdateMethod: string;
            /**
             * Deployment strategy to follow to upgrade the primary server during a rolling
             * update procedure, after all replicas have been successfully updated:
             * it can be automated (`unsupervised` - default) or manual (`supervised`)
             */
            primaryUpdateStrategy: string;
            /**
             * Name of the priority class which will be used in every generated Pod, if the PriorityClass
             * specified does not exist, the pod will not be able to schedule.  Please refer to
             * https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
             * for more information
             */
            priorityClassName: string;
            projectedVolumeTemplate: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplatePatch;
            replica: outputs.postgresql.v1.ClusterSpecReplicaPatch;
            replicationSlots: outputs.postgresql.v1.ClusterSpecReplicationSlotsPatch;
            resources: outputs.postgresql.v1.ClusterSpecResourcesPatch;
            /**
             * If specified, the pod will be dispatched by specified Kubernetes
             * scheduler. If not specified, the pod will be dispatched by the default
             * scheduler. More info:
             * https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/
             */
            schedulerName: string;
            seccompProfile: outputs.postgresql.v1.ClusterSpecSeccompProfilePatch;
            serviceAccountTemplate: outputs.postgresql.v1.ClusterSpecServiceAccountTemplatePatch;
            /**
             * The time in seconds that controls the window of time reserved for the smart shutdown of Postgres to complete.
             * Make sure you reserve enough time for the operator to request a fast shutdown of Postgres
             * (that is: `stopDelay` - `smartShutdownTimeout`).
             */
            smartShutdownTimeout: number;
            /**
             * The time in seconds that is allowed for a PostgreSQL instance to
             * successfully start up (default 3600).
             * The startup probe failure threshold is derived from this value using the formula:
             * ceiling(startDelay / 10).
             */
            startDelay: number;
            /**
             * The time in seconds that is allowed for a PostgreSQL instance to
             * gracefully shutdown (default 1800)
             */
            stopDelay: number;
            storage: outputs.postgresql.v1.ClusterSpecStoragePatch;
            superuserSecret: outputs.postgresql.v1.ClusterSpecSuperuserSecretPatch;
            /**
             * The time in seconds that is allowed for a primary PostgreSQL instance
             * to gracefully shutdown during a switchover.
             * Default value is 3600 seconds (1 hour).
             */
            switchoverDelay: number;
            /**
             * The tablespaces configuration
             */
            tablespaces: outputs.postgresql.v1.ClusterSpecTablespacesPatch[];
            /**
             * TopologySpreadConstraints specifies how to spread matching pods among the given topology.
             * More info:
             * https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
             */
            topologySpreadConstraints: outputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsPatch[];
            walStorage: outputs.postgresql.v1.ClusterSpecWalStoragePatch;
        }

        /**
         * PluginConfiguration specifies a plugin that need to be loaded for this
         * cluster to be reconciled
         */
        export interface ClusterSpecPlugins {
            /**
             * Name is the plugin name
             */
            name: string;
            /**
             * Parameters is the configuration of the plugin
             */
            parameters: {[key: string]: string};
        }

        /**
         * PluginConfiguration specifies a plugin that need to be loaded for this
         * cluster to be reconciled
         */
        export interface ClusterSpecPluginsPatch {
            /**
             * Name is the plugin name
             */
            name: string;
            /**
             * Parameters is the configuration of the plugin
             */
            parameters: {[key: string]: string};
        }

        /**
         * Configuration of the PostgreSQL server
         */
        export interface ClusterSpecPostgresql {
            /**
             * If this parameter is true, the user will be able to invoke `ALTER SYSTEM`
             * on this CloudNativePG Cluster.
             * This should only be used for debugging and troubleshooting.
             * Defaults to false.
             */
            enableAlterSystem: boolean;
            ldap: outputs.postgresql.v1.ClusterSpecPostgresqlLdap;
            /**
             * PostgreSQL configuration options (postgresql.conf)
             */
            parameters: {[key: string]: string};
            /**
             * PostgreSQL Host Based Authentication rules (lines to be appended
             * to the pg_hba.conf file)
             */
            pg_hba: string[];
            /**
             * PostgreSQL User Name Maps rules (lines to be appended
             * to the pg_ident.conf file)
             */
            pg_ident: string[];
            /**
             * Specifies the maximum number of seconds to wait when promoting an instance to primary.
             * Default value is 40000000, greater than one year in seconds,
             * big enough to simulate an infinite timeout
             */
            promotionTimeout: number;
            /**
             * Lists of shared preload libraries to add to the default ones
             */
            shared_preload_libraries: string[];
            syncReplicaElectionConstraint: outputs.postgresql.v1.ClusterSpecPostgresqlSyncReplicaElectionConstraint;
            synchronous: outputs.postgresql.v1.ClusterSpecPostgresqlSynchronous;
        }

        /**
         * Options to specify LDAP configuration
         */
        export interface ClusterSpecPostgresqlLdap {
            bindAsAuth: outputs.postgresql.v1.ClusterSpecPostgresqlLdapBindAsAuth;
            bindSearchAuth: outputs.postgresql.v1.ClusterSpecPostgresqlLdapBindSearchAuth;
            /**
             * LDAP server port
             */
            port: number;
            /**
             * LDAP schema to be used, possible options are `ldap` and `ldaps`
             */
            scheme: string;
            /**
             * LDAP hostname or IP address
             */
            server: string;
            /**
             * Set to 'true' to enable LDAP over TLS. 'false' is default
             */
            tls: boolean;
        }

        /**
         * Bind as authentication configuration
         */
        export interface ClusterSpecPostgresqlLdapBindAsAuth {
            /**
             * Prefix for the bind authentication option
             */
            prefix: string;
            /**
             * Suffix for the bind authentication option
             */
            suffix: string;
        }

        /**
         * Bind as authentication configuration
         */
        export interface ClusterSpecPostgresqlLdapBindAsAuthPatch {
            /**
             * Prefix for the bind authentication option
             */
            prefix: string;
            /**
             * Suffix for the bind authentication option
             */
            suffix: string;
        }

        /**
         * Bind+Search authentication configuration
         */
        export interface ClusterSpecPostgresqlLdapBindSearchAuth {
            /**
             * Root DN to begin the user search
             */
            baseDN: string;
            /**
             * DN of the user to bind to the directory
             */
            bindDN: string;
            bindPassword: outputs.postgresql.v1.ClusterSpecPostgresqlLdapBindSearchAuthBindPassword;
            /**
             * Attribute to match against the username
             */
            searchAttribute: string;
            /**
             * Search filter to use when doing the search+bind authentication
             */
            searchFilter: string;
        }

        /**
         * Secret with the password for the user to bind to the directory
         */
        export interface ClusterSpecPostgresqlLdapBindSearchAuthBindPassword {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Secret with the password for the user to bind to the directory
         */
        export interface ClusterSpecPostgresqlLdapBindSearchAuthBindPasswordPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Bind+Search authentication configuration
         */
        export interface ClusterSpecPostgresqlLdapBindSearchAuthPatch {
            /**
             * Root DN to begin the user search
             */
            baseDN: string;
            /**
             * DN of the user to bind to the directory
             */
            bindDN: string;
            bindPassword: outputs.postgresql.v1.ClusterSpecPostgresqlLdapBindSearchAuthBindPasswordPatch;
            /**
             * Attribute to match against the username
             */
            searchAttribute: string;
            /**
             * Search filter to use when doing the search+bind authentication
             */
            searchFilter: string;
        }

        /**
         * Options to specify LDAP configuration
         */
        export interface ClusterSpecPostgresqlLdapPatch {
            bindAsAuth: outputs.postgresql.v1.ClusterSpecPostgresqlLdapBindAsAuthPatch;
            bindSearchAuth: outputs.postgresql.v1.ClusterSpecPostgresqlLdapBindSearchAuthPatch;
            /**
             * LDAP server port
             */
            port: number;
            /**
             * LDAP schema to be used, possible options are `ldap` and `ldaps`
             */
            scheme: string;
            /**
             * LDAP hostname or IP address
             */
            server: string;
            /**
             * Set to 'true' to enable LDAP over TLS. 'false' is default
             */
            tls: boolean;
        }

        /**
         * Configuration of the PostgreSQL server
         */
        export interface ClusterSpecPostgresqlPatch {
            /**
             * If this parameter is true, the user will be able to invoke `ALTER SYSTEM`
             * on this CloudNativePG Cluster.
             * This should only be used for debugging and troubleshooting.
             * Defaults to false.
             */
            enableAlterSystem: boolean;
            ldap: outputs.postgresql.v1.ClusterSpecPostgresqlLdapPatch;
            /**
             * PostgreSQL configuration options (postgresql.conf)
             */
            parameters: {[key: string]: string};
            /**
             * PostgreSQL Host Based Authentication rules (lines to be appended
             * to the pg_hba.conf file)
             */
            pg_hba: string[];
            /**
             * PostgreSQL User Name Maps rules (lines to be appended
             * to the pg_ident.conf file)
             */
            pg_ident: string[];
            /**
             * Specifies the maximum number of seconds to wait when promoting an instance to primary.
             * Default value is 40000000, greater than one year in seconds,
             * big enough to simulate an infinite timeout
             */
            promotionTimeout: number;
            /**
             * Lists of shared preload libraries to add to the default ones
             */
            shared_preload_libraries: string[];
            syncReplicaElectionConstraint: outputs.postgresql.v1.ClusterSpecPostgresqlSyncReplicaElectionConstraintPatch;
            synchronous: outputs.postgresql.v1.ClusterSpecPostgresqlSynchronousPatch;
        }

        /**
         * Requirements to be met by sync replicas. This will affect how the "synchronous_standby_names" parameter will be
         * set up.
         */
        export interface ClusterSpecPostgresqlSyncReplicaElectionConstraint {
            /**
             * This flag enables the constraints for sync replicas
             */
            enabled: boolean;
            /**
             * A list of node labels values to extract and compare to evaluate if the pods reside in the same topology or not
             */
            nodeLabelsAntiAffinity: string[];
        }

        /**
         * Requirements to be met by sync replicas. This will affect how the "synchronous_standby_names" parameter will be
         * set up.
         */
        export interface ClusterSpecPostgresqlSyncReplicaElectionConstraintPatch {
            /**
             * This flag enables the constraints for sync replicas
             */
            enabled: boolean;
            /**
             * A list of node labels values to extract and compare to evaluate if the pods reside in the same topology or not
             */
            nodeLabelsAntiAffinity: string[];
        }

        /**
         * Configuration of the PostgreSQL synchronous replication feature
         */
        export interface ClusterSpecPostgresqlSynchronous {
            /**
             * Specifies the maximum number of local cluster pods that can be
             * automatically included in the `synchronous_standby_names` option in
             * PostgreSQL.
             */
            maxStandbyNamesFromCluster: number;
            /**
             * Method to select synchronous replication standbys from the listed
             * servers, accepting 'any' (quorum-based synchronous replication) or
             * 'first' (priority-based synchronous replication) as values.
             */
            method: string;
            /**
             * Specifies the number of synchronous standby servers that
             * transactions must wait for responses from.
             */
            number: number;
            /**
             * A user-defined list of application names to be added to
             * `synchronous_standby_names` after local cluster pods (the order is
             * only useful for priority-based synchronous replication).
             */
            standbyNamesPost: string[];
            /**
             * A user-defined list of application names to be added to
             * `synchronous_standby_names` before local cluster pods (the order is
             * only useful for priority-based synchronous replication).
             */
            standbyNamesPre: string[];
        }

        /**
         * Configuration of the PostgreSQL synchronous replication feature
         */
        export interface ClusterSpecPostgresqlSynchronousPatch {
            /**
             * Specifies the maximum number of local cluster pods that can be
             * automatically included in the `synchronous_standby_names` option in
             * PostgreSQL.
             */
            maxStandbyNamesFromCluster: number;
            /**
             * Method to select synchronous replication standbys from the listed
             * servers, accepting 'any' (quorum-based synchronous replication) or
             * 'first' (priority-based synchronous replication) as values.
             */
            method: string;
            /**
             * Specifies the number of synchronous standby servers that
             * transactions must wait for responses from.
             */
            number: number;
            /**
             * A user-defined list of application names to be added to
             * `synchronous_standby_names` after local cluster pods (the order is
             * only useful for priority-based synchronous replication).
             */
            standbyNamesPost: string[];
            /**
             * A user-defined list of application names to be added to
             * `synchronous_standby_names` before local cluster pods (the order is
             * only useful for priority-based synchronous replication).
             */
            standbyNamesPre: string[];
        }

        /**
         * Template to be used to define projected volumes, projected volumes will be mounted
         * under `/projected` base folder
         */
        export interface ClusterSpecProjectedVolumeTemplate {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSources[];
        }

        /**
         * Template to be used to define projected volumes, projected volumes will be mounted
         * under `/projected` base folder
         */
        export interface ClusterSpecProjectedVolumeTemplatePatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface ClusterSpecProjectedVolumeTemplateSources {
            clusterTrustBundle: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundle;
            configMap: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesConfigMap;
            downwardAPI: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPI;
            secret: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesSecret;
            serviceAccountToken: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundle {
            labelSelector: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundlePatch {
            labelSelector: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundleLabelSelectorPatch;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItems {
            fieldRef: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesPatch {
            clusterTrustBundle: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesClusterTrustBundlePatch;
            configMap: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesConfigMapPatch;
            downwardAPI: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIPatch;
            secret: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesSecretPatch;
            serviceAccountToken: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesServiceAccountTokenPatch;
        }

        /**
         * secret information about the secret data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesSecretItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * Replica cluster configuration
         */
        export interface ClusterSpecReplica {
            /**
             * If replica mode is enabled, this cluster will be a replica of an
             * existing cluster. Replica cluster can be created from a recovery
             * object store or via streaming through pg_basebackup.
             * Refer to the Replica clusters page of the documentation for more information.
             */
            enabled: boolean;
            /**
             * When replica mode is enabled, this parameter allows you to replay
             * transactions only when the system time is at least the configured
             * time past the commit time. This provides an opportunity to correct
             * data loss errors. Note that when this parameter is set, a promotion
             * token cannot be used.
             */
            minApplyDelay: string;
            /**
             * Primary defines which Cluster is defined to be the primary in the distributed PostgreSQL cluster, based on the
             * topology specified in externalClusters
             */
            primary: string;
            /**
             * A demotion token generated by an external cluster used to
             * check if the promotion requirements are met.
             */
            promotionToken: string;
            /**
             * Self defines the name of this cluster. It is used to determine if this is a primary
             * or a replica cluster, comparing it with `primary`
             */
            self: string;
            /**
             * The name of the external cluster which is the replication origin
             */
            source: string;
        }

        /**
         * Replica cluster configuration
         */
        export interface ClusterSpecReplicaPatch {
            /**
             * If replica mode is enabled, this cluster will be a replica of an
             * existing cluster. Replica cluster can be created from a recovery
             * object store or via streaming through pg_basebackup.
             * Refer to the Replica clusters page of the documentation for more information.
             */
            enabled: boolean;
            /**
             * When replica mode is enabled, this parameter allows you to replay
             * transactions only when the system time is at least the configured
             * time past the commit time. This provides an opportunity to correct
             * data loss errors. Note that when this parameter is set, a promotion
             * token cannot be used.
             */
            minApplyDelay: string;
            /**
             * Primary defines which Cluster is defined to be the primary in the distributed PostgreSQL cluster, based on the
             * topology specified in externalClusters
             */
            primary: string;
            /**
             * A demotion token generated by an external cluster used to
             * check if the promotion requirements are met.
             */
            promotionToken: string;
            /**
             * Self defines the name of this cluster. It is used to determine if this is a primary
             * or a replica cluster, comparing it with `primary`
             */
            self: string;
            /**
             * The name of the external cluster which is the replication origin
             */
            source: string;
        }

        /**
         * Replication slots management configuration
         */
        export interface ClusterSpecReplicationSlots {
            highAvailability: outputs.postgresql.v1.ClusterSpecReplicationSlotsHighAvailability;
            synchronizeReplicas: outputs.postgresql.v1.ClusterSpecReplicationSlotsSynchronizeReplicas;
            /**
             * Standby will update the status of the local replication slots
             * every `updateInterval` seconds (default 30).
             */
            updateInterval: number;
        }

        /**
         * Replication slots for high availability configuration
         */
        export interface ClusterSpecReplicationSlotsHighAvailability {
            /**
             * If enabled (default), the operator will automatically manage replication slots
             * on the primary instance and use them in streaming replication
             * connections with all the standby instances that are part of the HA
             * cluster. If disabled, the operator will not take advantage
             * of replication slots in streaming connections with the replicas.
             * This feature also controls replication slots in replica cluster,
             * from the designated primary to its cascading replicas.
             */
            enabled: boolean;
            /**
             * Prefix for replication slots managed by the operator for HA.
             * It may only contain lower case letters, numbers, and the underscore character.
             * This can only be set at creation time. By default set to `_cnpg_`.
             */
            slotPrefix: string;
        }

        /**
         * Replication slots for high availability configuration
         */
        export interface ClusterSpecReplicationSlotsHighAvailabilityPatch {
            /**
             * If enabled (default), the operator will automatically manage replication slots
             * on the primary instance and use them in streaming replication
             * connections with all the standby instances that are part of the HA
             * cluster. If disabled, the operator will not take advantage
             * of replication slots in streaming connections with the replicas.
             * This feature also controls replication slots in replica cluster,
             * from the designated primary to its cascading replicas.
             */
            enabled: boolean;
            /**
             * Prefix for replication slots managed by the operator for HA.
             * It may only contain lower case letters, numbers, and the underscore character.
             * This can only be set at creation time. By default set to `_cnpg_`.
             */
            slotPrefix: string;
        }

        /**
         * Replication slots management configuration
         */
        export interface ClusterSpecReplicationSlotsPatch {
            highAvailability: outputs.postgresql.v1.ClusterSpecReplicationSlotsHighAvailabilityPatch;
            synchronizeReplicas: outputs.postgresql.v1.ClusterSpecReplicationSlotsSynchronizeReplicasPatch;
            /**
             * Standby will update the status of the local replication slots
             * every `updateInterval` seconds (default 30).
             */
            updateInterval: number;
        }

        /**
         * Configures the synchronization of the user defined physical replication slots
         */
        export interface ClusterSpecReplicationSlotsSynchronizeReplicas {
            /**
             * When set to true, every replication slot that is on the primary is synchronized on each standby
             */
            enabled: boolean;
            /**
             * List of regular expression patterns to match the names of replication slots to be excluded (by default empty)
             */
            excludePatterns: string[];
        }

        /**
         * Configures the synchronization of the user defined physical replication slots
         */
        export interface ClusterSpecReplicationSlotsSynchronizeReplicasPatch {
            /**
             * When set to true, every replication slot that is on the primary is synchronized on each standby
             */
            enabled: boolean;
            /**
             * List of regular expression patterns to match the names of replication slots to be excluded (by default empty)
             */
            excludePatterns: string[];
        }

        /**
         * Resources requirements of every generated Pod. Please refer to
         * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         * for more information.
         */
        export interface ClusterSpecResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.ClusterSpecResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ClusterSpecResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ClusterSpecResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * Resources requirements of every generated Pod. Please refer to
         * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         * for more information.
         */
        export interface ClusterSpecResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.ClusterSpecResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * The SeccompProfile applied to every Pod and Container.
         * Defaults to: `RuntimeDefault`
         */
        export interface ClusterSpecSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The SeccompProfile applied to every Pod and Container.
         * Defaults to: `RuntimeDefault`
         */
        export interface ClusterSpecSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Configure the generation of the service account
         */
        export interface ClusterSpecServiceAccountTemplate {
            metadata: outputs.postgresql.v1.ClusterSpecServiceAccountTemplateMetadata;
        }

        /**
         * Metadata are the metadata to be used for the generated
         * service account
         */
        export interface ClusterSpecServiceAccountTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * Metadata are the metadata to be used for the generated
         * service account
         */
        export interface ClusterSpecServiceAccountTemplateMetadataPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * Configure the generation of the service account
         */
        export interface ClusterSpecServiceAccountTemplatePatch {
            metadata: outputs.postgresql.v1.ClusterSpecServiceAccountTemplateMetadataPatch;
        }

        /**
         * Configuration of the storage of the instances
         */
        export interface ClusterSpecStorage {
            pvcTemplate: outputs.postgresql.v1.ClusterSpecStoragePvcTemplate;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes: boolean;
            /**
             * Size of the storage. Required if not already specified in the PVC template.
             * Changes to this field are automatically reapplied to the created PVCs.
             * Size cannot be decreased.
             */
            size: string;
            /**
             * StorageClass to use for PVCs. Applied after
             * evaluating the PVC template, if available.
             * If not specified, the generated PVCs will use the
             * default storage class
             */
            storageClass: string;
        }

        /**
         * Configuration of the storage of the instances
         */
        export interface ClusterSpecStoragePatch {
            pvcTemplate: outputs.postgresql.v1.ClusterSpecStoragePvcTemplatePatch;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes: boolean;
            /**
             * Size of the storage. Required if not already specified in the PVC template.
             * Changes to this field are automatically reapplied to the created PVCs.
             * Size cannot be decreased.
             */
            size: string;
            /**
             * StorageClass to use for PVCs. Applied after
             * evaluating the PVC template, if available.
             * If not specified, the generated PVCs will use the
             * default storage class
             */
            storageClass: string;
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecStoragePvcTemplate {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateDataSource;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateDataSourceRef;
            resources: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateResources;
            selector: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecStoragePvcTemplateDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecStoragePvcTemplateDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecStoragePvcTemplateDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecStoragePvcTemplateDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecStoragePvcTemplatePatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateDataSourcePatch;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateDataSourceRefPatch;
            resources: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateResourcesPatch;
            selector: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecStoragePvcTemplateResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecStoragePvcTemplateResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecStoragePvcTemplateSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecStoragePvcTemplateSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecStoragePvcTemplateSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecStoragePvcTemplateSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecStoragePvcTemplateSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * The secret containing the superuser password. If not defined a new
         * secret will be created with a randomly generated password
         */
        export interface ClusterSpecSuperuserSecret {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The secret containing the superuser password. If not defined a new
         * secret will be created with a randomly generated password
         */
        export interface ClusterSpecSuperuserSecretPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * TablespaceConfiguration is the configuration of a tablespace, and includes
         * the storage specification for the tablespace
         */
        export interface ClusterSpecTablespaces {
            /**
             * The name of the tablespace
             */
            name: string;
            owner: outputs.postgresql.v1.ClusterSpecTablespacesOwner;
            storage: outputs.postgresql.v1.ClusterSpecTablespacesStorage;
            /**
             * When set to true, the tablespace will be added as a `temp_tablespaces`
             * entry in PostgreSQL, and will be available to automatically house temp
             * database objects, or other temporary files. Please refer to PostgreSQL
             * documentation for more information on the `temp_tablespaces` GUC.
             */
            temporary: boolean;
        }

        /**
         * Owner is the PostgreSQL user owning the tablespace
         */
        export interface ClusterSpecTablespacesOwner {
            name: string;
        }

        /**
         * Owner is the PostgreSQL user owning the tablespace
         */
        export interface ClusterSpecTablespacesOwnerPatch {
            name: string;
        }

        /**
         * TablespaceConfiguration is the configuration of a tablespace, and includes
         * the storage specification for the tablespace
         */
        export interface ClusterSpecTablespacesPatch {
            /**
             * The name of the tablespace
             */
            name: string;
            owner: outputs.postgresql.v1.ClusterSpecTablespacesOwnerPatch;
            storage: outputs.postgresql.v1.ClusterSpecTablespacesStoragePatch;
            /**
             * When set to true, the tablespace will be added as a `temp_tablespaces`
             * entry in PostgreSQL, and will be available to automatically house temp
             * database objects, or other temporary files. Please refer to PostgreSQL
             * documentation for more information on the `temp_tablespaces` GUC.
             */
            temporary: boolean;
        }

        /**
         * The storage configuration for the tablespace
         */
        export interface ClusterSpecTablespacesStorage {
            pvcTemplate: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplate;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes: boolean;
            /**
             * Size of the storage. Required if not already specified in the PVC template.
             * Changes to this field are automatically reapplied to the created PVCs.
             * Size cannot be decreased.
             */
            size: string;
            /**
             * StorageClass to use for PVCs. Applied after
             * evaluating the PVC template, if available.
             * If not specified, the generated PVCs will use the
             * default storage class
             */
            storageClass: string;
        }

        /**
         * The storage configuration for the tablespace
         */
        export interface ClusterSpecTablespacesStoragePatch {
            pvcTemplate: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplatePatch;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes: boolean;
            /**
             * Size of the storage. Required if not already specified in the PVC template.
             * Changes to this field are automatically reapplied to the created PVCs.
             * Size cannot be decreased.
             */
            size: string;
            /**
             * StorageClass to use for PVCs. Applied after
             * evaluating the PVC template, if available.
             * If not specified, the generated PVCs will use the
             * default storage class
             */
            storageClass: string;
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecTablespacesStoragePvcTemplate {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateDataSource;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateDataSourceRef;
            resources: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateResources;
            selector: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecTablespacesStoragePvcTemplatePatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateDataSourcePatch;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateDataSourceRefPatch;
            resources: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateResourcesPatch;
            selector: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecTablespacesStoragePvcTemplateSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecTablespacesStoragePvcTemplateSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface ClusterSpecTopologySpreadConstraints {
            labelSelector: outputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface ClusterSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface ClusterSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface ClusterSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
         */
        export interface ClusterSpecWalStorage {
            pvcTemplate: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplate;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes: boolean;
            /**
             * Size of the storage. Required if not already specified in the PVC template.
             * Changes to this field are automatically reapplied to the created PVCs.
             * Size cannot be decreased.
             */
            size: string;
            /**
             * StorageClass to use for PVCs. Applied after
             * evaluating the PVC template, if available.
             * If not specified, the generated PVCs will use the
             * default storage class
             */
            storageClass: string;
        }

        /**
         * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
         */
        export interface ClusterSpecWalStoragePatch {
            pvcTemplate: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplatePatch;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes: boolean;
            /**
             * Size of the storage. Required if not already specified in the PVC template.
             * Changes to this field are automatically reapplied to the created PVCs.
             * Size cannot be decreased.
             */
            size: string;
            /**
             * StorageClass to use for PVCs. Applied after
             * evaluating the PVC template, if available.
             * If not specified, the generated PVCs will use the
             * default storage class
             */
            storageClass: string;
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecWalStoragePvcTemplate {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateDataSource;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateDataSourceRef;
            resources: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateResources;
            selector: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecWalStoragePvcTemplateDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecWalStoragePvcTemplateDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecWalStoragePvcTemplateDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecWalStoragePvcTemplateDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecWalStoragePvcTemplatePatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateDataSourcePatch;
            dataSourceRef: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateDataSourceRefPatch;
            resources: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateResourcesPatch;
            selector: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecWalStoragePvcTemplateResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecWalStoragePvcTemplateResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecWalStoragePvcTemplateSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecWalStoragePvcTemplateSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecWalStoragePvcTemplateSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Most recently observed status of the cluster. This data may not be up
         * to date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterStatus {
            /**
             * AvailableArchitectures reports the available architectures of a cluster
             */
            availableArchitectures: outputs.postgresql.v1.ClusterStatusAvailableArchitectures[];
            /**
             * AzurePVCUpdateEnabled shows if the PVC online upgrade is enabled for this cluster
             */
            azurePVCUpdateEnabled: boolean;
            certificates: outputs.postgresql.v1.ClusterStatusCertificates;
            /**
             * The commit hash number of which this operator running
             */
            cloudNativePGCommitHash: string;
            /**
             * The hash of the binary of the operator
             */
            cloudNativePGOperatorHash: string;
            /**
             * Conditions for cluster object
             */
            conditions: outputs.postgresql.v1.ClusterStatusConditions[];
            configMapResourceVersion: outputs.postgresql.v1.ClusterStatusConfigMapResourceVersion;
            /**
             * Current primary instance
             */
            currentPrimary: string;
            /**
             * The timestamp when the primary was detected to be unhealthy
             * This field is reported when `.spec.failoverDelay` is populated or during online upgrades
             */
            currentPrimaryFailingSinceTimestamp: string;
            /**
             * The timestamp when the last actual promotion to primary has occurred
             */
            currentPrimaryTimestamp: string;
            /**
             * List of all the PVCs created by this cluster and still available
             * which are not attached to a Pod
             */
            danglingPVC: string[];
            /**
             * DemotionToken is a JSON token containing the information
             * from pg_controldata such as Database system identifier, Latest checkpoint's
             * TimeLineID, Latest checkpoint's REDO location, Latest checkpoint's REDO
             * WAL file, and Time of latest checkpoint
             */
            demotionToken: string;
            /**
             * The first recoverability point, stored as a date in RFC3339 format.
             * This field is calculated from the content of FirstRecoverabilityPointByMethod
             */
            firstRecoverabilityPoint: string;
            /**
             * The first recoverability point, stored as a date in RFC3339 format, per backup method type
             */
            firstRecoverabilityPointByMethod: {[key: string]: string};
            /**
             * List of all the PVCs not dangling nor initializing
             */
            healthyPVC: string[];
            /**
             * Image contains the image name used by the pods
             */
            image: string;
            /**
             * List of all the PVCs that are being initialized by this cluster
             */
            initializingPVC: string[];
            /**
             * List of instance names in the cluster
             */
            instanceNames: string[];
            /**
             * The total number of PVC Groups detected in the cluster. It may differ from the number of existing instance pods.
             */
            instances: number;
            /**
             * The reported state of the instances during the last reconciliation loop
             */
            instancesReportedState: {[key: string]: {[key: string]: string}};
            /**
             * InstancesStatus indicates in which status the instances are
             */
            instancesStatus: {[key: string]: string[]};
            /**
             * How many Jobs have been created by this cluster
             */
            jobCount: number;
            /**
             * Stored as a date in RFC3339 format
             */
            lastFailedBackup: string;
            /**
             * LastPromotionToken is the last verified promotion token that
             * was used to promote a replica cluster
             */
            lastPromotionToken: string;
            /**
             * Last successful backup, stored as a date in RFC3339 format
             * This field is calculated from the content of LastSuccessfulBackupByMethod
             */
            lastSuccessfulBackup: string;
            /**
             * Last successful backup, stored as a date in RFC3339 format, per backup method type
             */
            lastSuccessfulBackupByMethod: {[key: string]: string};
            /**
             * ID of the latest generated node (used to avoid node name clashing)
             */
            latestGeneratedNode: number;
            managedRolesStatus: outputs.postgresql.v1.ClusterStatusManagedRolesStatus;
            /**
             * OnlineUpdateEnabled shows if the online upgrade is enabled inside the cluster
             */
            onlineUpdateEnabled: boolean;
            /**
             * Current phase of the cluster
             */
            phase: string;
            /**
             * Reason for the current phase
             */
            phaseReason: string;
            /**
             * PluginStatus is the status of the loaded plugins
             */
            pluginStatus: outputs.postgresql.v1.ClusterStatusPluginStatus[];
            poolerIntegrations: outputs.postgresql.v1.ClusterStatusPoolerIntegrations;
            /**
             * How many PVCs have been created by this cluster
             */
            pvcCount: number;
            /**
             * Current list of read pods
             */
            readService: string;
            /**
             * The total number of ready instances in the cluster. It is equal to the number of ready instance pods.
             */
            readyInstances: number;
            /**
             * List of all the PVCs that have ResizingPVC condition.
             */
            resizingPVC: string[];
            secretsResourceVersion: outputs.postgresql.v1.ClusterStatusSecretsResourceVersion;
            switchReplicaClusterStatus: outputs.postgresql.v1.ClusterStatusSwitchReplicaClusterStatus;
            /**
             * TablespacesStatus reports the state of the declarative tablespaces in the cluster
             */
            tablespacesStatus: outputs.postgresql.v1.ClusterStatusTablespacesStatus[];
            /**
             * Target primary instance, this is different from the previous one
             * during a switchover or a failover
             */
            targetPrimary: string;
            /**
             * The timestamp when the last request for a new primary has occurred
             */
            targetPrimaryTimestamp: string;
            /**
             * The timeline of the Postgres cluster
             */
            timelineID: number;
            topology: outputs.postgresql.v1.ClusterStatusTopology;
            /**
             * List of all the PVCs that are unusable because another PVC is missing
             */
            unusablePVC: string[];
            /**
             * Current write pod
             */
            writeService: string;
        }

        /**
         * AvailableArchitecture represents the state of a cluster's architecture
         */
        export interface ClusterStatusAvailableArchitectures {
            /**
             * GoArch is the name of the executable architecture
             */
            goArch: string;
            /**
             * Hash is the hash of the executable
             */
            hash: string;
        }

        /**
         * AvailableArchitecture represents the state of a cluster's architecture
         */
        export interface ClusterStatusAvailableArchitecturesPatch {
            /**
             * GoArch is the name of the executable architecture
             */
            goArch: string;
            /**
             * Hash is the hash of the executable
             */
            hash: string;
        }

        /**
         * The configuration for the CA and related certificates, initialized with defaults.
         */
        export interface ClusterStatusCertificates {
            /**
             * The secret containing the Client CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate all the client certificates.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the client certificates,
             * used as `ssl_ca_file` of all the instances.<br />
             * - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided,
             * this can be omitted.<br />
             */
            clientCASecret: string;
            /**
             * Expiration dates for all certificates.
             */
            expirations: {[key: string]: string};
            /**
             * The secret of type kubernetes.io/tls containing the client certificate to authenticate as
             * the `streaming_replica` user.
             * If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be
             * created using the provided CA.
             */
            replicationTLSSecret: string;
            /**
             * The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
             */
            serverAltDNSNames: string[];
            /**
             * The secret containing the Server CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the server certificate,
             * used as `sslrootcert` in client connection strings.<br />
             * - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided,
             * this can be omitted.<br />
             */
            serverCASecret: string;
            /**
             * The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as
             * `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely.
             * If not defined, ServerCASecret must provide also `ca.key` and a new secret will be
             * created using the provided CA.
             */
            serverTLSSecret: string;
        }

        /**
         * The configuration for the CA and related certificates, initialized with defaults.
         */
        export interface ClusterStatusCertificatesPatch {
            /**
             * The secret containing the Client CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate all the client certificates.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the client certificates,
             * used as `ssl_ca_file` of all the instances.<br />
             * - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided,
             * this can be omitted.<br />
             */
            clientCASecret: string;
            /**
             * Expiration dates for all certificates.
             */
            expirations: {[key: string]: string};
            /**
             * The secret of type kubernetes.io/tls containing the client certificate to authenticate as
             * the `streaming_replica` user.
             * If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be
             * created using the provided CA.
             */
            replicationTLSSecret: string;
            /**
             * The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
             */
            serverAltDNSNames: string[];
            /**
             * The secret containing the Server CA certificate. If not defined, a new secret will be created
             * with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br />
             * <br />
             * Contains:<br />
             * <br />
             * - `ca.crt`: CA that should be used to validate the server certificate,
             * used as `sslrootcert` in client connection strings.<br />
             * - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided,
             * this can be omitted.<br />
             */
            serverCASecret: string;
            /**
             * The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as
             * `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely.
             * If not defined, ServerCASecret must provide also `ca.key` and a new secret will be
             * created using the provided CA.
             */
            serverTLSSecret: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         * ---
         * This struct is intended for direct use as an array at the field path .status.conditions.  For example,
         *
         *
         * 	type FooStatus struct{
         * 	    // Represents the observations of a foo's current state.
         * 	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
         * 	    // +patchMergeKey=type
         * 	    // +patchStrategy=merge
         * 	    // +listType=map
         * 	    // +listMapKey=type
         * 	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
         *
         *
         * 	    // other fields
         * 	}
         */
        export interface ClusterStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             * ---
             * Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
             * useful (see .node.status.conditions), the ability to deconflict is important.
             * The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         * ---
         * This struct is intended for direct use as an array at the field path .status.conditions.  For example,
         *
         *
         * 	type FooStatus struct{
         * 	    // Represents the observations of a foo's current state.
         * 	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
         * 	    // +patchMergeKey=type
         * 	    // +patchStrategy=merge
         * 	    // +listType=map
         * 	    // +listMapKey=type
         * 	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
         *
         *
         * 	    // other fields
         * 	}
         */
        export interface ClusterStatusConditionsPatch {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: string;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message: string;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration: number;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason: string;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             * ---
             * Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
             * useful (see .node.status.conditions), the ability to deconflict is important.
             * The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: string;
        }

        /**
         * The list of resource versions of the configmaps,
         * managed by the operator. Every change here is done in the
         * interest of the instance manager, which will refresh the
         * configmap data
         */
        export interface ClusterStatusConfigMapResourceVersion {
            /**
             * A map with the versions of all the config maps used to pass metrics.
             * Map keys are the config map names, map values are the versions
             */
            metrics: {[key: string]: string};
        }

        /**
         * The list of resource versions of the configmaps,
         * managed by the operator. Every change here is done in the
         * interest of the instance manager, which will refresh the
         * configmap data
         */
        export interface ClusterStatusConfigMapResourceVersionPatch {
            /**
             * A map with the versions of all the config maps used to pass metrics.
             * Map keys are the config map names, map values are the versions
             */
            metrics: {[key: string]: string};
        }

        /**
         * ManagedRolesStatus reports the state of the managed roles in the cluster
         */
        export interface ClusterStatusManagedRolesStatus {
            /**
             * ByStatus gives the list of roles in each state
             */
            byStatus: {[key: string]: string[]};
            /**
             * CannotReconcile lists roles that cannot be reconciled in PostgreSQL,
             * with an explanation of the cause
             */
            cannotReconcile: {[key: string]: string[]};
            /**
             * PasswordStatus gives the last transaction id and password secret version for each managed role
             */
            passwordStatus: {[key: string]: {[key: string]: string}};
        }

        /**
         * ManagedRolesStatus reports the state of the managed roles in the cluster
         */
        export interface ClusterStatusManagedRolesStatusPatch {
            /**
             * ByStatus gives the list of roles in each state
             */
            byStatus: {[key: string]: string[]};
            /**
             * CannotReconcile lists roles that cannot be reconciled in PostgreSQL,
             * with an explanation of the cause
             */
            cannotReconcile: {[key: string]: string[]};
            /**
             * PasswordStatus gives the last transaction id and password secret version for each managed role
             */
            passwordStatus: {[key: string]: {[key: string]: string}};
        }

        /**
         * Most recently observed status of the cluster. This data may not be up
         * to date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterStatusPatch {
            /**
             * AvailableArchitectures reports the available architectures of a cluster
             */
            availableArchitectures: outputs.postgresql.v1.ClusterStatusAvailableArchitecturesPatch[];
            /**
             * AzurePVCUpdateEnabled shows if the PVC online upgrade is enabled for this cluster
             */
            azurePVCUpdateEnabled: boolean;
            certificates: outputs.postgresql.v1.ClusterStatusCertificatesPatch;
            /**
             * The commit hash number of which this operator running
             */
            cloudNativePGCommitHash: string;
            /**
             * The hash of the binary of the operator
             */
            cloudNativePGOperatorHash: string;
            /**
             * Conditions for cluster object
             */
            conditions: outputs.postgresql.v1.ClusterStatusConditionsPatch[];
            configMapResourceVersion: outputs.postgresql.v1.ClusterStatusConfigMapResourceVersionPatch;
            /**
             * Current primary instance
             */
            currentPrimary: string;
            /**
             * The timestamp when the primary was detected to be unhealthy
             * This field is reported when `.spec.failoverDelay` is populated or during online upgrades
             */
            currentPrimaryFailingSinceTimestamp: string;
            /**
             * The timestamp when the last actual promotion to primary has occurred
             */
            currentPrimaryTimestamp: string;
            /**
             * List of all the PVCs created by this cluster and still available
             * which are not attached to a Pod
             */
            danglingPVC: string[];
            /**
             * DemotionToken is a JSON token containing the information
             * from pg_controldata such as Database system identifier, Latest checkpoint's
             * TimeLineID, Latest checkpoint's REDO location, Latest checkpoint's REDO
             * WAL file, and Time of latest checkpoint
             */
            demotionToken: string;
            /**
             * The first recoverability point, stored as a date in RFC3339 format.
             * This field is calculated from the content of FirstRecoverabilityPointByMethod
             */
            firstRecoverabilityPoint: string;
            /**
             * The first recoverability point, stored as a date in RFC3339 format, per backup method type
             */
            firstRecoverabilityPointByMethod: {[key: string]: string};
            /**
             * List of all the PVCs not dangling nor initializing
             */
            healthyPVC: string[];
            /**
             * Image contains the image name used by the pods
             */
            image: string;
            /**
             * List of all the PVCs that are being initialized by this cluster
             */
            initializingPVC: string[];
            /**
             * List of instance names in the cluster
             */
            instanceNames: string[];
            /**
             * The total number of PVC Groups detected in the cluster. It may differ from the number of existing instance pods.
             */
            instances: number;
            /**
             * The reported state of the instances during the last reconciliation loop
             */
            instancesReportedState: {[key: string]: {[key: string]: string}};
            /**
             * InstancesStatus indicates in which status the instances are
             */
            instancesStatus: {[key: string]: string[]};
            /**
             * How many Jobs have been created by this cluster
             */
            jobCount: number;
            /**
             * Stored as a date in RFC3339 format
             */
            lastFailedBackup: string;
            /**
             * LastPromotionToken is the last verified promotion token that
             * was used to promote a replica cluster
             */
            lastPromotionToken: string;
            /**
             * Last successful backup, stored as a date in RFC3339 format
             * This field is calculated from the content of LastSuccessfulBackupByMethod
             */
            lastSuccessfulBackup: string;
            /**
             * Last successful backup, stored as a date in RFC3339 format, per backup method type
             */
            lastSuccessfulBackupByMethod: {[key: string]: string};
            /**
             * ID of the latest generated node (used to avoid node name clashing)
             */
            latestGeneratedNode: number;
            managedRolesStatus: outputs.postgresql.v1.ClusterStatusManagedRolesStatusPatch;
            /**
             * OnlineUpdateEnabled shows if the online upgrade is enabled inside the cluster
             */
            onlineUpdateEnabled: boolean;
            /**
             * Current phase of the cluster
             */
            phase: string;
            /**
             * Reason for the current phase
             */
            phaseReason: string;
            /**
             * PluginStatus is the status of the loaded plugins
             */
            pluginStatus: outputs.postgresql.v1.ClusterStatusPluginStatusPatch[];
            poolerIntegrations: outputs.postgresql.v1.ClusterStatusPoolerIntegrationsPatch;
            /**
             * How many PVCs have been created by this cluster
             */
            pvcCount: number;
            /**
             * Current list of read pods
             */
            readService: string;
            /**
             * The total number of ready instances in the cluster. It is equal to the number of ready instance pods.
             */
            readyInstances: number;
            /**
             * List of all the PVCs that have ResizingPVC condition.
             */
            resizingPVC: string[];
            secretsResourceVersion: outputs.postgresql.v1.ClusterStatusSecretsResourceVersionPatch;
            switchReplicaClusterStatus: outputs.postgresql.v1.ClusterStatusSwitchReplicaClusterStatusPatch;
            /**
             * TablespacesStatus reports the state of the declarative tablespaces in the cluster
             */
            tablespacesStatus: outputs.postgresql.v1.ClusterStatusTablespacesStatusPatch[];
            /**
             * Target primary instance, this is different from the previous one
             * during a switchover or a failover
             */
            targetPrimary: string;
            /**
             * The timestamp when the last request for a new primary has occurred
             */
            targetPrimaryTimestamp: string;
            /**
             * The timeline of the Postgres cluster
             */
            timelineID: number;
            topology: outputs.postgresql.v1.ClusterStatusTopologyPatch;
            /**
             * List of all the PVCs that are unusable because another PVC is missing
             */
            unusablePVC: string[];
            /**
             * Current write pod
             */
            writeService: string;
        }

        /**
         * PluginStatus is the status of a loaded plugin
         */
        export interface ClusterStatusPluginStatus {
            /**
             * BackupCapabilities are the list of capabilities of the
             * plugin regarding the Backup management
             */
            backupCapabilities: string[];
            /**
             * Capabilities are the list of capabilities of the
             * plugin
             */
            capabilities: string[];
            /**
             * Name is the name of the plugin
             */
            name: string;
            /**
             * OperatorCapabilities are the list of capabilities of the
             * plugin regarding the reconciler
             */
            operatorCapabilities: string[];
            /**
             * Status contain the status reported by the plugin through the SetStatusInCluster interface
             */
            status: string;
            /**
             * Version is the version of the plugin loaded by the
             * latest reconciliation loop
             */
            version: string;
            /**
             * WALCapabilities are the list of capabilities of the
             * plugin regarding the WAL management
             */
            walCapabilities: string[];
        }

        /**
         * PluginStatus is the status of a loaded plugin
         */
        export interface ClusterStatusPluginStatusPatch {
            /**
             * BackupCapabilities are the list of capabilities of the
             * plugin regarding the Backup management
             */
            backupCapabilities: string[];
            /**
             * Capabilities are the list of capabilities of the
             * plugin
             */
            capabilities: string[];
            /**
             * Name is the name of the plugin
             */
            name: string;
            /**
             * OperatorCapabilities are the list of capabilities of the
             * plugin regarding the reconciler
             */
            operatorCapabilities: string[];
            /**
             * Status contain the status reported by the plugin through the SetStatusInCluster interface
             */
            status: string;
            /**
             * Version is the version of the plugin loaded by the
             * latest reconciliation loop
             */
            version: string;
            /**
             * WALCapabilities are the list of capabilities of the
             * plugin regarding the WAL management
             */
            walCapabilities: string[];
        }

        /**
         * The integration needed by poolers referencing the cluster
         */
        export interface ClusterStatusPoolerIntegrations {
            pgBouncerIntegration: outputs.postgresql.v1.ClusterStatusPoolerIntegrationsPgBouncerIntegration;
        }

        /**
         * The integration needed by poolers referencing the cluster
         */
        export interface ClusterStatusPoolerIntegrationsPatch {
            pgBouncerIntegration: outputs.postgresql.v1.ClusterStatusPoolerIntegrationsPgBouncerIntegrationPatch;
        }

        /**
         * PgBouncerIntegrationStatus encapsulates the needed integration for the pgbouncer poolers referencing the cluster
         */
        export interface ClusterStatusPoolerIntegrationsPgBouncerIntegration {
            secrets: string[];
        }

        /**
         * PgBouncerIntegrationStatus encapsulates the needed integration for the pgbouncer poolers referencing the cluster
         */
        export interface ClusterStatusPoolerIntegrationsPgBouncerIntegrationPatch {
            secrets: string[];
        }

        /**
         * The list of resource versions of the secrets
         * managed by the operator. Every change here is done in the
         * interest of the instance manager, which will refresh the
         * secret data
         */
        export interface ClusterStatusSecretsResourceVersion {
            /**
             * The resource version of the "app" user secret
             */
            applicationSecretVersion: string;
            /**
             * The resource version of the Barman Endpoint CA if provided
             */
            barmanEndpointCA: string;
            /**
             * Unused. Retained for compatibility with old versions.
             */
            caSecretVersion: string;
            /**
             * The resource version of the PostgreSQL client-side CA secret version
             */
            clientCaSecretVersion: string;
            /**
             * The resource versions of the external cluster secrets
             */
            externalClusterSecretVersion: {[key: string]: string};
            /**
             * The resource versions of the managed roles secrets
             */
            managedRoleSecretVersion: {[key: string]: string};
            /**
             * A map with the versions of all the secrets used to pass metrics.
             * Map keys are the secret names, map values are the versions
             */
            metrics: {[key: string]: string};
            /**
             * The resource version of the "streaming_replica" user secret
             */
            replicationSecretVersion: string;
            /**
             * The resource version of the PostgreSQL server-side CA secret version
             */
            serverCaSecretVersion: string;
            /**
             * The resource version of the PostgreSQL server-side secret version
             */
            serverSecretVersion: string;
            /**
             * The resource version of the "postgres" user secret
             */
            superuserSecretVersion: string;
        }

        /**
         * The list of resource versions of the secrets
         * managed by the operator. Every change here is done in the
         * interest of the instance manager, which will refresh the
         * secret data
         */
        export interface ClusterStatusSecretsResourceVersionPatch {
            /**
             * The resource version of the "app" user secret
             */
            applicationSecretVersion: string;
            /**
             * The resource version of the Barman Endpoint CA if provided
             */
            barmanEndpointCA: string;
            /**
             * Unused. Retained for compatibility with old versions.
             */
            caSecretVersion: string;
            /**
             * The resource version of the PostgreSQL client-side CA secret version
             */
            clientCaSecretVersion: string;
            /**
             * The resource versions of the external cluster secrets
             */
            externalClusterSecretVersion: {[key: string]: string};
            /**
             * The resource versions of the managed roles secrets
             */
            managedRoleSecretVersion: {[key: string]: string};
            /**
             * A map with the versions of all the secrets used to pass metrics.
             * Map keys are the secret names, map values are the versions
             */
            metrics: {[key: string]: string};
            /**
             * The resource version of the "streaming_replica" user secret
             */
            replicationSecretVersion: string;
            /**
             * The resource version of the PostgreSQL server-side CA secret version
             */
            serverCaSecretVersion: string;
            /**
             * The resource version of the PostgreSQL server-side secret version
             */
            serverSecretVersion: string;
            /**
             * The resource version of the "postgres" user secret
             */
            superuserSecretVersion: string;
        }

        /**
         * SwitchReplicaClusterStatus is the status of the switch to replica cluster
         */
        export interface ClusterStatusSwitchReplicaClusterStatus {
            /**
             * InProgress indicates if there is an ongoing procedure of switching a cluster to a replica cluster.
             */
            inProgress: boolean;
        }

        /**
         * SwitchReplicaClusterStatus is the status of the switch to replica cluster
         */
        export interface ClusterStatusSwitchReplicaClusterStatusPatch {
            /**
             * InProgress indicates if there is an ongoing procedure of switching a cluster to a replica cluster.
             */
            inProgress: boolean;
        }

        /**
         * TablespaceState represents the state of a tablespace in a cluster
         */
        export interface ClusterStatusTablespacesStatus {
            /**
             * Error is the reconciliation error, if any
             */
            error: string;
            /**
             * Name is the name of the tablespace
             */
            name: string;
            /**
             * Owner is the PostgreSQL user owning the tablespace
             */
            owner: string;
            /**
             * State is the latest reconciliation state
             */
            state: string;
        }

        /**
         * TablespaceState represents the state of a tablespace in a cluster
         */
        export interface ClusterStatusTablespacesStatusPatch {
            /**
             * Error is the reconciliation error, if any
             */
            error: string;
            /**
             * Name is the name of the tablespace
             */
            name: string;
            /**
             * Owner is the PostgreSQL user owning the tablespace
             */
            owner: string;
            /**
             * State is the latest reconciliation state
             */
            state: string;
        }

        /**
         * Instances topology.
         */
        export interface ClusterStatusTopology {
            /**
             * Instances contains the pod topology of the instances
             */
            instances: {[key: string]: {[key: string]: string}};
            /**
             * NodesUsed represents the count of distinct nodes accommodating the instances.
             * A value of '1' suggests that all instances are hosted on a single node,
             * implying the absence of High Availability (HA). Ideally, this value should
             * be the same as the number of instances in the Postgres HA cluster, implying
             * shared nothing architecture on the compute side.
             */
            nodesUsed: number;
            /**
             * SuccessfullyExtracted indicates if the topology data was extract. It is useful to enact fallback behaviors
             * in synchronous replica election in case of failures
             */
            successfullyExtracted: boolean;
        }

        /**
         * Instances topology.
         */
        export interface ClusterStatusTopologyPatch {
            /**
             * Instances contains the pod topology of the instances
             */
            instances: {[key: string]: {[key: string]: string}};
            /**
             * NodesUsed represents the count of distinct nodes accommodating the instances.
             * A value of '1' suggests that all instances are hosted on a single node,
             * implying the absence of High Availability (HA). Ideally, this value should
             * be the same as the number of instances in the Postgres HA cluster, implying
             * shared nothing architecture on the compute side.
             */
            nodesUsed: number;
            /**
             * SuccessfullyExtracted indicates if the topology data was extract. It is useful to enact fallback behaviors
             * in synchronous replica election in case of failures
             */
            successfullyExtracted: boolean;
        }

        /**
         * ImageCatalog is the Schema for the imagecatalogs API
         */
        export interface ImageCatalog {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "postgresql.cnpg.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ImageCatalog";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.postgresql.v1.ImageCatalogSpec;
        }

        /**
         * Specification of the desired behavior of the ImageCatalog.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ImageCatalogSpec {
            /**
             * List of CatalogImages available in the catalog
             */
            images: outputs.postgresql.v1.ImageCatalogSpecImages[];
        }

        /**
         * CatalogImage defines the image and major version
         */
        export interface ImageCatalogSpecImages {
            /**
             * The image reference
             */
            image: string;
            /**
             * The PostgreSQL major version of the image. Must be unique within the catalog.
             */
            major: number;
        }

        /**
         * CatalogImage defines the image and major version
         */
        export interface ImageCatalogSpecImagesPatch {
            /**
             * The image reference
             */
            image: string;
            /**
             * The PostgreSQL major version of the image. Must be unique within the catalog.
             */
            major: number;
        }

        /**
         * Specification of the desired behavior of the ImageCatalog.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ImageCatalogSpecPatch {
            /**
             * List of CatalogImages available in the catalog
             */
            images: outputs.postgresql.v1.ImageCatalogSpecImagesPatch[];
        }

        /**
         * Pooler is the Schema for the poolers API
         */
        export interface Pooler {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "postgresql.cnpg.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Pooler";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.postgresql.v1.PoolerSpec;
            status: outputs.postgresql.v1.PoolerStatus;
        }

        /**
         * Specification of the desired behavior of the Pooler.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpec {
            cluster: outputs.postgresql.v1.PoolerSpecCluster;
            deploymentStrategy: outputs.postgresql.v1.PoolerSpecDeploymentStrategy;
            /**
             * The number of replicas we want. Default: 1.
             */
            instances: number;
            monitoring: outputs.postgresql.v1.PoolerSpecMonitoring;
            pgbouncer: outputs.postgresql.v1.PoolerSpecPgbouncer;
            serviceTemplate: outputs.postgresql.v1.PoolerSpecServiceTemplate;
            template: outputs.postgresql.v1.PoolerSpecTemplate;
            /**
             * Type of service to forward traffic to. Default: `rw`.
             */
            type: string;
        }

        /**
         * This is the cluster reference on which the Pooler will work.
         * Pooler name should never match with any cluster name within the same namespace.
         */
        export interface PoolerSpecCluster {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * This is the cluster reference on which the Pooler will work.
         * Pooler name should never match with any cluster name within the same namespace.
         */
        export interface PoolerSpecClusterPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The deployment strategy to use for pgbouncer to replace existing pods with new ones
         */
        export interface PoolerSpecDeploymentStrategy {
            rollingUpdate: outputs.postgresql.v1.PoolerSpecDeploymentStrategyRollingUpdate;
            /**
             * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
             */
            type: string;
        }

        /**
         * The deployment strategy to use for pgbouncer to replace existing pods with new ones
         */
        export interface PoolerSpecDeploymentStrategyPatch {
            rollingUpdate: outputs.postgresql.v1.PoolerSpecDeploymentStrategyRollingUpdatePatch;
            /**
             * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
             */
            type: string;
        }

        /**
         * Rolling update config params. Present only if DeploymentStrategyType =
         * RollingUpdate.
         * ---
         * TODO: Update this to follow our convention for oneOf, whatever we decide it
         * to be.
         */
        export interface PoolerSpecDeploymentStrategyRollingUpdate {
            /**
             * The maximum number of pods that can be scheduled above the desired number of
             * pods.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * This can not be 0 if MaxUnavailable is 0.
             * Absolute number is calculated from percentage by rounding up.
             * Defaults to 25%.
             * Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
             * the rolling update starts, such that the total number of old and new pods do not exceed
             * 130% of desired pods. Once old pods have been killed,
             * new ReplicaSet can be scaled up further, ensuring that total number of pods running
             * at any time during the update is at most 130% of desired pods.
             */
            maxSurge: number | string;
            /**
             * The maximum number of pods that can be unavailable during the update.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * Absolute number is calculated from percentage by rounding down.
             * This can not be 0 if MaxSurge is 0.
             * Defaults to 25%.
             * Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
             * immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
             * can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
             * that the total number of pods available at all times during the update is at
             * least 70% of desired pods.
             */
            maxUnavailable: number | string;
        }

        /**
         * Rolling update config params. Present only if DeploymentStrategyType =
         * RollingUpdate.
         * ---
         * TODO: Update this to follow our convention for oneOf, whatever we decide it
         * to be.
         */
        export interface PoolerSpecDeploymentStrategyRollingUpdatePatch {
            /**
             * The maximum number of pods that can be scheduled above the desired number of
             * pods.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * This can not be 0 if MaxUnavailable is 0.
             * Absolute number is calculated from percentage by rounding up.
             * Defaults to 25%.
             * Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when
             * the rolling update starts, such that the total number of old and new pods do not exceed
             * 130% of desired pods. Once old pods have been killed,
             * new ReplicaSet can be scaled up further, ensuring that total number of pods running
             * at any time during the update is at most 130% of desired pods.
             */
            maxSurge: number | string;
            /**
             * The maximum number of pods that can be unavailable during the update.
             * Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%).
             * Absolute number is calculated from percentage by rounding down.
             * This can not be 0 if MaxSurge is 0.
             * Defaults to 25%.
             * Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods
             * immediately when the rolling update starts. Once new pods are ready, old ReplicaSet
             * can be scaled down further, followed by scaling up the new ReplicaSet, ensuring
             * that the total number of pods available at all times during the update is at
             * least 70% of desired pods.
             */
            maxUnavailable: number | string;
        }

        /**
         * The configuration of the monitoring infrastructure of this pooler.
         */
        export interface PoolerSpecMonitoring {
            /**
             * Enable or disable the `PodMonitor`
             */
            enablePodMonitor: boolean;
            /**
             * The list of metric relabelings for the `PodMonitor`. Applied to samples before ingestion.
             */
            podMonitorMetricRelabelings: outputs.postgresql.v1.PoolerSpecMonitoringPodMonitorMetricRelabelings[];
            /**
             * The list of relabelings for the `PodMonitor`. Applied to samples before scraping.
             */
            podMonitorRelabelings: outputs.postgresql.v1.PoolerSpecMonitoringPodMonitorRelabelings[];
        }

        /**
         * The configuration of the monitoring infrastructure of this pooler.
         */
        export interface PoolerSpecMonitoringPatch {
            /**
             * Enable or disable the `PodMonitor`
             */
            enablePodMonitor: boolean;
            /**
             * The list of metric relabelings for the `PodMonitor`. Applied to samples before ingestion.
             */
            podMonitorMetricRelabelings: outputs.postgresql.v1.PoolerSpecMonitoringPodMonitorMetricRelabelingsPatch[];
            /**
             * The list of relabelings for the `PodMonitor`. Applied to samples before scraping.
             */
            podMonitorRelabelings: outputs.postgresql.v1.PoolerSpecMonitoringPodMonitorRelabelingsPatch[];
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface PoolerSpecMonitoringPodMonitorMetricRelabelings {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface PoolerSpecMonitoringPodMonitorMetricRelabelingsPatch {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface PoolerSpecMonitoringPodMonitorRelabelings {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
         * scraped samples and remote write samples.
         *
         *
         * More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
         */
        export interface PoolerSpecMonitoringPodMonitorRelabelingsPatch {
            /**
             * Action to perform based on the regex matching.
             *
             *
             * `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
             * `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.
             *
             *
             * Default: "Replace"
             */
            action: string;
            /**
             * Modulus to take of the hash of the source label values.
             *
             *
             * Only applicable when the action is `HashMod`.
             */
            modulus: number;
            /**
             * Regular expression against which the extracted value is matched.
             */
            regex: string;
            /**
             * Replacement value against which a Replace action is performed if the
             * regular expression matches.
             *
             *
             * Regex capture groups are available.
             */
            replacement: string;
            /**
             * Separator is the string between concatenated SourceLabels.
             */
            separator: string;
            /**
             * The source labels select values from existing labels. Their content is
             * concatenated using the configured Separator and matched against the
             * configured regular expression.
             */
            sourceLabels: string[];
            /**
             * Label to which the resulting string is written in a replacement.
             *
             *
             * It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
             * `KeepEqual` and `DropEqual` actions.
             *
             *
             * Regex capture groups are available.
             */
            targetLabel: string;
        }

        /**
         * Specification of the desired behavior of the Pooler.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpecPatch {
            cluster: outputs.postgresql.v1.PoolerSpecClusterPatch;
            deploymentStrategy: outputs.postgresql.v1.PoolerSpecDeploymentStrategyPatch;
            /**
             * The number of replicas we want. Default: 1.
             */
            instances: number;
            monitoring: outputs.postgresql.v1.PoolerSpecMonitoringPatch;
            pgbouncer: outputs.postgresql.v1.PoolerSpecPgbouncerPatch;
            serviceTemplate: outputs.postgresql.v1.PoolerSpecServiceTemplatePatch;
            template: outputs.postgresql.v1.PoolerSpecTemplatePatch;
            /**
             * Type of service to forward traffic to. Default: `rw`.
             */
            type: string;
        }

        /**
         * The PgBouncer configuration
         */
        export interface PoolerSpecPgbouncer {
            /**
             * The query that will be used to download the hash of the password
             * of a certain user. Default: "SELECT usename, passwd FROM public.user_search($1)".
             * In case it is specified, also an AuthQuerySecret has to be specified and
             * no automatic CNPG Cluster integration will be triggered.
             */
            authQuery: string;
            authQuerySecret: outputs.postgresql.v1.PoolerSpecPgbouncerAuthQuerySecret;
            /**
             * Additional parameters to be passed to PgBouncer - please check
             * the CNPG documentation for a list of options you can configure
             */
            parameters: {[key: string]: string};
            /**
             * When set to `true`, PgBouncer will disconnect from the PostgreSQL
             * server, first waiting for all queries to complete, and pause all new
             * client connections until this value is set to `false` (default). Internally,
             * the operator calls PgBouncer's `PAUSE` and `RESUME` commands.
             */
            paused: boolean;
            /**
             * PostgreSQL Host Based Authentication rules (lines to be appended
             * to the pg_hba.conf file)
             */
            pg_hba: string[];
            /**
             * The pool mode. Default: `session`.
             */
            poolMode: string;
        }

        /**
         * The credentials of the user that need to be used for the authentication
         * query. In case it is specified, also an AuthQuery
         * (e.g. "SELECT usename, passwd FROM pg_catalog.pg_shadow WHERE usename=$1")
         * has to be specified and no automatic CNPG Cluster integration will be triggered.
         */
        export interface PoolerSpecPgbouncerAuthQuerySecret {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The credentials of the user that need to be used for the authentication
         * query. In case it is specified, also an AuthQuery
         * (e.g. "SELECT usename, passwd FROM pg_catalog.pg_shadow WHERE usename=$1")
         * has to be specified and no automatic CNPG Cluster integration will be triggered.
         */
        export interface PoolerSpecPgbouncerAuthQuerySecretPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The PgBouncer configuration
         */
        export interface PoolerSpecPgbouncerPatch {
            /**
             * The query that will be used to download the hash of the password
             * of a certain user. Default: "SELECT usename, passwd FROM public.user_search($1)".
             * In case it is specified, also an AuthQuerySecret has to be specified and
             * no automatic CNPG Cluster integration will be triggered.
             */
            authQuery: string;
            authQuerySecret: outputs.postgresql.v1.PoolerSpecPgbouncerAuthQuerySecretPatch;
            /**
             * Additional parameters to be passed to PgBouncer - please check
             * the CNPG documentation for a list of options you can configure
             */
            parameters: {[key: string]: string};
            /**
             * When set to `true`, PgBouncer will disconnect from the PostgreSQL
             * server, first waiting for all queries to complete, and pause all new
             * client connections until this value is set to `false` (default). Internally,
             * the operator calls PgBouncer's `PAUSE` and `RESUME` commands.
             */
            paused: boolean;
            /**
             * PostgreSQL Host Based Authentication rules (lines to be appended
             * to the pg_hba.conf file)
             */
            pg_hba: string[];
            /**
             * The pool mode. Default: `session`.
             */
            poolMode: string;
        }

        /**
         * Template for the Service to be created
         */
        export interface PoolerSpecServiceTemplate {
            metadata: outputs.postgresql.v1.PoolerSpecServiceTemplateMetadata;
            spec: outputs.postgresql.v1.PoolerSpecServiceTemplateSpec;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface PoolerSpecServiceTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface PoolerSpecServiceTemplateMetadataPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * Template for the Service to be created
         */
        export interface PoolerSpecServiceTemplatePatch {
            metadata: outputs.postgresql.v1.PoolerSpecServiceTemplateMetadataPatch;
            spec: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecPatch;
        }

        /**
         * Specification of the desired behavior of the service.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpecServiceTemplateSpec {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically
             * allocated for services with type LoadBalancer.  Default is "true". It
             * may be set to "false" if the cluster load-balancer does not rely on
             * NodePorts.  If the caller requests specific NodePorts (by specifying a
             * value), those requests will be respected, regardless of this field.
             * This field may only be set for services with type LoadBalancer and will
             * be cleared if the type is changed to any other type.
             */
            allocateLoadBalancerNodePorts: boolean;
            /**
             * clusterIP is the IP address of the service and is usually assigned
             * randomly. If an address is specified manually, is in-range (as per
             * system configuration), and is not in use, it will be allocated to the
             * service; otherwise creation of the service will fail. This field may not
             * be changed through updates unless the type field is also being changed
             * to ExternalName (which requires this field to be blank) or the type
             * field is being changed from ExternalName (in which case this field may
             * optionally be specified, as describe above).  Valid values are "None",
             * empty string (""), or a valid IP address. Setting this to "None" makes a
             * "headless service" (no virtual IP), which is useful when direct endpoint
             * connections are preferred and proxying is not required.  Only applies to
             * types ClusterIP, NodePort, and LoadBalancer. If this field is specified
             * when creating a Service of type ExternalName, creation will fail. This
             * field will be wiped when updating a Service to type ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP: string;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are
             * usually assigned randomly.  If an address is specified manually, is
             * in-range (as per system configuration), and is not in use, it will be
             * allocated to the service; otherwise creation of the service will fail.
             * This field may not be changed through updates unless the type field is
             * also being changed to ExternalName (which requires this field to be
             * empty) or the type field is being changed from ExternalName (in which
             * case this field may optionally be specified, as describe above).  Valid
             * values are "None", empty string (""), or a valid IP address.  Setting
             * this to "None" makes a "headless service" (no virtual IP), which is
             * useful when direct endpoint connections are preferred and proxying is
             * not required.  Only applies to types ClusterIP, NodePort, and
             * LoadBalancer. If this field is specified when creating a Service of type
             * ExternalName, creation will fail. This field will be wiped when updating
             * a Service to type ExternalName.  If this field is not specified, it will
             * be initialized from the clusterIP field.  If this field is specified,
             * clients must ensure that clusterIPs[0] and clusterIP have the same
             * value.
             *
             *
             * This field may hold a maximum of two entries (dual-stack IPs, in either order).
             * These IPs must correspond to the values of the ipFamilies field. Both
             * clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs: string[];
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster
             * will also accept traffic for this service.  These IPs are not managed by
             * Kubernetes.  The user is responsible for ensuring that traffic arrives
             * at a node with this IP.  A common example is external load-balancers
             * that are not part of the Kubernetes system.
             */
            externalIPs: string[];
            /**
             * externalName is the external reference that discovery mechanisms will
             * return as an alias for this service (e.g. a DNS CNAME record). No
             * proxying will be involved.  Must be a lowercase RFC-1123 hostname
             * (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName: string;
            /**
             * externalTrafficPolicy describes how nodes distribute service traffic they
             * receive on one of the Service's "externally-facing" addresses (NodePorts,
             * ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
             * the service in a way that assumes that external load balancers will take care
             * of balancing the service traffic between nodes, and so each node will deliver
             * traffic only to the node-local endpoints of the service, without masquerading
             * the client source IP. (Traffic mistakenly sent to a node with no endpoints will
             * be dropped.) The default value, "Cluster", uses the standard behavior of
             * routing to all endpoints evenly (possibly modified by topology and other
             * features). Note that traffic sent to an External IP or LoadBalancer IP from
             * within the cluster will always get "Cluster" semantics, but clients sending to
             * a NodePort from within the cluster may need to take traffic policy into account
             * when picking a node.
             */
            externalTrafficPolicy: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service.
             * This only applies when type is set to LoadBalancer and
             * externalTrafficPolicy is set to Local. If a value is specified, is
             * in-range, and is not in use, it will be used.  If not specified, a value
             * will be automatically allocated.  External systems (e.g. load-balancers)
             * can use this port to determine if a given node holds endpoints for this
             * service or not.  If this field is specified when creating a Service
             * which does not need it, creation will fail. This field will be wiped
             * when updating a Service to no longer need it (e.g. changing type).
             * This field cannot be updated once set.
             */
            healthCheckNodePort: number;
            /**
             * InternalTrafficPolicy describes how nodes distribute service traffic they
             * receive on the ClusterIP. If set to "Local", the proxy will assume that pods
             * only want to talk to endpoints of the service on the same node as the pod,
             * dropping the traffic if there are no local endpoints. The default value,
             * "Cluster", uses the standard behavior of routing to all endpoints evenly
             * (possibly modified by topology and other features).
             */
            internalTrafficPolicy: string;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
             * service. This field is usually assigned automatically based on cluster
             * configuration and the ipFamilyPolicy field. If this field is specified
             * manually, the requested family is available in the cluster,
             * and ipFamilyPolicy allows it, it will be used; otherwise creation of
             * the service will fail. This field is conditionally mutable: it allows
             * for adding or removing a secondary IP family, but it does not allow
             * changing the primary IP family of the Service. Valid values are "IPv4"
             * and "IPv6".  This field only applies to Services of types ClusterIP,
             * NodePort, and LoadBalancer, and does apply to "headless" services.
             * This field will be wiped when updating a Service to type ExternalName.
             *
             *
             * This field may hold a maximum of two entries (dual-stack families, in
             * either order).  These families must correspond to the values of the
             * clusterIPs field, if specified. Both clusterIPs and ipFamilies are
             * governed by the ipFamilyPolicy field.
             */
            ipFamilies: string[];
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by
             * this Service. If there is no value provided, then this field will be set
             * to SingleStack. Services can be "SingleStack" (a single IP family),
             * "PreferDualStack" (two IP families on dual-stack configured clusters or
             * a single IP family on single-stack clusters), or "RequireDualStack"
             * (two IP families on dual-stack configured clusters, otherwise fail). The
             * ipFamilies and clusterIPs fields depend on the value of this field. This
             * field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy: string;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to.
             * If specified, the value of this field must be a label-style identifier, with an optional prefix,
             * e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
             * This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
             * balancer implementation is used, today this is typically done through the cloud provider integration,
             * but should apply for any default implementation. If set, it is assumed that a load balancer
             * implementation is watching for Services with a matching class. Any default load balancer
             * implementation (e.g. cloud providers) should ignore Services that set this field.
             * This field can only be set when creating or updating a Service to type 'LoadBalancer'.
             * Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass: string;
            /**
             * Only applies to Service Type: LoadBalancer.
             * This feature depends on whether the underlying cloud-provider supports specifying
             * the loadBalancerIP when a load balancer is created.
             * This field will be ignored if the cloud-provider does not support the feature.
             * Deprecated: This field was under-specified and its meaning varies across implementations.
             * Using it is non-portable and it may not support dual-stack.
             * Users are encouraged to use implementation-specific annotations when available.
             */
            loadBalancerIP: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider
             * load-balancer will be restricted to the specified client IPs. This field will be ignored if the
             * cloud-provider does not support the feature."
             * More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges: string[];
            /**
             * The list of ports that are exposed by this service.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecPorts[];
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this
             * Service should disregard any indications of ready/not-ready.
             * The primary use case for setting this field is for a StatefulSet's Headless Service to
             * propagate SRV DNS records for its Pods for the purpose of peer discovery.
             * The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
             * Services interpret this to mean that all endpoints are considered "ready" even if the
             * Pods themselves are not. Agents which consume only Kubernetes generated endpoints
             * through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this
             * selector. If empty or not present, the service is assumed to have an
             * external process managing its endpoints, which Kubernetes will not
             * modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
             * Ignored if type is ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity.
             * Enable client IP based session affinity.
             * Must be ClientIP or None.
             * Defaults to None.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity: string;
            sessionAffinityConfig: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecSessionAffinityConfig;
            /**
             * TrafficDistribution offers a way to express preferences for how traffic is
             * distributed to Service endpoints. Implementations can use this field as a
             * hint, but are not required to guarantee strict adherence. If the field is
             * not set, the implementation will apply its default routing strategy. If set
             * to "PreferClose", implementations should prioritize endpoints that are
             * topologically close (e.g., same zone).
             * This is an alpha field and requires enabling ServiceTrafficDistribution feature.
             */
            trafficDistribution: string;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid
             * options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
             * "ClusterIP" allocates a cluster-internal IP address for load-balancing
             * to endpoints. Endpoints are determined by the selector or if that is not
             * specified, by manual construction of an Endpoints object or
             * EndpointSlice objects. If clusterIP is "None", no virtual IP is
             * allocated and the endpoints are published as a set of endpoints rather
             * than a virtual IP.
             * "NodePort" builds on ClusterIP and allocates a port on every node which
             * routes to the same endpoints as the clusterIP.
             * "LoadBalancer" builds on NodePort and creates an external load-balancer
             * (if supported in the current cloud) which routes to the same endpoints
             * as the clusterIP.
             * "ExternalName" aliases this service to the specified externalName.
             * Several other fields do not apply to ExternalName services.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: string;
        }

        /**
         * Specification of the desired behavior of the service.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpecServiceTemplateSpecPatch {
            /**
             * allocateLoadBalancerNodePorts defines if NodePorts will be automatically
             * allocated for services with type LoadBalancer.  Default is "true". It
             * may be set to "false" if the cluster load-balancer does not rely on
             * NodePorts.  If the caller requests specific NodePorts (by specifying a
             * value), those requests will be respected, regardless of this field.
             * This field may only be set for services with type LoadBalancer and will
             * be cleared if the type is changed to any other type.
             */
            allocateLoadBalancerNodePorts: boolean;
            /**
             * clusterIP is the IP address of the service and is usually assigned
             * randomly. If an address is specified manually, is in-range (as per
             * system configuration), and is not in use, it will be allocated to the
             * service; otherwise creation of the service will fail. This field may not
             * be changed through updates unless the type field is also being changed
             * to ExternalName (which requires this field to be blank) or the type
             * field is being changed from ExternalName (in which case this field may
             * optionally be specified, as describe above).  Valid values are "None",
             * empty string (""), or a valid IP address. Setting this to "None" makes a
             * "headless service" (no virtual IP), which is useful when direct endpoint
             * connections are preferred and proxying is not required.  Only applies to
             * types ClusterIP, NodePort, and LoadBalancer. If this field is specified
             * when creating a Service of type ExternalName, creation will fail. This
             * field will be wiped when updating a Service to type ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP: string;
            /**
             * ClusterIPs is a list of IP addresses assigned to this service, and are
             * usually assigned randomly.  If an address is specified manually, is
             * in-range (as per system configuration), and is not in use, it will be
             * allocated to the service; otherwise creation of the service will fail.
             * This field may not be changed through updates unless the type field is
             * also being changed to ExternalName (which requires this field to be
             * empty) or the type field is being changed from ExternalName (in which
             * case this field may optionally be specified, as describe above).  Valid
             * values are "None", empty string (""), or a valid IP address.  Setting
             * this to "None" makes a "headless service" (no virtual IP), which is
             * useful when direct endpoint connections are preferred and proxying is
             * not required.  Only applies to types ClusterIP, NodePort, and
             * LoadBalancer. If this field is specified when creating a Service of type
             * ExternalName, creation will fail. This field will be wiped when updating
             * a Service to type ExternalName.  If this field is not specified, it will
             * be initialized from the clusterIP field.  If this field is specified,
             * clients must ensure that clusterIPs[0] and clusterIP have the same
             * value.
             *
             *
             * This field may hold a maximum of two entries (dual-stack IPs, in either order).
             * These IPs must correspond to the values of the ipFamilies field. Both
             * clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIPs: string[];
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster
             * will also accept traffic for this service.  These IPs are not managed by
             * Kubernetes.  The user is responsible for ensuring that traffic arrives
             * at a node with this IP.  A common example is external load-balancers
             * that are not part of the Kubernetes system.
             */
            externalIPs: string[];
            /**
             * externalName is the external reference that discovery mechanisms will
             * return as an alias for this service (e.g. a DNS CNAME record). No
             * proxying will be involved.  Must be a lowercase RFC-1123 hostname
             * (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
             */
            externalName: string;
            /**
             * externalTrafficPolicy describes how nodes distribute service traffic they
             * receive on one of the Service's "externally-facing" addresses (NodePorts,
             * ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
             * the service in a way that assumes that external load balancers will take care
             * of balancing the service traffic between nodes, and so each node will deliver
             * traffic only to the node-local endpoints of the service, without masquerading
             * the client source IP. (Traffic mistakenly sent to a node with no endpoints will
             * be dropped.) The default value, "Cluster", uses the standard behavior of
             * routing to all endpoints evenly (possibly modified by topology and other
             * features). Note that traffic sent to an External IP or LoadBalancer IP from
             * within the cluster will always get "Cluster" semantics, but clients sending to
             * a NodePort from within the cluster may need to take traffic policy into account
             * when picking a node.
             */
            externalTrafficPolicy: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service.
             * This only applies when type is set to LoadBalancer and
             * externalTrafficPolicy is set to Local. If a value is specified, is
             * in-range, and is not in use, it will be used.  If not specified, a value
             * will be automatically allocated.  External systems (e.g. load-balancers)
             * can use this port to determine if a given node holds endpoints for this
             * service or not.  If this field is specified when creating a Service
             * which does not need it, creation will fail. This field will be wiped
             * when updating a Service to no longer need it (e.g. changing type).
             * This field cannot be updated once set.
             */
            healthCheckNodePort: number;
            /**
             * InternalTrafficPolicy describes how nodes distribute service traffic they
             * receive on the ClusterIP. If set to "Local", the proxy will assume that pods
             * only want to talk to endpoints of the service on the same node as the pod,
             * dropping the traffic if there are no local endpoints. The default value,
             * "Cluster", uses the standard behavior of routing to all endpoints evenly
             * (possibly modified by topology and other features).
             */
            internalTrafficPolicy: string;
            /**
             * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
             * service. This field is usually assigned automatically based on cluster
             * configuration and the ipFamilyPolicy field. If this field is specified
             * manually, the requested family is available in the cluster,
             * and ipFamilyPolicy allows it, it will be used; otherwise creation of
             * the service will fail. This field is conditionally mutable: it allows
             * for adding or removing a secondary IP family, but it does not allow
             * changing the primary IP family of the Service. Valid values are "IPv4"
             * and "IPv6".  This field only applies to Services of types ClusterIP,
             * NodePort, and LoadBalancer, and does apply to "headless" services.
             * This field will be wiped when updating a Service to type ExternalName.
             *
             *
             * This field may hold a maximum of two entries (dual-stack families, in
             * either order).  These families must correspond to the values of the
             * clusterIPs field, if specified. Both clusterIPs and ipFamilies are
             * governed by the ipFamilyPolicy field.
             */
            ipFamilies: string[];
            /**
             * IPFamilyPolicy represents the dual-stack-ness requested or required by
             * this Service. If there is no value provided, then this field will be set
             * to SingleStack. Services can be "SingleStack" (a single IP family),
             * "PreferDualStack" (two IP families on dual-stack configured clusters or
             * a single IP family on single-stack clusters), or "RequireDualStack"
             * (two IP families on dual-stack configured clusters, otherwise fail). The
             * ipFamilies and clusterIPs fields depend on the value of this field. This
             * field will be wiped when updating a service to type ExternalName.
             */
            ipFamilyPolicy: string;
            /**
             * loadBalancerClass is the class of the load balancer implementation this Service belongs to.
             * If specified, the value of this field must be a label-style identifier, with an optional prefix,
             * e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
             * This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
             * balancer implementation is used, today this is typically done through the cloud provider integration,
             * but should apply for any default implementation. If set, it is assumed that a load balancer
             * implementation is watching for Services with a matching class. Any default load balancer
             * implementation (e.g. cloud providers) should ignore Services that set this field.
             * This field can only be set when creating or updating a Service to type 'LoadBalancer'.
             * Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
             */
            loadBalancerClass: string;
            /**
             * Only applies to Service Type: LoadBalancer.
             * This feature depends on whether the underlying cloud-provider supports specifying
             * the loadBalancerIP when a load balancer is created.
             * This field will be ignored if the cloud-provider does not support the feature.
             * Deprecated: This field was under-specified and its meaning varies across implementations.
             * Using it is non-portable and it may not support dual-stack.
             * Users are encouraged to use implementation-specific annotations when available.
             */
            loadBalancerIP: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider
             * load-balancer will be restricted to the specified client IPs. This field will be ignored if the
             * cloud-provider does not support the feature."
             * More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
             */
            loadBalancerSourceRanges: string[];
            /**
             * The list of ports that are exposed by this service.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecPortsPatch[];
            /**
             * publishNotReadyAddresses indicates that any agent which deals with endpoints for this
             * Service should disregard any indications of ready/not-ready.
             * The primary use case for setting this field is for a StatefulSet's Headless Service to
             * propagate SRV DNS records for its Pods for the purpose of peer discovery.
             * The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
             * Services interpret this to mean that all endpoints are considered "ready" even if the
             * Pods themselves are not. Agents which consume only Kubernetes generated endpoints
             * through the Endpoints or EndpointSlice resources can safely assume this behavior.
             */
            publishNotReadyAddresses: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this
             * selector. If empty or not present, the service is assumed to have an
             * external process managing its endpoints, which Kubernetes will not
             * modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
             * Ignored if type is ExternalName.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity.
             * Enable client IP based session affinity.
             * Must be ClientIP or None.
             * Defaults to None.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity: string;
            sessionAffinityConfig: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecSessionAffinityConfigPatch;
            /**
             * TrafficDistribution offers a way to express preferences for how traffic is
             * distributed to Service endpoints. Implementations can use this field as a
             * hint, but are not required to guarantee strict adherence. If the field is
             * not set, the implementation will apply its default routing strategy. If set
             * to "PreferClose", implementations should prioritize endpoints that are
             * topologically close (e.g., same zone).
             * This is an alpha field and requires enabling ServiceTrafficDistribution feature.
             */
            trafficDistribution: string;
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid
             * options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
             * "ClusterIP" allocates a cluster-internal IP address for load-balancing
             * to endpoints. Endpoints are determined by the selector or if that is not
             * specified, by manual construction of an Endpoints object or
             * EndpointSlice objects. If clusterIP is "None", no virtual IP is
             * allocated and the endpoints are published as a set of endpoints rather
             * than a virtual IP.
             * "NodePort" builds on ClusterIP and allocates a port on every node which
             * routes to the same endpoints as the clusterIP.
             * "LoadBalancer" builds on NodePort and creates an external load-balancer
             * (if supported in the current cloud) which routes to the same endpoints
             * as the clusterIP.
             * "ExternalName" aliases this service to the specified externalName.
             * Several other fields do not apply to ExternalName services.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type: string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface PoolerSpecServiceTemplateSpecPorts {
            /**
             * The application protocol for this port.
             * This is used as a hint for implementations to offer richer behavior for protocols that they understand.
             * This field follows standard Kubernetes label syntax.
             * Valid values are either:
             *
             *
             * * Un-prefixed protocol names - reserved for IANA standard service names (as per
             * RFC-6335 and https://www.iana.org/assignments/service-names).
             *
             *
             * * Kubernetes-defined prefixed names:
             *   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
             *   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
             *   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
             *
             *
             * * Other protocols should use implementation-defined prefixed names such as
             * mycompany.com/my-custom-protocol.
             */
            appProtocol: string;
            /**
             * The name of this port within the service. This must be a DNS_LABEL.
             * All ports within a ServiceSpec must have unique names. When considering
             * the endpoints for a Service, this must match the 'name' field in the
             * EndpointPort.
             * Optional if only one ServicePort is defined on this service.
             */
            name: string;
            /**
             * The port on each node on which this service is exposed when type is
             * NodePort or LoadBalancer.  Usually assigned by the system. If a value is
             * specified, in-range, and not in use it will be used, otherwise the
             * operation will fail.  If not specified, a port will be allocated if this
             * Service requires one.  If this field is specified when creating a
             * Service which does not need it, creation will fail. This field will be
             * wiped when updating a Service to no longer need it (e.g. changing type
             * from NodePort to ClusterIP).
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
             * Default is TCP.
             */
            protocol: string;
            /**
             * Number or name of the port to access on the pods targeted by the service.
             * Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             * If this is a string, it will be looked up as a named port in the
             * target Pod's container ports. If this is not specified, the value
             * of the 'port' field is used (an identity map).
             * This field is ignored for services with clusterIP=None, and should be
             * omitted or set equal to the 'port' field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort: number | string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface PoolerSpecServiceTemplateSpecPortsPatch {
            /**
             * The application protocol for this port.
             * This is used as a hint for implementations to offer richer behavior for protocols that they understand.
             * This field follows standard Kubernetes label syntax.
             * Valid values are either:
             *
             *
             * * Un-prefixed protocol names - reserved for IANA standard service names (as per
             * RFC-6335 and https://www.iana.org/assignments/service-names).
             *
             *
             * * Kubernetes-defined prefixed names:
             *   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
             *   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
             *   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
             *
             *
             * * Other protocols should use implementation-defined prefixed names such as
             * mycompany.com/my-custom-protocol.
             */
            appProtocol: string;
            /**
             * The name of this port within the service. This must be a DNS_LABEL.
             * All ports within a ServiceSpec must have unique names. When considering
             * the endpoints for a Service, this must match the 'name' field in the
             * EndpointPort.
             * Optional if only one ServicePort is defined on this service.
             */
            name: string;
            /**
             * The port on each node on which this service is exposed when type is
             * NodePort or LoadBalancer.  Usually assigned by the system. If a value is
             * specified, in-range, and not in use it will be used, otherwise the
             * operation will fail.  If not specified, a port will be allocated if this
             * Service requires one.  If this field is specified when creating a
             * Service which does not need it, creation will fail. This field will be
             * wiped when updating a Service to no longer need it (e.g. changing type
             * from NodePort to ClusterIP).
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
             * Default is TCP.
             */
            protocol: string;
            /**
             * Number or name of the port to access on the pods targeted by the service.
             * Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             * If this is a string, it will be looked up as a named port in the
             * target Pod's container ports. If this is not specified, the value
             * of the 'port' field is used (an identity map).
             * This field is ignored for services with clusterIP=None, and should be
             * omitted or set equal to the 'port' field.
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort: number | string;
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface PoolerSpecServiceTemplateSpecSessionAffinityConfig {
            clientIP: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecSessionAffinityConfigClientIP;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface PoolerSpecServiceTemplateSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time.
             * The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
             * Default value is 10800(for 3 hours).
             */
            timeoutSeconds: number;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface PoolerSpecServiceTemplateSpecSessionAffinityConfigClientIPPatch {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time.
             * The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
             * Default value is 10800(for 3 hours).
             */
            timeoutSeconds: number;
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface PoolerSpecServiceTemplateSpecSessionAffinityConfigPatch {
            clientIP: outputs.postgresql.v1.PoolerSpecServiceTemplateSpecSessionAffinityConfigClientIPPatch;
        }

        /**
         * The template of the Pod to be created
         */
        export interface PoolerSpecTemplate {
            metadata: outputs.postgresql.v1.PoolerSpecTemplateMetadata;
            spec: outputs.postgresql.v1.PoolerSpecTemplateSpec;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface PoolerSpecTemplateMetadata {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * Standard object's metadata.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface PoolerSpecTemplateMetadataPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be
             * set by external tools to store and retrieve arbitrary metadata. They are not
             * queryable and should be preserved when modifying objects.
             * More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations: {[key: string]: string};
            /**
             * Map of string keys and values that can be used to organize and categorize
             * (scope and select) objects. May match selectors of replication controllers
             * and services.
             * More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels: {[key: string]: string};
            /**
             * The name of the resource. Only supported for certain types
             */
            name: string;
        }

        /**
         * The template of the Pod to be created
         */
        export interface PoolerSpecTemplatePatch {
            metadata: outputs.postgresql.v1.PoolerSpecTemplateMetadataPatch;
            spec: outputs.postgresql.v1.PoolerSpecTemplateSpecPatch;
        }

        /**
         * Specification of the desired behavior of the pod.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpecTemplateSpec {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinity;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.postgresql.v1.PoolerSpecTemplateSpecContainers[];
            dnsConfig: outputs.postgresql.v1.PoolerSpecTemplateSpecDnsConfig;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainers[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.postgresql.v1.PoolerSpecTemplateSpecHostAliases[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.postgresql.v1.PoolerSpecTemplateSpecImagePullSecrets[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainers[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
             * the scheduler simply schedules this pod onto that node, assuming that it fits resource
             * requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.postgresql.v1.PoolerSpecTemplateSpecOs;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.postgresql.v1.PoolerSpecTemplateSpecReadinessGates[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable.
             */
            resourceClaims: outputs.postgresql.v1.PoolerSpecTemplateSpecResourceClaims[];
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.postgresql.v1.PoolerSpecTemplateSpecSchedulingGates[];
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContext;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.postgresql.v1.PoolerSpecTemplateSpecTolerations[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraints[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumes[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface PoolerSpecTemplateSpecAffinity {
            nodeAffinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinity;
            podAffinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinity;
            podAntiAffinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node matches the corresponding matchExpressions; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0
         * (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator
         * that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. If the operator is Gt or Lt, the values
             * array must have a single element, which will be interpreted as an integer.
             * This array is replaced during a strategic merge patch.
             */
            values: string[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of
         * them are ANDed.
         * The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch[];
        }

        /**
         * If the affinity requirements specified by this field are not met at
         * scheduling time, the pod will not be scheduled onto the node.
         * If the affinity requirements specified by this field cease to be met
         * at some point during pod execution (e.g. due to an update), the system
         * may or may not try to eventually evict the pod from its node.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface PoolerSpecTemplateSpecAffinityPatch {
            nodeAffinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPatch;
            podAffinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPatch;
            podAntiAffinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPatch;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPatch {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy
             * the anti-affinity expressions specified by this field, but it may choose
             * a node that violates one or more of the expressions. The node that is
             * most preferred is the one with the greatest sum of weights, i.e.
             * for each node that meets all of the scheduling requirements (resource
             * request, requiredDuringScheduling anti-affinity expressions, etc.),
             * compute a sum by iterating through the elements of this field and adding
             * "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
             * node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch[];
            /**
             * If the anti-affinity requirements specified by this field are not met at
             * scheduling time, the pod will not be scheduled onto the node.
             * If the anti-affinity requirements specified by this field cease to be met
             * at some point during pod execution (e.g. due to a pod label update), the
             * system may or may not try to eventually evict the pod from its node.
             * When there are multiple elements, the lists of nodes corresponding to each
             * podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch;
            /**
             * weight associated with matching the corresponding podAffinityTerm,
             * in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over a set of resources, in this case pods.
         * If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to.
         * The term is applied to the union of the namespaces selected by this field
         * and the ones listed in the namespaces field.
         * null selector and null or empty namespaces list means "this pod's namespace".
         * An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector
         * relative to the given namespace(s)) that this pod should be
         * co-located (affinity) or not co-located (anti-affinity) with,
         * where co-located is defined as running on a node whose value of
         * the label with key <topologyKey> matches that of any node on which
         * a pod of the set of pods is running
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both matchLabelKeys and labelSelector.
             * Also, matchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will
             * be taken into consideration. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
             * to select the group of existing pods which pods will be taken into consideration
             * for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
             * pod labels will be ignored. The default value is empty.
             * The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
             * Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
             * This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys: string[];
            namespaceSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch;
            /**
             * namespaces specifies a static list of namespace names that the term applies to.
             * The term is applied to the union of the namespaces listed in this field
             * and the ones selected by namespaceSelector.
             * null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
             * the labelSelector in the specified namespaces, where co-located is defined as running on a node
             * whose value of the label with key topologyKey matches that of any node on which any of the
             * selected pods is running.
             * Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PoolerSpecTemplateSpecContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecycle;
            livenessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersPorts[];
            readinessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersResizePolicy[];
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContext;
            startupProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecContainersEnvFrom {
            configMapRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromPatch {
            configMapRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFrom {
            configMapKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromPatch {
            configMapKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecycle {
            postStart: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStart;
            preStop: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePatch {
            postStart: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartPatch;
            preStop: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStart {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartExec;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGet;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartSleep;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartPatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartExecPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStop {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopExec;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGet;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopSleep;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopPatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopExecPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PoolerSpecTemplateSpecContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePatch;
            livenessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersPortsPatch[];
            readinessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersResizePolicyPatch[];
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextPatch;
            startupProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PoolerSpecTemplateSpecContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PoolerSpecTemplateSpecContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextAppArmorProfile;
            capabilities: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default is DefaultProcMount which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default is DefaultProcMount which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface PoolerSpecTemplateSpecDnsConfig {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.postgresql.v1.PoolerSpecTemplateSpecDnsConfigOptions[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface PoolerSpecTemplateSpecDnsConfigOptions {
            /**
             * Required.
             */
            name: string;
            value: string;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface PoolerSpecTemplateSpecDnsConfigOptionsPatch {
            /**
             * Required.
             */
            name: string;
            value: string;
        }

        /**
         * Specifies the DNS parameters of a pod.
         * Parameters specified here will be merged to the generated DNS
         * configuration based on DNSPolicy.
         */
        export interface PoolerSpecTemplateSpecDnsConfigPatch {
            /**
             * A list of DNS name server IP addresses.
             * This will be appended to the base nameservers generated from DNSPolicy.
             * Duplicated nameservers will be removed.
             */
            nameservers: string[];
            /**
             * A list of DNS resolver options.
             * This will be merged with the base options generated from DNSPolicy.
             * Duplicated entries will be removed. Resolution options given in Options
             * will override those that appear in the base DNSPolicy.
             */
            options: outputs.postgresql.v1.PoolerSpecTemplateSpecDnsConfigOptionsPatch[];
            /**
             * A list of DNS search domains for host-name lookup.
             * This will be appended to the base search paths generated from DNSPolicy.
             * Duplicated search paths will be removed.
             */
            searches: string[];
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainers {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecycle;
            livenessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbe;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersPorts[];
            readinessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResizePolicy[];
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResources;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContext;
            startupProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFrom {
            configMapRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromPatch {
            configMapRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFrom {
            configMapKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromPatch {
            configMapKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecycle {
            postStart: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStart;
            preStop: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStop;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePatch {
            postStart: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartPatch;
            preStop: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStart {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartExec;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartPatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartExecPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStop {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopExec;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopPatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopExecPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for
         * user-initiated activities such as debugging. Ephemeral containers have no resource or
         * scheduling guarantees, and they will not be restarted when they exit or when a Pod is
         * removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the
         * Pod to exceed its resource allocation.
         *
         *
         * To add an ephemeral container, use the ephemeralcontainers subresource of an existing
         * Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePatch;
            livenessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbePatch;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL.
             * This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: string;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersPortsPatch[];
            readinessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResizePolicyPatch[];
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResourcesPatch;
            /**
             * Restart policy for the container to manage the restart behavior of each
             * container within a pod.
             * This may only be set for init containers. You cannot set this field on
             * ephemeral containers.
             */
            restartPolicy: string;
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextPatch;
            startupProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets.
             * The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.
             * If not set then the ephemeral container uses the namespaces configured in the Pod spec.
             *
             *
             * The container runtime must implement support for this feature. If the runtime does not
             * support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName: string;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.
             * Cannot be updated.
             */
            volumeMounts: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources
         * already allocated to the pod.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile;
            capabilities: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default is DefaultProcMount which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default is DefaultProcMount which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface PoolerSpecTemplateSpecHostAliases {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
         * pod's hosts file.
         */
        export interface PoolerSpecTemplateSpecHostAliasesPatch {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: string[];
            /**
             * IP address of the host file entry.
             */
            ip: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface PoolerSpecTemplateSpecImagePullSecrets {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the
         * referenced object inside the same namespace.
         */
        export interface PoolerSpecTemplateSpecImagePullSecretsPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PoolerSpecTemplateSpecInitContainers {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnv[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFrom[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecycle;
            livenessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbe;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersPorts[];
            readinessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbe;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResizePolicy[];
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResources;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContext;
            startupProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbe;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersVolumeDevices[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersVolumeMounts[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFrom;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFrom {
            configMapRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromConfigMapRef;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromSecretRef;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromConfigMapRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromConfigMapRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional: boolean;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromPatch {
            configMapRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromConfigMapRefPatch;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromSecretRefPatch;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret must be defined
             */
            optional: boolean;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvPatch {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded
             * using the previously defined environment variables in the container and
             * any service environment variables. If a variable cannot be resolved,
             * the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
             * "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
             * Escaped references will never be expanded, regardless of whether the variable
             * exists or not.
             * Defaults to "".
             */
            value: string;
            valueFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromPatch;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFrom {
            configMapKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef;
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromFieldRef;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef;
            secretKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
         * spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromPatch {
            configMapKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefPatch;
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromFieldRefPatch;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch;
            secretKeyRef: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefPatch {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecycle {
            postStart: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStart;
            preStop: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStop;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events.
         * Cannot be updated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePatch {
            postStart: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartPatch;
            preStop: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopPatch;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStart {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartExec;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGet;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartSleep;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails,
         * the container is terminated and restarted according to its restart policy.
         * Other management of the container blocks until the hook completes.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartPatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartExecPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetPatch;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartSleepPatch;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStop {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopExec;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGet;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopSleep;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an
         * API request or management event such as liveness/startup probe failure,
         * preemption, resource contention, etc. The handler is not called if the
         * container crashes or exits. The Pod's termination grace period countdown begins before the
         * PreStop hook is executed. Regardless of the outcome of the handler, the
         * container will eventually terminate within the Pod's termination grace
         * period (unless delayed by finalizers). Other management of the container blocks until the hook completes
         * or until the termination grace period is reached.
         * More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopPatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopExecPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetPatch;
            sleep: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopSleepPatch;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopSleep {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Sleep represents the duration that the container should sleep before being terminated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopSleepPatch {
            /**
             * Seconds is the number of seconds to sleep.
             */
            seconds: number;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
         * for the backward compatibility. There are no validation of this field and
         * lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container liveness.
         * Container will be restarted if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PoolerSpecTemplateSpecInitContainersPatch {
            /**
             * Arguments to the entrypoint.
             * The container image's CMD is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args: string[];
            /**
             * Entrypoint array. Not executed within a shell.
             * The container image's ENTRYPOINT is used if this is not provided.
             * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
             * cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
             * to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
             * produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
             * of whether the variable exists or not. Cannot be updated.
             * More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command: string[];
            /**
             * List of environment variables to set in the container.
             * Cannot be updated.
             */
            env: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvPatch[];
            /**
             * List of sources to populate environment variables in the container.
             * The keys defined within a source must be a C_IDENTIFIER. All invalid keys
             * will be reported as an event when the container is starting. When a key exists in multiple
             * sources, the value associated with the last source will take precedence.
             * Values defined by an Env with a duplicate key will take precedence.
             * Cannot be updated.
             */
            envFrom: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromPatch[];
            /**
             * Container image name.
             * More info: https://kubernetes.io/docs/concepts/containers/images
             * This field is optional to allow higher level config management to default or override
             * container images in workload controllers like Deployments and StatefulSets.
             */
            image: string;
            /**
             * Image pull policy.
             * One of Always, Never, IfNotPresent.
             * Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy: string;
            lifecycle: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePatch;
            livenessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbePatch;
            /**
             * Name of the container specified as a DNS_LABEL.
             * Each container in a pod must have a unique name (DNS_LABEL).
             * Cannot be updated.
             */
            name: string;
            /**
             * List of ports to expose from the container. Not specifying a port here
             * DOES NOT prevent that port from being exposed. Any port which is
             * listening on the default "0.0.0.0" address inside a container will be
             * accessible from the network.
             * Modifying this array with strategic merge patch may corrupt the data.
             * For more information See https://github.com/kubernetes/kubernetes/issues/108255.
             * Cannot be updated.
             */
            ports: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersPortsPatch[];
            readinessProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbePatch;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResizePolicyPatch[];
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResourcesPatch;
            /**
             * RestartPolicy defines the restart behavior of individual containers in a pod.
             * This field may only be set for init containers, and the only allowed value is "Always".
             * For non-init containers or when this field is not specified,
             * the restart behavior is defined by the Pod's restart policy and the container type.
             * Setting the RestartPolicy as "Always" for the init container will have the following effect:
             * this init container will be continually restarted on
             * exit until all regular containers have terminated. Once all regular
             * containers have completed, all init containers with restartPolicy "Always"
             * will be shut down. This lifecycle differs from normal init containers and
             * is often referred to as a "sidecar" container. Although this init
             * container still starts in the init container sequence, it does not wait
             * for the container to complete before proceeding to the next init
             * container. Instead, the next init container starts immediately after this
             * init container is started, or after any startupProbe has successfully
             * completed.
             */
            restartPolicy: string;
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextPatch;
            startupProbe: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbePatch;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this
             * is not set, reads from stdin in the container will always result in EOF.
             * Default is false.
             */
            stdin: boolean;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by
             * a single attach. When stdin is true the stdin stream will remain open across multiple attach
             * sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
             * first client attaches to stdin, and then remains open and accepts data until the client disconnects,
             * at which time stdin is closed and remains closed until the container is restarted. If this
             * flag is false, a container processes that reads from stdin will never receive an EOF.
             * Default is false
             */
            stdinOnce: boolean;
            /**
             * Optional: Path at which the file to which the container's termination message
             * will be written is mounted into the container's filesystem.
             * Message written is intended to be brief final status, such as an assertion failure message.
             * Will be truncated by the node if greater than 4096 bytes. The total message length across
             * all containers will be limited to 12kb.
             * Defaults to /dev/termination-log.
             * Cannot be updated.
             */
            terminationMessagePath: string;
            /**
             * Indicate how the termination message should be populated. File will use the contents of
             * terminationMessagePath to populate the container status message on both success and failure.
             * FallbackToLogsOnError will use the last chunk of container log output if the termination
             * message file is empty and the container exited with an error.
             * The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
             * Defaults to File.
             * Cannot be updated.
             */
            terminationMessagePolicy: string;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
             * Default is false.
             */
            tty: boolean;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersVolumeDevicesPatch[];
            /**
             * Pod volumes to mount into the container's filesystem.
             * Cannot be updated.
             */
            volumeMounts: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersVolumeMountsPatch[];
            /**
             * Container's working directory.
             * If not specified, the container runtime's default will be used, which
             * might be configured in the container image.
             * Cannot be updated.
             */
            workingDir: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecInitContainersPorts {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecInitContainersPortsPatch {
            /**
             * Number of port to expose on the pod's IP address.
             * This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP: string;
            /**
             * Number of port to expose on the host.
             * If specified, this must be a valid port number, 0 < x < 65536.
             * If HostNetwork is specified, this must match ContainerPort.
             * Most containers do not need this.
             */
            hostPort: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
             * named port in a pod must have a unique name. Name for the port that can be
             * referred to by services.
             */
            name: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP.
             * Defaults to "TCP".
             */
            protocol: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * Periodic probe of container service readiness.
         * Container will be removed from service endpoints if the probe fails.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecInitContainersResizePolicy {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecInitContainersResizePolicyPatch {
            /**
             * Name of the resource to which this resource resize policy applies.
             * Supported values: cpu, memory.
             */
            resourceName: string;
            /**
             * Restart policy to apply when specified resource is resized.
             * If not specified, it defaults to NotRequired.
             */
            restartPolicy: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PoolerSpecTemplateSpecInitContainersResources {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResourcesClaims[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecInitContainersResourcesClaims {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecInitContainersResourcesClaimsPatch {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of
             * the Pod where this field is used. It makes that resource available
             * inside a container.
             */
            name: string;
        }

        /**
         * Compute Resources required by this container.
         * Cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PoolerSpecTemplateSpecInitContainersResourcesPatch {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims,
             * that are used by this container.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable. It can only be set for containers.
             */
            claims: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResourcesClaimsPatch[];
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContext {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextAppArmorProfile;
            capabilities: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextCapabilities;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default is DefaultProcMount which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextSeccompProfile;
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by this container. If set, this profile
         * overrides the pod's appArmorProfile.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextCapabilities {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * The capabilities to add/drop when running containers.
         * Defaults to the default set of capabilities granted by the container runtime.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextCapabilitiesPatch {
            /**
             * Added capabilities
             */
            add: string[];
            /**
             * Removed capabilities
             */
            drop: string[];
        }

        /**
         * SecurityContext defines the security options the container should be run with.
         * If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         * More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextPatch {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more
             * privileges than its parent process. This bool directly controls if
             * the no_new_privs flag will be set on the container process.
             * AllowPrivilegeEscalation is true always when the container is:
             * 1) run as Privileged
             * 2) has CAP_SYS_ADMIN
             * Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation: boolean;
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextAppArmorProfilePatch;
            capabilities: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextCapabilitiesPatch;
            /**
             * Run container in privileged mode.
             * Processes in privileged containers are essentially equivalent to root on the host.
             * Defaults to false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            privileged: boolean;
            /**
             * procMount denotes the type of proc mount to use for the containers.
             * The default is DefaultProcMount which uses the container runtime defaults for
             * readonly paths and masked paths.
             * This requires the ProcMountType feature flag to be enabled.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            procMount: string;
            /**
             * Whether this container has a read-only root filesystem.
             * Default is false.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem: boolean;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextSeccompProfilePatch;
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to the container.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
         * PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are
         * provided at both the pod & container level, the container options
         * override the pod options.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options from the PodSecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbe {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeGrpc;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeExecPatch {
            /**
             * Command is the command line to execute inside the container, the working directory for the
             * command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
             * not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
             * a shell, you need to explicitly call out to that shell.
             * Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeGrpcPatch {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest
             * (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
             *
             *
             * If this is not specified, the default behavior is defined by gRPC.
             */
            service: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeaders {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
            /**
             * The header field name.
             * This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetPatch {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set
             * "Host" in httpHeaders instead.
             */
            host: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersPatch[];
            /**
             * Path to access on the HTTP server.
             */
            path: string;
            /**
             * Name or number of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host.
             * Defaults to HTTP.
             */
            scheme: string;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized.
         * If specified, no other probes are executed until this completes successfully.
         * If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
         * This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
         * when it might take a long time to load data or warm a cache, than during steady-state operation.
         * This cannot be updated.
         * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbePatch {
            exec: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeExecPatch;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded.
             * Defaults to 3. Minimum value is 1.
             */
            failureThreshold: number;
            grpc: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeGrpcPatch;
            httpGet: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetPatch;
            /**
             * Number of seconds after the container has started before liveness probes are initiated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds: number;
            /**
             * How often (in seconds) to perform the probe.
             * Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed.
             * Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold: number;
            tcpSocket: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeTcpSocketPatch;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
             * value overrides the value provided by the pod spec.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
             * Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds: number;
            /**
             * Number of seconds after which the probe times out.
             * Defaults to 1 second. Minimum value is 1.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds: number;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeTcpSocketPatch {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host: string;
            /**
             * Number or name of the port to access on the container.
             * Number must be in the range 1 to 65535.
             * Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecInitContainersVolumeDevices {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecInitContainersVolumeDevicesPatch {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: string;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecInitContainersVolumeMounts {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecInitContainersVolumeMountsPatch {
            /**
             * Path within the container at which the volume should be mounted.  Must
             * not contain ':'.
             */
            mountPath: string;
            /**
             * mountPropagation determines how mounts are propagated from the host
             * to container and the other way around.
             * When not set, MountPropagationNone is used.
             * This field is beta in 1.10.
             * When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
             * (which defaults to None).
             */
            mountPropagation: string;
            /**
             * This must match the Name of a Volume.
             */
            name: string;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified).
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * RecursiveReadOnly specifies whether read-only mounts should be handled
             * recursively.
             *
             *
             * If ReadOnly is false, this field has no meaning and must be unspecified.
             *
             *
             * If ReadOnly is true, and this field is set to Disabled, the mount is not made
             * recursively read-only.  If this field is set to IfPossible, the mount is made
             * recursively read-only, if it is supported by the container runtime.  If this
             * field is set to Enabled, the mount is made recursively read-only if it is
             * supported by the container runtime, otherwise the pod will not be started and
             * an error will be generated to indicate the reason.
             *
             *
             * If this field is set to IfPossible or Enabled, MountPropagation must be set to
             * None (or be unspecified, which defaults to None).
             *
             *
             * If this field is not specified, it is treated as an equivalent of Disabled.
             */
            recursiveReadOnly: string;
            /**
             * Path within the volume from which the container's volume should be mounted.
             * Defaults to "" (volume's root).
             */
            subPath: string;
            /**
             * Expanded path within the volume from which the container's volume should be mounted.
             * Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
             * Defaults to "" (volume's root).
             * SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface PoolerSpecTemplateSpecOs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * Specifies the OS of the containers in the pod.
         * Some pod and container fields are restricted if this is set.
         *
         *
         * If the OS field is set to linux, the following fields must be unset:
         * -securityContext.windowsOptions
         *
         *
         * If the OS field is set to windows, following fields must be unset:
         * - spec.hostPID
         * - spec.hostIPC
         * - spec.hostUsers
         * - spec.securityContext.appArmorProfile
         * - spec.securityContext.seLinuxOptions
         * - spec.securityContext.seccompProfile
         * - spec.securityContext.fsGroup
         * - spec.securityContext.fsGroupChangePolicy
         * - spec.securityContext.sysctls
         * - spec.shareProcessNamespace
         * - spec.securityContext.runAsUser
         * - spec.securityContext.runAsGroup
         * - spec.securityContext.supplementalGroups
         * - spec.containers[*].securityContext.appArmorProfile
         * - spec.containers[*].securityContext.seLinuxOptions
         * - spec.containers[*].securityContext.seccompProfile
         * - spec.containers[*].securityContext.capabilities
         * - spec.containers[*].securityContext.readOnlyRootFilesystem
         * - spec.containers[*].securityContext.privileged
         * - spec.containers[*].securityContext.allowPrivilegeEscalation
         * - spec.containers[*].securityContext.procMount
         * - spec.containers[*].securityContext.runAsUser
         * - spec.containers[*].securityContext.runAsGroup
         */
        export interface PoolerSpecTemplateSpecOsPatch {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows.
             * Additional value may be defined in future and can be one of:
             * https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
             * Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: string;
        }

        /**
         * Specification of the desired behavior of the pod.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpecTemplateSpecPatch {
            /**
             * Optional duration in seconds the pod may be active on the node relative to
             * StartTime before the system will actively try to mark it failed and kill associated containers.
             * Value must be a positive integer.
             */
            activeDeadlineSeconds: number;
            affinity: outputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPatch;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken: boolean;
            /**
             * List of containers belonging to the pod.
             * Containers cannot currently be added or removed.
             * There must be at least one container in a Pod.
             * Cannot be updated.
             */
            containers: outputs.postgresql.v1.PoolerSpecTemplateSpecContainersPatch[];
            dnsConfig: outputs.postgresql.v1.PoolerSpecTemplateSpecDnsConfigPatch;
            /**
             * Set DNS policy for the pod.
             * Defaults to "ClusterFirst".
             * Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
             * DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
             * To have DNS options set along with hostNetwork, you have to specify DNS policy
             * explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy: string;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's
             * environment variables, matching the syntax of Docker links.
             * Optional: Defaults to true.
             */
            enableServiceLinks: boolean;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing
             * pod to perform user-initiated actions such as debugging. This list cannot be specified when
             * creating a pod, and it cannot be modified by updating the pod spec. In order to add an
             * ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers: outputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersPatch[];
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
             * file if specified.
             */
            hostAliases: outputs.postgresql.v1.PoolerSpecTemplateSpecHostAliasesPatch[];
            /**
             * Use the host's ipc namespace.
             * Optional: Default to false.
             */
            hostIPC: boolean;
            /**
             * Host networking requested for this pod. Use the host's network namespace.
             * If this option is set, the ports that will be used must be specified.
             * Default to false.
             */
            hostNetwork: boolean;
            /**
             * Use the host's pid namespace.
             * Optional: Default to false.
             */
            hostPID: boolean;
            /**
             * Use the host's user namespace.
             * Optional: Default to true.
             * If set to true or not present, the pod will be run in the host user namespace, useful
             * for when the pod needs a feature only available to the host user namespace, such as
             * loading a kernel module with CAP_SYS_MODULE.
             * When set to false, a new userns is created for the pod. Setting false is useful for
             * mitigating container breakout vulnerabilities even allowing users to run their
             * containers as root without actually having root privileges on the host.
             * This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers: boolean;
            /**
             * Specifies the hostname of the Pod
             * If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname: string;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
             * If specified, these secrets will be passed to individual puller implementations for them to use.
             * More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets: outputs.postgresql.v1.PoolerSpecTemplateSpecImagePullSecretsPatch[];
            /**
             * List of initialization containers belonging to the pod.
             * Init containers are executed in order prior to containers being started. If any
             * init container fails, the pod is considered to have failed and is handled according
             * to its restartPolicy. The name for an init container or normal container must be
             * unique among all containers.
             * Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
             * The resourceRequirements of an init container are taken into account during scheduling
             * by finding the highest request/limit for each resource type, and then using the max of
             * of that value or the sum of the normal containers. Limits are applied to init containers
             * in a similar fashion.
             * Init containers cannot currently be added or removed.
             * Cannot be updated.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers: outputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersPatch[];
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
             * the scheduler simply schedules this pod onto that node, assuming that it fits resource
             * requirements.
             */
            nodeName: string;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node.
             * Selector which must match a node's labels for the pod to be scheduled on that node.
             * More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector: {[key: string]: string};
            os: outputs.postgresql.v1.PoolerSpecTemplateSpecOsPatch;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
             * This field will be autopopulated at admission time by the RuntimeClass admission controller. If
             * the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
             * The RuntimeClass admission controller will reject Pod create requests which have the overhead already
             * set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value
             * defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead: {[key: string]: number | string};
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority.
             * One of Never, PreemptLowerPriority.
             * Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy: string;
            /**
             * The priority value. Various system components use this field to find the
             * priority of the pod. When Priority Admission Controller is enabled, it
             * prevents users from setting this field. The admission controller populates
             * this field from PriorityClassName.
             * The higher the value, the higher the priority.
             */
            priority: number;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and
             * "system-cluster-critical" are two special keywords which indicate the
             * highest priorities with the former being the highest priority. Any other
             * name must be defined by creating a PriorityClass object with that name.
             * If not specified, the pod priority will be default or zero if there is no
             * default.
             */
            priorityClassName: string;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness.
             * A pod is ready when all its containers are ready AND
             * all conditions specified in the readiness gates have status equal to "True"
             * More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates: outputs.postgresql.v1.PoolerSpecTemplateSpecReadinessGatesPatch[];
            /**
             * ResourceClaims defines which ResourceClaims must be allocated
             * and reserved before the Pod is allowed to start. The resources
             * will be made available to those containers which consume them
             * by name.
             *
             *
             * This is an alpha field and requires enabling the
             * DynamicResourceAllocation feature gate.
             *
             *
             * This field is immutable.
             */
            resourceClaims: outputs.postgresql.v1.PoolerSpecTemplateSpecResourceClaimsPatch[];
            /**
             * Restart policy for all containers within the pod.
             * One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.
             * Default to Always.
             * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy: string;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
             * to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
             * If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
             * empty definition that uses the default runtime handler.
             * More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName: string;
            /**
             * If specified, the pod will be dispatched by specified scheduler.
             * If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName: string;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod.
             * If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the
             * scheduler will not attempt to schedule the pod.
             *
             *
             * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
             */
            schedulingGates: outputs.postgresql.v1.PoolerSpecTemplateSpecSchedulingGatesPatch[];
            securityContext: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextPatch;
            /**
             * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.
             * Deprecated: Use serviceAccountName instead.
             */
            serviceAccount: string;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod.
             * More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName: string;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).
             * In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).
             * In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN.
             * If a pod does not have FQDN, this has no effect.
             * Default to false.
             */
            setHostnameAsFQDN: boolean;
            /**
             * Share a single process namespace between all of the containers in a pod.
             * When this is set containers will be able to view and signal processes from other containers
             * in the same pod, and the first process in each container will not be assigned PID 1.
             * HostPID and ShareProcessNamespace cannot both be set.
             * Optional: Default to false.
             */
            shareProcessNamespace: boolean;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
             * If not specified, the pod will not have a domainname at all.
             */
            subdomain: string;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
             * Value must be non-negative integer. The value zero indicates stop immediately via
             * the kill signal (no opportunity to shut down).
             * If this value is nil, the default grace period will be used instead.
             * The grace period is the duration in seconds after the processes running in the pod are sent
             * a termination signal and the time when the processes are forcibly halted with a kill signal.
             * Set this value longer than the expected cleanup time for your process.
             * Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds: number;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations: outputs.postgresql.v1.PoolerSpecTemplateSpecTolerationsPatch[];
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology
             * domains. Scheduler will schedule pods in a way which abides by the constraints.
             * All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints: outputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsPatch[];
            /**
             * List of volumes that can be mounted by containers belonging to the pod.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPatch[];
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface PoolerSpecTemplateSpecReadinessGates {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface PoolerSpecTemplateSpecReadinessGatesPatch {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: string;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource.
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface PoolerSpecTemplateSpecResourceClaims {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.postgresql.v1.PoolerSpecTemplateSpecResourceClaimsSource;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource.
         * It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
         * Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface PoolerSpecTemplateSpecResourceClaimsPatch {
            /**
             * Name uniquely identifies this resource claim inside the pod.
             * This must be a DNS_LABEL.
             */
            name: string;
            source: outputs.postgresql.v1.PoolerSpecTemplateSpecResourceClaimsSourcePatch;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface PoolerSpecTemplateSpecResourceClaimsSource {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface PoolerSpecTemplateSpecResourceClaimsSourcePatch {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same
             * namespace as this pod.
             */
            resourceClaimName: string;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate
             * object in the same namespace as this pod.
             *
             *
             * The template will be used to create a new ResourceClaim, which will
             * be bound to this pod. When this pod is deleted, the ResourceClaim
             * will also be deleted. The pod name and resource name, along with a
             * generated component, will be used to form a unique name for the
             * ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.
             *
             *
             * This field is immutable and no changes will be made to the
             * corresponding ResourceClaim by the control plane after creating the
             * ResourceClaim.
             */
            resourceClaimTemplateName: string;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface PoolerSpecTemplateSpecSchedulingGates {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface PoolerSpecTemplateSpecSchedulingGatesPatch {
            /**
             * Name of the scheduling gate.
             * Each scheduling gate must have a unique name field.
             */
            name: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface PoolerSpecTemplateSpecSecurityContext {
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextAppArmorProfile;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSeLinuxOptions;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSeccompProfile;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSysctls[];
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextWindowsOptions;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextAppArmorProfile {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * appArmorProfile is the AppArmor options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextAppArmorProfilePatch {
            /**
             * localhostProfile indicates a profile loaded on the node that should be used.
             * The profile must be preconfigured on the node to work.
             * Must match the loaded name of the profile.
             * Must be set if and only if type is "Localhost".
             */
            localhostProfile: string;
            /**
             * type indicates which kind of AppArmor profile will be applied.
             * Valid options are:
             *   Localhost - a profile pre-loaded on the node.
             *   RuntimeDefault - the container runtime's default profile.
             *   Unconfined - no AppArmor enforcement.
             */
            type: string;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings.
         * Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface PoolerSpecTemplateSpecSecurityContextPatch {
            appArmorProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextAppArmorProfilePatch;
            /**
             * A special supplemental group that applies to all containers in a pod.
             * Some volume types allow the Kubelet to change the ownership of that volume
             * to be owned by the pod:
             *
             *
             * 1. The owning GID will be the FSGroup
             * 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
             * 3. The permission bits are OR'd with rw-rw----
             *
             *
             * If unset, the Kubelet will not modify the ownership and permissions of any volume.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup: number;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
             * before being exposed inside Pod. This field will only apply to
             * volume types which support fsGroup based ownership(and permissions).
             * It will have no effect on ephemeral volume types such as: secret, configmaps
             * and emptydir.
             * Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy: string;
            /**
             * The GID to run the entrypoint of the container process.
             * Uses runtime default if unset.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup: number;
            /**
             * Indicates that the container must run as a non-root user.
             * If true, the Kubelet will validate the image at runtime to ensure that it
             * does not run as UID 0 (root) and fail to start the container if it does.
             * If unset or false, no such validation will be performed.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot: boolean;
            /**
             * The UID to run the entrypoint of the container process.
             * Defaults to user specified in image metadata if unspecified.
             * May also be set in SecurityContext.  If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence
             * for that container.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser: number;
            seLinuxOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSeLinuxOptionsPatch;
            seccompProfile: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSeccompProfilePatch;
            /**
             * A list of groups applied to the first process run in each container, in addition
             * to the container's primary GID, the fsGroup (if specified), and group memberships
             * defined in the container image for the uid of the container process. If unspecified,
             * no additional groups are added to any container. Note that group memberships
             * defined in the container image for the uid of the container process are still effective,
             * even if they are not included in this list.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups: number[];
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
             * sysctls (by the container runtime) might fail to launch.
             * Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSysctlsPatch[];
            windowsOptions: outputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextWindowsOptionsPatch;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextSeLinuxOptions {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The SELinux context to be applied to all containers.
         * If unspecified, the container runtime will allocate a random SELinux context for each
         * container.  May also be set in SecurityContext.  If set in
         * both SecurityContext and PodSecurityContext, the value specified in SecurityContext
         * takes precedence for that container.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextSeLinuxOptionsPatch {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level: string;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role: string;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type: string;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextSeccompProfile {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * The seccomp options to use by the containers in this pod.
         * Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextSeccompProfilePatch {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used.
             * The profile must be preconfigured on the node to work.
             * Must be a descending path, relative to the kubelet's configured seccomp profile location.
             * Must be set if type is "Localhost". Must NOT be set for any other type.
             */
            localhostProfile: string;
            /**
             * type indicates which kind of seccomp profile will be applied.
             * Valid options are:
             *
             *
             * Localhost - a profile defined in a file on the node should be used.
             * RuntimeDefault - the container runtime default profile should be used.
             * Unconfined - no profile should be applied.
             */
            type: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface PoolerSpecTemplateSpecSecurityContextSysctls {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface PoolerSpecTemplateSpecSecurityContextSysctlsPatch {
            /**
             * Name of a property to set
             */
            name: string;
            /**
             * Value of a property to set
             */
            value: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecSecurityContextWindowsOptions {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The Windows specific settings applied to all containers.
         * If unspecified, the options within a container's SecurityContext will be used.
         * If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
         * Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecSecurityContextWindowsOptionsPatch {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook
             * (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
             * GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec: string;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName: string;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container.
             * All of a Pod's containers must have the same effective HostProcess value
             * (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
             * In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess: boolean;
            /**
             * The UserName in Windows to run the entrypoint of the container process.
             * Defaults to the user specified in image metadata if unspecified.
             * May also be set in PodSecurityContext. If set in both SecurityContext and
             * PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PoolerSpecTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches
         * the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PoolerSpecTemplateSpecTolerationsPatch {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects.
             * When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys.
             * If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key: string;
            /**
             * Operator represents a key's relationship to the value.
             * Valid operators are Exists and Equal. Defaults to Equal.
             * Exists is equivalent to wildcard for value, so that a pod can
             * tolerate all taints of a particular category.
             */
            operator: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be
             * of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
             * it is not set, which means tolerate the taint forever (do not evict). Zero and
             * negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds: number;
            /**
             * Value is the taint value the toleration matches to.
             * If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value: string;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraints {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * LabelSelector is used to find matching pods.
         * Pods that match this label selector are counted to determine the number of pods
         * in their corresponding topology domain.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsPatch {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorPatch;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which
             * spreading will be calculated. The keys are used to lookup values from the
             * incoming pod labels, those key-value labels are ANDed with labelSelector
             * to select the group of existing pods over which spreading will be calculated
             * for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
             * MatchLabelKeys cannot be set when LabelSelector isn't set.
             * Keys that don't exist in the incoming pod labels will
             * be ignored. A null or empty list means only match against labelSelector.
             *
             *
             * This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys: string[];
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed.
             * When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
             * between the number of matching pods in the target topology and the global minimum.
             * The global minimum is the minimum number of matching pods in an eligible domain
             * or zero if the number of eligible domains is less than MinDomains.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 2/2/1:
             * In this case, the global minimum is 1.
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |   P   |
             * - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
             * scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
             * violate MaxSkew(1).
             * - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
             * When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
             * to topologies that satisfy it.
             * It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: number;
            /**
             * MinDomains indicates a minimum number of eligible domains.
             * When the number of eligible domains with matching topology keys is less than minDomains,
             * Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
             * And when the number of eligible domains with matching topology keys equals or greater than minDomains,
             * this value has no effect on scheduling.
             * As a result, when the number of eligible domains is less than minDomains,
             * scheduler won't schedule more than maxSkew Pods to those domains.
             * If value is nil, the constraint behaves as if MinDomains is equal to 1.
             * Valid values are integers greater than 0.
             * When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
             *
             *
             * For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
             * labelSelector spread as 2/2/2:
             * | zone1 | zone2 | zone3 |
             * |  P P  |  P P  |  P P  |
             * The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
             * In this situation, new pod with the same labelSelector cannot be scheduled,
             * because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
             * it will violate MaxSkew.
             */
            minDomains: number;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
             * when calculating pod topology spread skew. Options are:
             * - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
             * - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
             *
             *
             * If this value is nil, the behavior is equivalent to the Honor policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy: string;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating
             * pod topology spread skew. Options are:
             * - Honor: nodes without taints, along with tainted nodes for which the incoming pod
             * has a toleration, are included.
             * - Ignore: node taints are ignored. All nodes are included.
             *
             *
             * If this value is nil, the behavior is equivalent to the Ignore policy.
             * This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy: string;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key
             * and identical values are considered to be in the same topology.
             * We consider each <key, value> as a "bucket", and try to put balanced number
             * of pods into each bucket.
             * We define a domain as a particular instance of a topology.
             * Also, we define an eligible domain as a domain whose nodes meet the requirements of
             * nodeAffinityPolicy and nodeTaintsPolicy.
             * e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
             * And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
             * It's a required field.
             */
            topologyKey: string;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
             * the spread constraint.
             * - DoNotSchedule (default) tells the scheduler not to schedule it.
             * - ScheduleAnyway tells the scheduler to schedule the pod in any location,
             *   but giving higher precedence to topologies that would help reduce the
             *   skew.
             * A constraint is considered "Unsatisfiable" for an incoming pod
             * if and only if every possible node assignment for that pod would violate
             * "MaxSkew" on some topology.
             * For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
             * labelSelector spread as 3/1/1:
             * | zone1 | zone2 | zone3 |
             * | P P P |   P   |   P   |
             * If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
             * to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
             * MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
             * won't make it *more* imbalanced.
             * It's a required field.
             */
            whenUnsatisfiable: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface PoolerSpecTemplateSpecVolumes {
            awsElasticBlockStore: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAwsElasticBlockStore;
            azureDisk: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAzureDisk;
            azureFile: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAzureFile;
            cephfs: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCephfs;
            cinder: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCinder;
            configMap: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesConfigMap;
            csi: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCsi;
            downwardAPI: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPI;
            emptyDir: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEmptyDir;
            ephemeral: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeral;
            fc: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFc;
            flexVolume: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlexVolume;
            flocker: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlocker;
            gcePersistentDisk: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGcePersistentDisk;
            gitRepo: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGitRepo;
            glusterfs: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGlusterfs;
            hostPath: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesHostPath;
            iscsi: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesIscsi;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesNfs;
            persistentVolumeClaim: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPersistentVolumeClaim;
            photonPersistentDisk: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPhotonPersistentDisk;
            portworxVolume: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPortworxVolume;
            projected: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjected;
            quobyte: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesQuobyte;
            rbd: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesRbd;
            scaleIO: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesScaleIO;
            secret: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesSecret;
            storageos: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesStorageos;
            vsphereVolume: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesVsphereVolume;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface PoolerSpecTemplateSpecVolumesAwsElasticBlockStore {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface PoolerSpecTemplateSpecVolumesAwsElasticBlockStorePatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition: number;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly: boolean;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: string;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesAzureDisk {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesAzureDiskPatch {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode: string;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: string;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: string;
            /**
             * fsType is Filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesAzureFile {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesAzureFilePatch {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: string;
            /**
             * shareName is the azure share Name
             */
            shareName: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface PoolerSpecTemplateSpecVolumesCephfs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCephfsSecretRef;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface PoolerSpecTemplateSpecVolumesCephfsPatch {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path: string;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly: boolean;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile: string;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCephfsSecretRefPatch;
            /**
             * user is optional: User is the rados user name, default is admin
             * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface PoolerSpecTemplateSpecVolumesCephfsSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
         * More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface PoolerSpecTemplateSpecVolumesCephfsSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesCinder {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCinderSecretRef;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine.
         * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesCinderPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCinderSecretRefPatch;
            /**
             * volumeID used to identify the volume in cinder.
             * More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface PoolerSpecTemplateSpecVolumesCinderSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect
         * to OpenStack.
         */
        export interface PoolerSpecTemplateSpecVolumesCinderSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface PoolerSpecTemplateSpecVolumesConfigMap {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface PoolerSpecTemplateSpecVolumesConfigMapPatch {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface PoolerSpecTemplateSpecVolumesCsi {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCsiNodePublishSecretRef;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface PoolerSpecTemplateSpecVolumesCsiNodePublishSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing
         * sensitive information to pass to the CSI driver to complete the CSI
         * NodePublishVolume and NodeUnpublishVolume calls.
         * This field is optional, and  may be empty if no secret is required. If the
         * secret object contains more than one secret, all secret references are passed.
         */
        export interface PoolerSpecTemplateSpecVolumesCsiNodePublishSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface PoolerSpecTemplateSpecVolumesCsiPatch {
            /**
             * driver is the name of the CSI driver that handles this volume.
             * Consult with your admin for the correct name as registered in the cluster.
             */
            driver: string;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs".
             * If not provided, the empty value is passed to the associated CSI driver
             * which will determine the default filesystem to apply.
             */
            fsType: string;
            nodePublishSecretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCsiNodePublishSecretRefPatch;
            /**
             * readOnly specifies a read-only configuration for the volume.
             * Defaults to false (read/write).
             */
            readOnly: boolean;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI
             * driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes: {[key: string]: string};
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPI {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItems {
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsPatch {
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIPatch {
            /**
             * Optional: mode bits to use on created files by default. Must be a
             * Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * Items is a list of downward API volume file
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsPatch[];
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface PoolerSpecTemplateSpecVolumesEmptyDir {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface PoolerSpecTemplateSpecVolumesEmptyDirPatch {
            /**
             * medium represents what type of storage medium should back this directory.
             * The default is "" which means to use the node's default medium.
             * Must be an empty string (default) or Memory.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium: string;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume.
             * The size limit is also applicable for memory medium.
             * The maximum usage on memory medium EmptyDir would be the minimum value between
             * the SizeLimit specified here and the sum of memory limits of all containers in a pod.
             * The default is nil which means that the limit is undefined.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit: number | string;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeral {
            volumeClaimTemplate: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver.
         * The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
         * and deleted when the pod is removed.
         *
         *
         * Use this if:
         * a) the volume is only needed while the pod runs,
         * b) features of normal volumes like restoring from snapshot or capacity
         *    tracking are needed,
         * c) the storage driver is specified through a storage class, and
         * d) the storage driver supports dynamic volume provisioning through
         *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
         *    information on the connection between this volume type
         *    and PersistentVolumeClaim).
         *
         *
         * Use PersistentVolumeClaim or one of the vendor-specific
         * APIs for volumes that persist for longer than the lifecycle
         * of an individual pod.
         *
         *
         * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
         * be used that way - see the documentation of the driver for
         * more information.
         *
         *
         * A pod can use both types of ephemeral volumes and
         * persistent volumes at the same time.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralPatch {
            volumeClaimTemplate: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         *
         * Required, must not be nil.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplate {
            /**
             * May contain labels and annotations that will be copied into the PVC
             * when creating it. No other fields are allowed and will be rejected during
             * validation.
             */
            metadata: {[key: string]: string};
            spec: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume.
         * The pod in which this EphemeralVolumeSource is embedded will be the
         * owner of the PVC, i.e. the PVC will be deleted together with the
         * pod.  The name of the PVC will be `<pod name>-<volume name>` where
         * `<volume name>` is the name from the `PodSpec.Volumes` array
         * entry. Pod validation will reject the pod if the concatenated name
         * is not valid for a PVC (for example, too long).
         *
         *
         * An existing PVC with that name that is not owned by the pod
         * will *not* be used for the pod to avoid using an unrelated
         * volume by mistake. Starting the pod is then blocked until
         * the unrelated PVC is removed. If such a pre-created PVC is
         * meant to be used by the pod, the PVC has to updated with an
         * owner reference to the pod once the pod exists. Normally
         * this should not be necessary, but it may be useful when
         * manually reconstructing a broken cluster.
         *
         *
         * This field is read-only and no changes will be made by Kubernetes
         * to the PVC after it has been created.
         *
         *
         * Required, must not be nil.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplatePatch {
            /**
             * May contain labels and annotations that will be copied into the PVC
             * when creating it. No other fields are allowed and will be rejected during
             * validation.
             */
            metadata: {[key: string]: string};
            spec: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpec {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource;
            dataSourceRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef;
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources;
            selector: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSource field can be used to specify either:
         * * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
         * * An existing PVC (PersistentVolumeClaim)
         * If the provisioner or an external controller can support the specified data source,
         * it will create a new volume based on the contents of the specified data source.
         * When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
         * and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
         * If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
         * volume is desired. This may be any object from a non-empty API group (non
         * core object) or a PersistentVolumeClaim object.
         * When this field is specified, volume binding will only succeed if the type of
         * the specified object matches some installed volume populator or dynamic
         * provisioner.
         * This field will replace the functionality of the dataSource field and as such
         * if both fields are non-empty, they must have the same value. For backwards
         * compatibility, when namespace isn't specified in dataSourceRef,
         * both fields (dataSource and dataSourceRef) will be set to the same
         * value automatically if one of them is empty and the other is non-empty.
         * When namespace is specified in dataSourceRef,
         * dataSource isn't set to the same value and must be empty.
         * There are three important differences between dataSource and dataSourceRef:
         * * While dataSource only allows two specific types of objects, dataSourceRef
         *   allows any non-core object, as well as PersistentVolumeClaim objects.
         * * While dataSource ignores disallowed values (dropping them), dataSourceRef
         *   preserves all values, and generates an error if a disallowed value is
         *   specified.
         * * While dataSource only allows local objects, dataSourceRef allows objects
         *   in any namespaces.
         * (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         * (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            /**
             * APIGroup is the group for the resource being referenced.
             * If APIGroup is not specified, the specified Kind must be in the core API group.
             * For any other third-party types, APIGroup is required.
             */
            apiGroup: string;
            /**
             * Kind is the type of resource being referenced
             */
            kind: string;
            /**
             * Name is the name of resource being referenced
             */
            name: string;
            /**
             * Namespace is the namespace of resource being referenced
             * Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
             * (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace: string;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is
         * copied unchanged into the PVC that gets created from this
         * template. The same fields as in a PersistentVolumeClaim
         * are also valid here.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            /**
             * accessModes contains the desired access modes the volume should have.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes: string[];
            dataSource: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch;
            dataSourceRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch;
            resources: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch;
            selector: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch;
            /**
             * storageClassName is the name of the StorageClass required by the claim.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName: string;
            /**
             * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
             * If specified, the CSI driver will create or update the volume with the attributes defined
             * in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
             * it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
             * will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
             * If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
             * will be set by the persistentvolume controller if it exists.
             * If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
             * set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
             * exists.
             * More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
             * (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
             */
            volumeAttributesClassName: string;
            /**
             * volumeMode defines what type of volume is required by the claim.
             * Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode: string;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName: string;
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * resources represents the minimum resources the volume should have.
         * If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
         * that are lower than previous value but must still be higher than capacity recorded in the
         * status field of the claim.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            /**
             * Limits describes the maximum amount of compute resources allowed.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits: {[key: string]: number | string};
            /**
             * Requests describes the minimum amount of compute resources required.
             * If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
             * otherwise to an implementation-defined value. Requests cannot exceed Limits.
             * More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests: {[key: string]: number | string};
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesFc {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesFcPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * lun is Optional: FC target lun number
             */
            lun: number;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs: string[];
            /**
             * wwids Optional: FC volume world wide identifiers (wwids)
             * Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids: string[];
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         */
        export interface PoolerSpecTemplateSpecVolumesFlexVolume {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlexVolumeSecretRef;
        }

        /**
         * flexVolume represents a generic volume resource that is
         * provisioned/attached using an exec based plugin.
         */
        export interface PoolerSpecTemplateSpecVolumesFlexVolumePatch {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: string;
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType: string;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options: {[key: string]: string};
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlexVolumeSecretRefPatch;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface PoolerSpecTemplateSpecVolumesFlexVolumeSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing
         * sensitive information to pass to the plugin scripts. This may be
         * empty if no secret object is specified. If the secret object
         * contains more than one secret, all secrets are passed to the plugin
         * scripts.
         */
        export interface PoolerSpecTemplateSpecVolumesFlexVolumeSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface PoolerSpecTemplateSpecVolumesFlocker {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface PoolerSpecTemplateSpecVolumesFlockerPatch {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
             * should be considered as deprecated
             */
            datasetName: string;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID: string;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface PoolerSpecTemplateSpecVolumesGcePersistentDisk {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface PoolerSpecTemplateSpecVolumesGcePersistentDiskPatch {
            /**
             * fsType is filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * partition is the partition in the volume that you want to mount.
             * If omitted, the default is to mount by volume name.
             * Examples: For volume /dev/sda1, you specify the partition as "1".
             * Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition: number;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly: boolean;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface PoolerSpecTemplateSpecVolumesGitRepo {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * gitRepo represents a git repository at a particular revision.
         * DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
         * EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
         * into the Pod's container.
         */
        export interface PoolerSpecTemplateSpecVolumesGitRepoPatch {
            /**
             * directory is the target directory name.
             * Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
             * git repository.  Otherwise, if specified, the volume will contain the git repository in
             * the subdirectory with the given name.
             */
            directory: string;
            /**
             * repository is the URL
             */
            repository: string;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision: string;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesGlusterfs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
         * More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesGlusterfsPatch {
            /**
             * endpoints is the endpoint name that details Glusterfs topology.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: string;
            /**
             * path is the Glusterfs volume path.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: string;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly: boolean;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         * ---
         * TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
         * mount host directories as read/write.
         */
        export interface PoolerSpecTemplateSpecVolumesHostPath {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host
         * machine that is directly exposed to the container. This is generally
         * used for system agents or other privileged things that are allowed
         * to see the host machine. Most containers will NOT need this.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
         * ---
         * TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
         * mount host directories as read/write.
         */
        export interface PoolerSpecTemplateSpecVolumesHostPathPatch {
            /**
             * path of the directory on the host.
             * If the path is a symlink, it will follow the link to the real path.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: string;
            /**
             * type for HostPath Volume
             * Defaults to ""
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesIscsi {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesIscsiSecretRef;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a
         * kubelet's host machine and then exposed to the pod.
         * More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesIscsiPatch {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery: boolean;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession: boolean;
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * initiatorName is the custom iSCSI Initiator Name.
             * If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
             * <target portal>:<volume name> will be created for the connection.
             */
            initiatorName: string;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: string;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport.
             * Defaults to 'default' (tcp).
             */
            iscsiInterface: string;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: number;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            portals: string[];
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesIscsiSecretRefPatch;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
             * is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface PoolerSpecTemplateSpecVolumesIscsiSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface PoolerSpecTemplateSpecVolumesIscsiSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface PoolerSpecTemplateSpecVolumesNfs {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface PoolerSpecTemplateSpecVolumesNfsPatch {
            /**
             * path that is exported by the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: string;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions.
             * Defaults to false.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly: boolean;
            /**
             * server is the hostname or IP address of the NFS server.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: string;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesPatch {
            awsElasticBlockStore: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAwsElasticBlockStorePatch;
            azureDisk: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAzureDiskPatch;
            azureFile: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAzureFilePatch;
            cephfs: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCephfsPatch;
            cinder: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCinderPatch;
            configMap: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesConfigMapPatch;
            csi: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCsiPatch;
            downwardAPI: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIPatch;
            emptyDir: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEmptyDirPatch;
            ephemeral: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralPatch;
            fc: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFcPatch;
            flexVolume: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlexVolumePatch;
            flocker: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlockerPatch;
            gcePersistentDisk: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGcePersistentDiskPatch;
            gitRepo: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGitRepoPatch;
            glusterfs: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGlusterfsPatch;
            hostPath: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesHostPathPatch;
            iscsi: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesIscsiPatch;
            /**
             * name of the volume.
             * Must be a DNS_LABEL and unique within the pod.
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
            nfs: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesNfsPatch;
            persistentVolumeClaim: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPersistentVolumeClaimPatch;
            photonPersistentDisk: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPhotonPersistentDiskPatch;
            portworxVolume: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPortworxVolumePatch;
            projected: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedPatch;
            quobyte: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesQuobytePatch;
            rbd: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesRbdPatch;
            scaleIO: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesScaleIOPatch;
            secret: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesSecretPatch;
            storageos: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesStorageosPatch;
            vsphereVolume: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesVsphereVolumePatch;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface PoolerSpecTemplateSpecVolumesPersistentVolumeClaim {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a
         * PersistentVolumeClaim in the same namespace.
         * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface PoolerSpecTemplateSpecVolumesPersistentVolumeClaimPatch {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: string;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts.
             * Default false.
             */
            readOnly: boolean;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesPhotonPersistentDisk {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesPhotonPersistentDiskPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesPortworxVolume {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesPortworxVolumePatch {
            /**
             * fSType represents the filesystem type to mount
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: string;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface PoolerSpecTemplateSpecVolumesProjected {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSources[];
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedPatch {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * sources is the list of volume projections
             */
            sources: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSources {
            clusterTrustBundle: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle;
            configMap: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMap;
            downwardAPI: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPI;
            secret: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesSecret;
            serviceAccountToken: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken;
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundle {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values: string[];
        }

        /**
         * Select all ClusterTrustBundles that match this label selector.  Only has
         * effect if signerName is set.  Mutually-exclusive with name.  If unset,
         * interpreted as "match nothing".  If set but empty, interpreted as "match
         * everything".
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels: {[key: string]: string};
        }

        /**
         * ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
         * of ClusterTrustBundle objects in an auto-updating file.
         *
         *
         * Alpha, gated by the ClusterTrustBundleProjection feature gate.
         *
         *
         * ClusterTrustBundle objects can either be selected by name, or by the
         * combination of signer name and a label selector.
         *
         *
         * Kubelet performs aggressive normalization of the PEM contents written
         * into the pod filesystem.  Esoteric PEM features such as inter-block
         * comments and block headers are stripped.  Certificates are deduplicated.
         * The ordering of certificates within the file is arbitrary, and Kubelet
         * may change the order over time.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch {
            labelSelector: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch;
            /**
             * Select a single ClusterTrustBundle by object name.  Mutually-exclusive
             * with signerName and labelSelector.
             */
            name: string;
            /**
             * If true, don't block pod startup if the referenced ClusterTrustBundle(s)
             * aren't available.  If using name, then the named ClusterTrustBundle is
             * allowed not to exist.  If using signerName, then the combination of
             * signerName and labelSelector is allowed to match zero
             * ClusterTrustBundles.
             */
            optional: boolean;
            /**
             * Relative path from the volume root to write the bundle.
             */
            path: string;
            /**
             * Select all ClusterTrustBundles that match this signer name.
             * Mutually-exclusive with name.  The contents of all selected
             * ClusterTrustBundles will be unified and deduplicated.
             */
            signerName: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMap {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * ConfigMap will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the ConfigMap,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional: boolean;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPI {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems[];
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value
             * between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: string;
            resourceFieldRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests
         * (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor: number | string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIPatch {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsPatch[];
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesPatch {
            clusterTrustBundle: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesClusterTrustBundlePatch;
            configMap: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapPatch;
            downwardAPI: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIPatch;
            secret: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesSecretPatch;
            serviceAccountToken: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch;
        }

        /**
         * secret information about the secret data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesSecret {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesSecretItems[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret information about the secret data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesSecretPatch {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesSecretItemsPatch[];
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional: boolean;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesServiceAccountToken {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            /**
             * audience is the intended audience of the token. A recipient of a token
             * must identify itself with an identifier specified in the audience of the
             * token, and otherwise should reject the token. The audience defaults to the
             * identifier of the apiserver.
             */
            audience: string;
            /**
             * expirationSeconds is the requested duration of validity of the service
             * account token. As the token approaches expiration, the kubelet volume
             * plugin will proactively rotate the service account token. The kubelet will
             * start trying to rotate the token if the token is older than 80 percent of
             * its time to live or if the token is older than 24 hours.Defaults to 1 hour
             * and must be at least 10 minutes.
             */
            expirationSeconds: number;
            /**
             * path is the path relative to the mount point of the file to project the
             * token into.
             */
            path: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface PoolerSpecTemplateSpecVolumesQuobyte {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface PoolerSpecTemplateSpecVolumesQuobytePatch {
            /**
             * group to map volume access to
             * Default is no group
             */
            group: string;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions.
             * Defaults to false.
             */
            readOnly: boolean;
            /**
             * registry represents a single or multiple Quobyte Registry services
             * specified as a string as host:port pair (multiple entries are separated with commas)
             * which acts as the central registry for volumes
             */
            registry: string;
            /**
             * tenant owning the given Quobyte volume in the Backend
             * Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant: string;
            /**
             * user to map volume access to
             * Defaults to serivceaccount user
             */
            user: string;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesRbd {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesRbdSecretRef;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
         * More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesRbdPatch {
            /**
             * fsType is the filesystem type of the volume that you want to mount.
             * Tip: Ensure that the filesystem type is supported by the host operating system.
             * Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
             * TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType: string;
            /**
             * image is the rados image name.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: string;
            /**
             * keyring is the path to key ring for RBDUser.
             * Default is /etc/ceph/keyring.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring: string;
            /**
             * monitors is a collection of Ceph monitors.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: string[];
            /**
             * pool is the rados pool name.
             * Default is rbd.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool: string;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts.
             * Defaults to false.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesRbdSecretRefPatch;
            /**
             * user is the rados user name.
             * Default is admin.
             * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface PoolerSpecTemplateSpecVolumesRbdSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided
         * overrides keyring.
         * Default is nil.
         * More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface PoolerSpecTemplateSpecVolumesRbdSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface PoolerSpecTemplateSpecVolumesScaleIO {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesScaleIOSecretRef;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface PoolerSpecTemplateSpecVolumesScaleIOPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs".
             * Default is "xfs".
             */
            fsType: string;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: string;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain: string;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesScaleIOSecretRefPatch;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled: boolean;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
             * Default is ThinProvisioned.
             */
            storageMode: string;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool: string;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: string;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system
             * that is associated with this volume source.
             */
            volumeName: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface PoolerSpecTemplateSpecVolumesScaleIOSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other
         * sensitive information. If this is not provided, Login operation will fail.
         */
        export interface PoolerSpecTemplateSpecVolumesScaleIOSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface PoolerSpecTemplateSpecVolumesSecret {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesSecretItems[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesSecretItems {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesSecretItemsPatch {
            /**
             * key is the key to project.
             */
            key: string;
            /**
             * mode is Optional: mode bits used to set permissions on this file.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
             * If not specified, the volume defaultMode will be used.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            mode: number;
            /**
             * path is the relative path of the file to map the key to.
             * May not be an absolute path.
             * May not contain the path element '..'.
             * May not start with the string '..'.
             */
            path: string;
        }

        /**
         * secret represents a secret that should populate this volume.
         * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface PoolerSpecTemplateSpecVolumesSecretPatch {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default.
             * Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
             * YAML accepts both octal and decimal values, JSON requires decimal values
             * for mode bits. Defaults to 0644.
             * Directories within the path are not affected by this setting.
             * This might be in conflict with other options that affect the file
             * mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode: number;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced
             * Secret will be projected into the volume as a file whose name is the
             * key and content is the value. If specified, the listed keys will be
             * projected into the specified paths, and unlisted keys will not be
             * present. If a key is specified which is not present in the Secret,
             * the volume setup will error unless it is marked optional. Paths must be
             * relative and may not contain the '..' path or start with '..'.
             */
            items: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesSecretItemsPatch[];
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional: boolean;
            /**
             * secretName is the name of the secret in the pod's namespace to use.
             * More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface PoolerSpecTemplateSpecVolumesStorageos {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesStorageosSecretRef;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface PoolerSpecTemplateSpecVolumesStorageosPatch {
            /**
             * fsType is the filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force
             * the ReadOnly setting in VolumeMounts.
             */
            readOnly: boolean;
            secretRef: outputs.postgresql.v1.PoolerSpecTemplateSpecVolumesStorageosSecretRefPatch;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume
             * names are only unique within a namespace.
             */
            volumeName: string;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no
             * namespace is specified then the Pod's namespace will be used.  This allows the
             * Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
             * Set VolumeName to any name to override the default behaviour.
             * Set to "default" if you are not using namespaces within StorageOS.
             * Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface PoolerSpecTemplateSpecVolumesStorageosSecretRef {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API
         * credentials.  If not specified, default values will be attempted.
         */
        export interface PoolerSpecTemplateSpecVolumesStorageosSecretRefPatch {
            /**
             * Name of the referent.
             * This field is effectively required, but due to backwards compatibility is
             * allowed to be empty. Instances of this type with an empty value here are
             * almost certainly wrong.
             * TODO: Add other useful fields. apiVersion, kind, uid?
             * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             * TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
             */
            name: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesVsphereVolume {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesVsphereVolumePatch {
            /**
             * fsType is filesystem type to mount.
             * Must be a filesystem type supported by the host operating system.
             * Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType: string;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID: string;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName: string;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: string;
        }

        /**
         * Most recently observed status of the Pooler. This data may not be up to
         * date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerStatus {
            /**
             * The number of pods trying to be scheduled
             */
            instances: number;
            secrets: outputs.postgresql.v1.PoolerStatusSecrets;
        }

        /**
         * Most recently observed status of the Pooler. This data may not be up to
         * date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerStatusPatch {
            /**
             * The number of pods trying to be scheduled
             */
            instances: number;
            secrets: outputs.postgresql.v1.PoolerStatusSecretsPatch;
        }

        /**
         * The resource version of the config object
         */
        export interface PoolerStatusSecrets {
            clientCA: outputs.postgresql.v1.PoolerStatusSecretsClientCA;
            pgBouncerSecrets: outputs.postgresql.v1.PoolerStatusSecretsPgBouncerSecrets;
            serverCA: outputs.postgresql.v1.PoolerStatusSecretsServerCA;
            serverTLS: outputs.postgresql.v1.PoolerStatusSecretsServerTLS;
        }

        /**
         * The client CA secret version
         */
        export interface PoolerStatusSecretsClientCA {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The client CA secret version
         */
        export interface PoolerStatusSecretsClientCAPatch {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The resource version of the config object
         */
        export interface PoolerStatusSecretsPatch {
            clientCA: outputs.postgresql.v1.PoolerStatusSecretsClientCAPatch;
            pgBouncerSecrets: outputs.postgresql.v1.PoolerStatusSecretsPgBouncerSecretsPatch;
            serverCA: outputs.postgresql.v1.PoolerStatusSecretsServerCAPatch;
            serverTLS: outputs.postgresql.v1.PoolerStatusSecretsServerTLSPatch;
        }

        /**
         * The version of the secrets used by PgBouncer
         */
        export interface PoolerStatusSecretsPgBouncerSecrets {
            authQuery: outputs.postgresql.v1.PoolerStatusSecretsPgBouncerSecretsAuthQuery;
        }

        /**
         * The auth query secret version
         */
        export interface PoolerStatusSecretsPgBouncerSecretsAuthQuery {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The auth query secret version
         */
        export interface PoolerStatusSecretsPgBouncerSecretsAuthQueryPatch {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The version of the secrets used by PgBouncer
         */
        export interface PoolerStatusSecretsPgBouncerSecretsPatch {
            authQuery: outputs.postgresql.v1.PoolerStatusSecretsPgBouncerSecretsAuthQueryPatch;
        }

        /**
         * The server CA secret version
         */
        export interface PoolerStatusSecretsServerCA {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The server CA secret version
         */
        export interface PoolerStatusSecretsServerCAPatch {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The server TLS secret version
         */
        export interface PoolerStatusSecretsServerTLS {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * The server TLS secret version
         */
        export interface PoolerStatusSecretsServerTLSPatch {
            /**
             * The name of the secret
             */
            name: string;
            /**
             * The ResourceVersion of the secret
             */
            version: string;
        }

        /**
         * ScheduledBackup is the Schema for the scheduledbackups API
         */
        export interface ScheduledBackup {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "postgresql.cnpg.io/v1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ScheduledBackup";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.postgresql.v1.ScheduledBackupSpec;
            status: outputs.postgresql.v1.ScheduledBackupStatus;
        }

        /**
         * Specification of the desired behavior of the ScheduledBackup.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ScheduledBackupSpec {
            /**
             * Indicates which ownerReference should be put inside the created backup resources.<br />
             * - none: no owner reference for created backup objects (same behavior as before the field was introduced)<br />
             * - self: sets the Scheduled backup object as owner of the backup<br />
             * - cluster: set the cluster as owner of the backup<br />
             */
            backupOwnerReference: string;
            cluster: outputs.postgresql.v1.ScheduledBackupSpecCluster;
            /**
             * If the first backup has to be immediately start after creation or not
             */
            immediate: boolean;
            /**
             * The backup method to be used, possible options are `barmanObjectStore`,
             * `volumeSnapshot` or `plugin`. Defaults to: `barmanObjectStore`.
             */
            method: string;
            /**
             * Whether the default type of backup with volume snapshots is
             * online/hot (`true`, default) or offline/cold (`false`)
             * Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
             */
            online: boolean;
            onlineConfiguration: outputs.postgresql.v1.ScheduledBackupSpecOnlineConfiguration;
            pluginConfiguration: outputs.postgresql.v1.ScheduledBackupSpecPluginConfiguration;
            /**
             * The schedule does not follow the same format used in Kubernetes CronJobs
             * as it includes an additional seconds specifier,
             * see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
             */
            schedule: string;
            /**
             * If this backup is suspended or not
             */
            suspend: boolean;
            /**
             * The policy to decide which instance should perform this backup. If empty,
             * it defaults to `cluster.spec.backup.target`.
             * Available options are empty string, `primary` and `prefer-standby`.
             * `primary` to have backups run always on primary instances,
             * `prefer-standby` to have backups run preferably on the most updated
             * standby, if available.
             */
            target: string;
        }

        /**
         * The cluster to backup
         */
        export interface ScheduledBackupSpecCluster {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * The cluster to backup
         */
        export interface ScheduledBackupSpecClusterPatch {
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * Configuration parameters to control the online/hot backup with volume snapshots
         * Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
         */
        export interface ScheduledBackupSpecOnlineConfiguration {
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * If false, the function will return immediately after the backup is completed,
             * without waiting for WAL to be archived.
             * This behavior is only useful with backup software that independently monitors WAL archiving.
             * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
             * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
             * enabled.
             * On a standby, this means that it will wait only when archive_mode = always.
             * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
             * an immediate segment switch.
             */
            waitForArchive: boolean;
        }

        /**
         * Configuration parameters to control the online/hot backup with volume snapshots
         * Overrides the default settings specified in the cluster '.backup.volumeSnapshot.onlineConfiguration' stanza
         */
        export interface ScheduledBackupSpecOnlineConfigurationPatch {
            /**
             * Control whether the I/O workload for the backup initial checkpoint will
             * be limited, according to the `checkpoint_completion_target` setting on
             * the PostgreSQL server. If set to true, an immediate checkpoint will be
             * used, meaning PostgreSQL will complete the checkpoint as soon as
             * possible. `false` by default.
             */
            immediateCheckpoint: boolean;
            /**
             * If false, the function will return immediately after the backup is completed,
             * without waiting for WAL to be archived.
             * This behavior is only useful with backup software that independently monitors WAL archiving.
             * Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
             * By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
             * enabled.
             * On a standby, this means that it will wait only when archive_mode = always.
             * If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
             * an immediate segment switch.
             */
            waitForArchive: boolean;
        }

        /**
         * Specification of the desired behavior of the ScheduledBackup.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ScheduledBackupSpecPatch {
            /**
             * Indicates which ownerReference should be put inside the created backup resources.<br />
             * - none: no owner reference for created backup objects (same behavior as before the field was introduced)<br />
             * - self: sets the Scheduled backup object as owner of the backup<br />
             * - cluster: set the cluster as owner of the backup<br />
             */
            backupOwnerReference: string;
            cluster: outputs.postgresql.v1.ScheduledBackupSpecClusterPatch;
            /**
             * If the first backup has to be immediately start after creation or not
             */
            immediate: boolean;
            /**
             * The backup method to be used, possible options are `barmanObjectStore`,
             * `volumeSnapshot` or `plugin`. Defaults to: `barmanObjectStore`.
             */
            method: string;
            /**
             * Whether the default type of backup with volume snapshots is
             * online/hot (`true`, default) or offline/cold (`false`)
             * Overrides the default setting specified in the cluster field '.spec.backup.volumeSnapshot.online'
             */
            online: boolean;
            onlineConfiguration: outputs.postgresql.v1.ScheduledBackupSpecOnlineConfigurationPatch;
            pluginConfiguration: outputs.postgresql.v1.ScheduledBackupSpecPluginConfigurationPatch;
            /**
             * The schedule does not follow the same format used in Kubernetes CronJobs
             * as it includes an additional seconds specifier,
             * see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
             */
            schedule: string;
            /**
             * If this backup is suspended or not
             */
            suspend: boolean;
            /**
             * The policy to decide which instance should perform this backup. If empty,
             * it defaults to `cluster.spec.backup.target`.
             * Available options are empty string, `primary` and `prefer-standby`.
             * `primary` to have backups run always on primary instances,
             * `prefer-standby` to have backups run preferably on the most updated
             * standby, if available.
             */
            target: string;
        }

        /**
         * Configuration parameters passed to the plugin managing this backup
         */
        export interface ScheduledBackupSpecPluginConfiguration {
            /**
             * Name is the name of the plugin managing this backup
             */
            name: string;
            /**
             * Parameters are the configuration parameters passed to the backup
             * plugin for this backup
             */
            parameters: {[key: string]: string};
        }

        /**
         * Configuration parameters passed to the plugin managing this backup
         */
        export interface ScheduledBackupSpecPluginConfigurationPatch {
            /**
             * Name is the name of the plugin managing this backup
             */
            name: string;
            /**
             * Parameters are the configuration parameters passed to the backup
             * plugin for this backup
             */
            parameters: {[key: string]: string};
        }

        /**
         * Most recently observed status of the ScheduledBackup. This data may not be up
         * to date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ScheduledBackupStatus {
            /**
             * The latest time the schedule
             */
            lastCheckTime: string;
            /**
             * Information when was the last time that backup was successfully scheduled.
             */
            lastScheduleTime: string;
            /**
             * Next time we will run a backup
             */
            nextScheduleTime: string;
        }

        /**
         * Most recently observed status of the ScheduledBackup. This data may not be up
         * to date. Populated by the system. Read-only.
         * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ScheduledBackupStatusPatch {
            /**
             * The latest time the schedule
             */
            lastCheckTime: string;
            /**
             * Information when was the last time that backup was successfully scheduled.
             */
            lastScheduleTime: string;
            /**
             * Next time we will run a backup
             */
            nextScheduleTime: string;
        }

    }
}

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRoute is the CRD implementation of a Traefik HTTP Router.
         */
        export interface IngressRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "IngressRoute";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.IngressRouteSpec;
        }

        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/entrypoints/
             * Default: all.
             */
            entryPoints: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteSpecRoutes[];
            tls: outputs.traefik.v1alpha1.IngressRouteSpecTls;
        }

        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpecPatch {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/entrypoints/
             * Default: all.
             */
            entryPoints: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteSpecRoutesPatch[];
            tls: outputs.traefik.v1alpha1.IngressRouteSpecTlsPatch;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutes {
            /**
             * Kind defines the kind of the route.
             * Rule is the only supported kind.
             */
            kind: string;
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rule
             */
            match: string;
            /**
             * Middlewares defines the list of references to Middleware resources.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares: outputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewares[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#priority
             */
            priority: number;
            /**
             * Services defines the list of Service.
             * It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServices[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rulesyntax
             */
            syntax: string;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewares {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace: string;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewaresPatch {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace: string;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutesPatch {
            /**
             * Kind defines the kind of the route.
             * Rule is the only supported kind.
             */
            kind: string;
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rule
             */
            match: string;
            /**
             * Middlewares defines the list of references to Middleware resources.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares: outputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewaresPatch[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#priority
             */
            priority: number;
            /**
             * Services defines the list of Service.
             * It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesPatch[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rulesyntax
             */
            syntax: string;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServices {
            healthCheck: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesHealthCheck;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface IngressRouteSpecRoutesServicesHealthCheck {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface IngressRouteSpecRoutesServicesHealthCheckPatch {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServicesPatch {
            healthCheck: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesHealthCheckPatch;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwardingPatch;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyPatch;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwardingPatch {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesSticky {
            cookie: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookiePatch {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesStickyPatch {
            cookie: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookiePatch;
        }

        /**
         * TLS defines the TLS configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#tls
         */
        export interface IngressRouteSpecTls {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/https/acme/#certificate-resolvers
             */
            certResolver: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#domains
             */
            domains: outputs.traefik.v1alpha1.IngressRouteSpecTlsDomains[];
            options: outputs.traefik.v1alpha1.IngressRouteSpecTlsOptions;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
            store: outputs.traefik.v1alpha1.IngressRouteSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomains {
            /**
             * Main defines the main domain name.
             */
            main: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans: string[];
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomainsPatch {
            /**
             * Main defines the main domain name.
             */
            main: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans: string[];
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptions {
            /**
             * Name defines the name of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace: string;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptionsPatch {
            /**
             * Name defines the name of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace: string;
        }

        /**
         * TLS defines the TLS configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#tls
         */
        export interface IngressRouteSpecTlsPatch {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/https/acme/#certificate-resolvers
             */
            certResolver: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#domains
             */
            domains: outputs.traefik.v1alpha1.IngressRouteSpecTlsDomainsPatch[];
            options: outputs.traefik.v1alpha1.IngressRouteSpecTlsOptionsPatch;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
            store: outputs.traefik.v1alpha1.IngressRouteSpecTlsStorePatch;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStore {
            /**
             * Name defines the name of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace: string;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStorePatch {
            /**
             * Name defines the name of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace: string;
        }

        /**
         * IngressRouteTCP is the CRD implementation of a Traefik TCP Router.
         */
        export interface IngressRouteTCP {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "IngressRouteTCP";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.IngressRouteTCPSpec;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/entrypoints/
             * Default: all.
             */
            entryPoints: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutes[];
            tls: outputs.traefik.v1alpha1.IngressRouteTCPSpecTls;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpecPatch {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/entrypoints/
             * Default: all.
             */
            entryPoints: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesPatch[];
            tls: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsPatch;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutes {
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rule_1
             */
            match: string;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewares[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#priority_1
             */
            priority: number;
            /**
             * Services defines the list of TCP services.
             */
            services: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServices[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rulesyntax_1
             */
            syntax: string;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewares {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace: string;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewaresPatch {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace: string;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutesPatch {
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rule_1
             */
            match: string;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewaresPatch[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#priority_1
             */
            priority: number;
            /**
             * Services defines the list of TCP services.
             */
            services: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesPatch[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#rulesyntax_1
             */
            syntax: string;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServices {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            proxyProtocol: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocol;
            /**
             * ServersTransport defines the name of ServersTransportTCP resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates
             * it has closed the writing capability of its connection, to close the reading capability as well,
             * hence fully terminating the connection.
             * It is a duration in milliseconds, defaulting to 100.
             * A negative value means an infinite deadline (i.e. the reading capability is never closed).
             * Deprecated: TerminationDelay will not be supported in future APIVersions, please use ServersTransport to configure the TerminationDelay instead.
             */
            terminationDelay: number;
            /**
             * TLS determines whether to use TLS when dialing with the backend.
             */
            tls: boolean;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight: number;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServicesPatch {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            proxyProtocol: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocolPatch;
            /**
             * ServersTransport defines the name of ServersTransportTCP resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates
             * it has closed the writing capability of its connection, to close the reading capability as well,
             * hence fully terminating the connection.
             * It is a duration in milliseconds, defaulting to 100.
             * A negative value means an infinite deadline (i.e. the reading capability is never closed).
             * Deprecated: TerminationDelay will not be supported in future APIVersions, please use ServersTransport to configure the TerminationDelay instead.
             */
            terminationDelay: number;
            /**
             * TLS determines whether to use TLS when dialing with the backend.
             */
            tls: boolean;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight: number;
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocol {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version: number;
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocolPatch {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version: number;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTls {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/https/acme/#certificate-resolvers
             */
            certResolver: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#domains
             */
            domains: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomains[];
            options: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptions;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough: boolean;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
            store: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomains {
            /**
             * Main defines the main domain name.
             */
            main: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans: string[];
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomainsPatch {
            /**
             * Main defines the main domain name.
             */
            main: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans: string[];
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptions {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace: string;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptionsPatch {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace: string;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTlsPatch {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/https/acme/#certificate-resolvers
             */
            certResolver: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/routers/#domains
             */
            domains: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomainsPatch[];
            options: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptionsPatch;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough: boolean;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
            store: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStorePatch;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStore {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace: string;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStorePatch {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace: string;
        }

        /**
         * IngressRouteUDP is a CRD implementation of a Traefik UDP Router.
         */
        export interface IngressRouteUDP {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "IngressRouteUDP";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.IngressRouteUDPSpec;
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/entrypoints/
             * Default: all.
             */
            entryPoints: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutes[];
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpecPatch {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.2/routing/entrypoints/
             * Default: all.
             */
            entryPoints: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesPatch[];
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutes {
            /**
             * Services defines the list of UDP services.
             */
            services: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServices[];
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutesPatch {
            /**
             * Services defines the list of UDP services.
             */
            services: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServicesPatch[];
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServices {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight: number;
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServicesPatch {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight: number;
        }

        /**
         * Middleware is the CRD implementation of a Traefik Middleware.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/overview/
         */
        export interface Middleware {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "Middleware";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.MiddlewareSpec;
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpec {
            addPrefix: outputs.traefik.v1alpha1.MiddlewareSpecAddPrefix;
            basicAuth: outputs.traefik.v1alpha1.MiddlewareSpecBasicAuth;
            buffering: outputs.traefik.v1alpha1.MiddlewareSpecBuffering;
            chain: outputs.traefik.v1alpha1.MiddlewareSpecChain;
            circuitBreaker: outputs.traefik.v1alpha1.MiddlewareSpecCircuitBreaker;
            compress: outputs.traefik.v1alpha1.MiddlewareSpecCompress;
            contentType: outputs.traefik.v1alpha1.MiddlewareSpecContentType;
            digestAuth: outputs.traefik.v1alpha1.MiddlewareSpecDigestAuth;
            errors: outputs.traefik.v1alpha1.MiddlewareSpecErrors;
            forwardAuth: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuth;
            grpcWeb: outputs.traefik.v1alpha1.MiddlewareSpecGrpcWeb;
            headers: outputs.traefik.v1alpha1.MiddlewareSpecHeaders;
            inFlightReq: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReq;
            ipAllowList: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowList;
            ipWhiteList: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteList;
            passTLSClientCert: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCert;
            /**
             * Plugin defines the middleware plugin configuration.
             * More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin: {[key: string]: {[key: string]: any}};
            rateLimit: outputs.traefik.v1alpha1.MiddlewareSpecRateLimit;
            redirectRegex: outputs.traefik.v1alpha1.MiddlewareSpecRedirectRegex;
            redirectScheme: outputs.traefik.v1alpha1.MiddlewareSpecRedirectScheme;
            replacePath: outputs.traefik.v1alpha1.MiddlewareSpecReplacePath;
            replacePathRegex: outputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegex;
            retry: outputs.traefik.v1alpha1.MiddlewareSpecRetry;
            stripPrefix: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefix;
            stripPrefixRegex: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegex;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration.
         * This middleware updates the path of a request before forwarding it.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefix {
            /**
             * Prefix is the string to add before the current path in the requested URL.
             * It should include a leading slash (/).
             */
            prefix: string;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration.
         * This middleware updates the path of a request before forwarding it.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefixPatch {
            /**
             * Prefix is the string to add before the current path in the requested URL.
             * It should include a leading slash (/).
             */
            prefix: string;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuth {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/basicauth/#headerfield
             */
            headerField: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm: string;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.
             * Default: false.
             */
            removeHeader: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret: string;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuthPatch {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/basicauth/#headerfield
             */
            headerField: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm: string;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.
             * Default: false.
             */
            removeHeader: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret: string;
        }

        /**
         * Buffering holds the buffering middleware configuration.
         * This middleware retries or limits the size of requests that can be forwarded to backends.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBuffering {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).
             * If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.
             * Default: 0 (no maximum).
             */
            maxRequestBodyBytes: number;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).
             * If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.
             * Default: 0 (no maximum).
             */
            maxResponseBodyBytes: number;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memRequestBodyBytes: number;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memResponseBodyBytes: number;
            /**
             * RetryExpression defines the retry conditions.
             * It is a logical combination of functions with operators AND (&&) and OR (||).
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/buffering/#retryexpression
             */
            retryExpression: string;
        }

        /**
         * Buffering holds the buffering middleware configuration.
         * This middleware retries or limits the size of requests that can be forwarded to backends.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBufferingPatch {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).
             * If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.
             * Default: 0 (no maximum).
             */
            maxRequestBodyBytes: number;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).
             * If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.
             * Default: 0 (no maximum).
             */
            maxResponseBodyBytes: number;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memRequestBodyBytes: number;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memResponseBodyBytes: number;
            /**
             * RetryExpression defines the retry conditions.
             * It is a logical combination of functions with operators AND (&&) and OR (||).
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/buffering/#retryexpression
             */
            retryExpression: string;
        }

        /**
         * Chain holds the configuration of the chain middleware.
         * This middleware enables to define reusable combinations of other pieces of middleware.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/chain/
         */
        export interface MiddlewareSpecChain {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares: outputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewares[];
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewares {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace: string;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewaresPatch {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace: string;
        }

        /**
         * Chain holds the configuration of the chain middleware.
         * This middleware enables to define reusable combinations of other pieces of middleware.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/chain/
         */
        export interface MiddlewareSpecChainPatch {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares: outputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewaresPatch[];
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreaker {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod: number | string;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression: string;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration: number | string;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration: number | string;
            /**
             * ResponseCode is the status code that the circuit breaker will return while it is in the open state.
             */
            responseCode: number;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreakerPatch {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod: number | string;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression: string;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration: number | string;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration: number | string;
            /**
             * ResponseCode is the status code that the circuit breaker will return while it is in the open state.
             */
            responseCode: number;
        }

        /**
         * Compress holds the compress middleware configuration.
         * This middleware compresses responses before sending them to the client, using gzip, brotli, or zstd compression.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompress {
            /**
             * DefaultEncoding specifies the default encoding if the `Accept-Encoding` header is not in the request or contains a wildcard (`*`).
             */
            defaultEncoding: string;
            /**
             * Encodings defines the list of supported compression algorithms.
             */
            encodings: string[];
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             * `application/grpc` is always excluded.
             */
            excludedContentTypes: string[];
            /**
             * IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.
             */
            includedContentTypes: string[];
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.
             * Default: 1024.
             */
            minResponseBodyBytes: number;
        }

        /**
         * Compress holds the compress middleware configuration.
         * This middleware compresses responses before sending them to the client, using gzip, brotli, or zstd compression.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompressPatch {
            /**
             * DefaultEncoding specifies the default encoding if the `Accept-Encoding` header is not in the request or contains a wildcard (`*`).
             */
            defaultEncoding: string;
            /**
             * Encodings defines the list of supported compression algorithms.
             */
            encodings: string[];
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             * `application/grpc` is always excluded.
             */
            excludedContentTypes: string[];
            /**
             * IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.
             */
            includedContentTypes: string[];
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.
             * Default: 1024.
             */
            minResponseBodyBytes: number;
        }

        /**
         * ContentType holds the content-type middleware configuration.
         * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentType {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,
             * be automatically set to a value derived from the contents of the response.
             * Deprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.
             */
            autoDetect: boolean;
        }

        /**
         * ContentType holds the content-type middleware configuration.
         * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentTypePatch {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,
             * be automatically set to a value derived from the contents of the response.
             * Deprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.
             */
            autoDetect: boolean;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuth {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/basicauth/#headerfield
             */
            headerField: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm: string;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret: string;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuthPatch {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/basicauth/#headerfield
             */
            headerField: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm: string;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret: string;
        }

        /**
         * ErrorPage holds the custom error middleware configuration.
         * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrors {
            /**
             * Query defines the URL for the error page (hosted by service).
             * The {status} variable can be used in order to insert the status code in the URL.
             */
            query: string;
            service: outputs.traefik.v1alpha1.MiddlewareSpecErrorsService;
            /**
             * Status defines which status or range of statuses should result in an error page.
             * It can be either a status code as a number (500),
             * as multiple comma-separated numbers (500,502),
             * as ranges by separating two codes with a dash (500-599),
             * or a combination of the two (404,418,500-599).
             */
            status: string[];
        }

        /**
         * ErrorPage holds the custom error middleware configuration.
         * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrorsPatch {
            /**
             * Query defines the URL for the error page (hosted by service).
             * The {status} variable can be used in order to insert the status code in the URL.
             */
            query: string;
            service: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServicePatch;
            /**
             * Status defines which status or range of statuses should result in an error page.
             * It can be either a status code as a number (500),
             * as multiple comma-separated numbers (500,502),
             * as ranges by separating two codes with a dash (500-599),
             * or a combination of the two (404,418,500-599).
             */
            status: string[];
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsService {
            healthCheck: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceHealthCheck;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface MiddlewareSpecErrorsServiceHealthCheck {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface MiddlewareSpecErrorsServiceHealthCheckPatch {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsServicePatch {
            healthCheck: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceHealthCheckPatch;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwardingPatch;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyPatch;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwardingPatch {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceSticky {
            cookie: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookiePatch {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceStickyPatch {
            cookie: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookiePatch;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration.
         * This middleware delegates the request authentication to a Service.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuth {
            /**
             * AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.
             */
            addAuthCookiesToResponse: string[];
            /**
             * Address defines the authentication server address.
             */
            address: string;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.
             * If not set or empty then all request headers are passed.
             */
            authRequestHeaders: string[];
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders: string[];
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex: string;
            tls: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTls;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader: boolean;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration.
         * This middleware delegates the request authentication to a Service.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuthPatch {
            /**
             * AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.
             */
            addAuthCookiesToResponse: string[];
            /**
             * Address defines the authentication server address.
             */
            address: string;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.
             * If not set or empty then all request headers are passed.
             */
            authRequestHeaders: string[];
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders: string[];
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.
             * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex: string;
            tls: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTlsPatch;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader: boolean;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTls {
            /**
             * Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).
             */
            caOptional: boolean;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.
             * The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret: string;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.
             * The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret: string;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify: boolean;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTlsPatch {
            /**
             * Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).
             */
            caOptional: boolean;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.
             * The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret: string;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.
             * The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret: string;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify: boolean;
        }

        /**
         * GrpcWeb holds the gRPC web middleware configuration.
         * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
         */
        export interface MiddlewareSpecGrpcWeb {
            /**
             * AllowOrigins is a list of allowable origins.
             * Can also be a wildcard origin "*".
             */
            allowOrigins: string[];
        }

        /**
         * GrpcWeb holds the gRPC web middleware configuration.
         * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
         */
        export interface MiddlewareSpecGrpcWebPatch {
            /**
             * AllowOrigins is a list of allowable origins.
             * Can also be a wildcard origin "*".
             */
            allowOrigins: string[];
        }

        /**
         * Headers holds the headers middleware configuration.
         * This middleware manages the requests and responses headers.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeaders {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials: boolean;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders: string[];
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods: string[];
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList: string[];
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex: string[];
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders: string[];
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge: number;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader: boolean;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts: string[];
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter: boolean;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy: string;
            /**
             * ContentSecurityPolicyReportOnly defines the Content-Security-Policy-Report-Only header value.
             */
            contentSecurityPolicyReportOnly: string;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff: boolean;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value.
             * This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue: string;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value.
             * This overrides the FrameDeny option.
             */
            customFrameOptionsValue: string;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders: {[key: string]: string};
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders: {[key: string]: string};
            /**
             * Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.
             */
            featurePolicy: string;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader: boolean;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny: boolean;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders: string[];
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.
             * Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.
             * If you would like your development environment to mimic production with complete Host blocking, SSL redirects,
             * and STS headers, leave this as false.
             */
            isDevelopment: boolean;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value.
             * This allows sites to control browser features.
             */
            permissionsPolicy: string;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey: string;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value.
             * This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy: string;
            /**
             * Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.
             */
            sslForceHost: boolean;
            /**
             * Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.
             */
            sslHost: string;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.
             * It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders: {[key: string]: string};
            /**
             * Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect: boolean;
            /**
             * Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect: boolean;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains: boolean;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload: boolean;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header.
             * If set to 0, the header is not set.
             */
            stsSeconds: number;
        }

        /**
         * Headers holds the headers middleware configuration.
         * This middleware manages the requests and responses headers.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeadersPatch {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials: boolean;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders: string[];
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods: string[];
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList: string[];
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex: string[];
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders: string[];
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge: number;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader: boolean;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts: string[];
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter: boolean;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy: string;
            /**
             * ContentSecurityPolicyReportOnly defines the Content-Security-Policy-Report-Only header value.
             */
            contentSecurityPolicyReportOnly: string;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff: boolean;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value.
             * This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue: string;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value.
             * This overrides the FrameDeny option.
             */
            customFrameOptionsValue: string;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders: {[key: string]: string};
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders: {[key: string]: string};
            /**
             * Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.
             */
            featurePolicy: string;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader: boolean;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny: boolean;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders: string[];
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.
             * Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.
             * If you would like your development environment to mimic production with complete Host blocking, SSL redirects,
             * and STS headers, leave this as false.
             */
            isDevelopment: boolean;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value.
             * This allows sites to control browser features.
             */
            permissionsPolicy: string;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey: string;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value.
             * This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy: string;
            /**
             * Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.
             */
            sslForceHost: boolean;
            /**
             * Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.
             */
            sslHost: string;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.
             * It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders: {[key: string]: string};
            /**
             * Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect: boolean;
            /**
             * Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect: boolean;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains: boolean;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload: boolean;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header.
             * If set to 0, the header is not set.
             */
            stsSeconds: number;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration.
         * This middleware limits the number of requests being processed and served concurrently.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReq {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request.
             * The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount: number;
            sourceCriterion: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterion;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration.
         * This middleware limits the number of requests being processed and served concurrently.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReqPatch {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request.
             * The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount: number;
            sourceCriterion: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionPatch;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the requestHost.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterion {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategy;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost: boolean;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategyPatch {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the requestHost.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionPatch {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategyPatch;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost: boolean;
        }

        /**
         * IPAllowList holds the IP allowlist middleware configuration.
         * This middleware limits allowed requests based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/
         */
        export interface MiddlewareSpecIpAllowList {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowListIpStrategy;
            /**
             * RejectStatusCode defines the HTTP status code used for refused requests.
             * If not set, the default is 403 (Forbidden).
             */
            rejectStatusCode: number;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange: string[];
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpAllowListIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpAllowListIpStrategyPatch {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * IPAllowList holds the IP allowlist middleware configuration.
         * This middleware limits allowed requests based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/
         */
        export interface MiddlewareSpecIpAllowListPatch {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowListIpStrategyPatch;
            /**
             * RejectStatusCode defines the HTTP status code used for refused requests.
             * If not set, the default is 403 (Forbidden).
             */
            rejectStatusCode: number;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange: string[];
        }

        /**
         * Deprecated: please use IPAllowList instead.
         */
        export interface MiddlewareSpecIpWhiteList {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategy;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation). Required.
             */
            sourceRange: string[];
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategyPatch {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * Deprecated: please use IPAllowList instead.
         */
        export interface MiddlewareSpecIpWhiteListPatch {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategyPatch;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation). Required.
             */
            sourceRange: string[];
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration.
         * This middleware adds the selected data from the passed client TLS certificate to a header.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTLSClientCert {
            info: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfo;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
             */
            pem: boolean;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfo {
            issuer: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoIssuer;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter: boolean;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore: boolean;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans: boolean;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber: boolean;
            subject: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoSubject;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoIssuer {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName: boolean;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent: boolean;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality: boolean;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization: boolean;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber: boolean;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoIssuerPatch {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName: boolean;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent: boolean;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality: boolean;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization: boolean;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber: boolean;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoPatch {
            issuer: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoIssuerPatch;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter: boolean;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore: boolean;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans: boolean;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber: boolean;
            subject: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoSubjectPatch;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoSubject {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName: boolean;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent: boolean;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality: boolean;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization: boolean;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit: boolean;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber: boolean;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoSubjectPatch {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName: boolean;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent: boolean;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality: boolean;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization: boolean;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit: boolean;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber: boolean;
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration.
         * This middleware adds the selected data from the passed client TLS certificate to a header.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTLSClientCertPatch {
            info: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoPatch;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
             */
            pem: boolean;
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpecPatch {
            addPrefix: outputs.traefik.v1alpha1.MiddlewareSpecAddPrefixPatch;
            basicAuth: outputs.traefik.v1alpha1.MiddlewareSpecBasicAuthPatch;
            buffering: outputs.traefik.v1alpha1.MiddlewareSpecBufferingPatch;
            chain: outputs.traefik.v1alpha1.MiddlewareSpecChainPatch;
            circuitBreaker: outputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerPatch;
            compress: outputs.traefik.v1alpha1.MiddlewareSpecCompressPatch;
            contentType: outputs.traefik.v1alpha1.MiddlewareSpecContentTypePatch;
            digestAuth: outputs.traefik.v1alpha1.MiddlewareSpecDigestAuthPatch;
            errors: outputs.traefik.v1alpha1.MiddlewareSpecErrorsPatch;
            forwardAuth: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuthPatch;
            grpcWeb: outputs.traefik.v1alpha1.MiddlewareSpecGrpcWebPatch;
            headers: outputs.traefik.v1alpha1.MiddlewareSpecHeadersPatch;
            inFlightReq: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqPatch;
            ipAllowList: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowListPatch;
            ipWhiteList: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListPatch;
            passTLSClientCert: outputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertPatch;
            /**
             * Plugin defines the middleware plugin configuration.
             * More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin: {[key: string]: {[key: string]: any}};
            rateLimit: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitPatch;
            redirectRegex: outputs.traefik.v1alpha1.MiddlewareSpecRedirectRegexPatch;
            redirectScheme: outputs.traefik.v1alpha1.MiddlewareSpecRedirectSchemePatch;
            replacePath: outputs.traefik.v1alpha1.MiddlewareSpecReplacePathPatch;
            replacePathRegex: outputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegexPatch;
            retry: outputs.traefik.v1alpha1.MiddlewareSpecRetryPatch;
            stripPrefix: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefixPatch;
            stripPrefixRegex: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegexPatch;
        }

        /**
         * RateLimit holds the rate limit configuration.
         * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimit {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source.
             * It defaults to 0, which means no rate limiting.
             * The rate is actually defined by dividing Average by Period. So for a rate below 1req/s,
             * one needs to define a Period larger than a second.
             */
            average: number;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.
             * It defaults to 1.
             */
            burst: number;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as:
             * r = Average / Period. It defaults to a second.
             */
            period: number | string;
            sourceCriterion: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterion;
        }

        /**
         * RateLimit holds the rate limit configuration.
         * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimitPatch {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source.
             * It defaults to 0, which means no rate limiting.
             * The rate is actually defined by dividing Average by Period. So for a rate below 1req/s,
             * one needs to define a Period larger than a second.
             */
            average: number;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.
             * It defaults to 1.
             */
            burst: number;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as:
             * r = Average / Period. It defaults to a second.
             */
            period: number | string;
            sourceCriterion: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionPatch;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterion {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategy;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost: boolean;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategyPatch {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs: string[];
            /**
             * IPv6Subnet configures Traefik to consider all IPv6 addresses from the defined subnet as originating from the same IP. Applies to RemoteAddrStrategy and DepthStrategy.
             */
            ipv6Subnet: number;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterionPatch {
            ipStrategy: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategyPatch;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost: boolean;
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration.
         * This middleware redirects a request using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegex {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent: boolean;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex: string;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement: string;
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration.
         * This middleware redirects a request using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegexPatch {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent: boolean;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex: string;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement: string;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration.
         * This middleware redirects requests from a scheme/port to another.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectScheme {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent: boolean;
            /**
             * Port defines the port of the new URL.
             */
            port: string;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme: string;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration.
         * This middleware redirects requests from a scheme/port to another.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectSchemePatch {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent: boolean;
            /**
             * Port defines the port of the new URL.
             */
            port: string;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme: string;
        }

        /**
         * ReplacePath holds the replace path middleware configuration.
         * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePath {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path: string;
        }

        /**
         * ReplacePath holds the replace path middleware configuration.
         * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePathPatch {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path: string;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration.
         * This middleware replaces the path of a URL using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegex {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex: string;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement: string;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration.
         * This middleware replaces the path of a URL using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegexPatch {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex: string;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement: string;
        }

        /**
         * Retry holds the retry middleware configuration.
         * This middleware reissues requests a given number of times to a backend server if that server does not reply.
         * As soon as the server answers, the middleware stops retrying, regardless of the response status.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetry {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts: number;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series.
             * The maximum interval is calculated as twice the initialInterval.
             * If unspecified, requests will be retried immediately.
             * The value of initialInterval should be provided in seconds or as a valid duration format,
             * see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval: number | string;
        }

        /**
         * Retry holds the retry middleware configuration.
         * This middleware reissues requests a given number of times to a backend server if that server does not reply.
         * As soon as the server answers, the middleware stops retrying, regardless of the response status.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetryPatch {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts: number;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series.
             * The maximum interval is calculated as twice the initialInterval.
             * If unspecified, requests will be retried immediately.
             * The value of initialInterval should be provided in seconds or as a valid duration format,
             * see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval: number | string;
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration.
         * This middleware removes the specified prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefix {
            /**
             * Deprecated: ForceSlash option is deprecated, please remove any usage of this option.
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.
             * Default: true.
             */
            forceSlash: boolean;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes: string[];
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration.
         * This middleware removes the specified prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefixPatch {
            /**
             * Deprecated: ForceSlash option is deprecated, please remove any usage of this option.
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.
             * Default: true.
             */
            forceSlash: boolean;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes: string[];
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration.
         * This middleware removes the matching prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegex {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex: string[];
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration.
         * This middleware removes the matching prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegexPatch {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex: string[];
        }

        /**
         * MiddlewareTCP is the CRD implementation of a Traefik TCP middleware.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/overview/
         */
        export interface MiddlewareTCP {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "MiddlewareTCP";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.MiddlewareTCPSpec;
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpec {
            inFlightConn: outputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConn;
            ipAllowList: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpAllowList;
            ipWhiteList: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteList;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConn {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections.
             * The middleware closes the connection if there are already amount connections opened.
             */
            amount: number;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConnPatch {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections.
             * The middleware closes the connection if there are already amount connections opened.
             */
            amount: number;
        }

        /**
         * IPAllowList defines the IPAllowList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/tcp/ipallowlist/
         */
        export interface MiddlewareTCPSpecIpAllowList {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange: string[];
        }

        /**
         * IPAllowList defines the IPAllowList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/tcp/ipallowlist/
         */
        export interface MiddlewareTCPSpecIpAllowListPatch {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange: string[];
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * Deprecated: please use IPAllowList instead.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/tcp/ipwhitelist/
         */
        export interface MiddlewareTCPSpecIpWhiteList {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange: string[];
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * Deprecated: please use IPAllowList instead.
         * More info: https://doc.traefik.io/traefik/v3.2/middlewares/tcp/ipwhitelist/
         */
        export interface MiddlewareTCPSpecIpWhiteListPatch {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange: string[];
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpecPatch {
            inFlightConn: outputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConnPatch;
            ipAllowList: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpAllowListPatch;
            ipWhiteList: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteListPatch;
        }

        /**
         * ServersTransport is the CRD implementation of a ServersTransport.
         * If no serversTransport is specified, the default@internal will be used.
         * The default@internal serversTransport is created from the static configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#serverstransport_1
         */
        export interface ServersTransport {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ServersTransport";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.ServersTransportSpec;
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpec {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets: string[];
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2: boolean;
            forwardingTimeouts: outputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeouts;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost: number;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName: string;
            spiffe: outputs.traefik.v1alpha1.ServersTransportSpecSpiffe;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeouts {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout: number | string;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout: number | string;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout: number | string;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout: number | string;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout: number | string;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeoutsPatch {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout: number | string;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout: number | string;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout: number | string;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout: number | string;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout: number | string;
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpecPatch {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets: string[];
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2: boolean;
            forwardingTimeouts: outputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsPatch;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost: number;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName: string;
            spiffe: outputs.traefik.v1alpha1.ServersTransportSpecSpiffePatch;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportSpecSpiffe {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain: string;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportSpecSpiffePatch {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain: string;
        }

        /**
         * ServersTransportTCP is the CRD implementation of a TCPServersTransport.
         * If no tcpServersTransport is specified, a default one named default@internal will be used.
         * The default@internal tcpServersTransport can be configured in the static configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#serverstransport_3
         */
        export interface ServersTransportTCP {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "ServersTransportTCP";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.ServersTransportTCPSpec;
        }

        /**
         * ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.
         */
        export interface ServersTransportTCPSpec {
            /**
             * DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.
             */
            dialKeepAlive: number | string;
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout: number | string;
            /**
             * TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.
             */
            terminationDelay: number | string;
            tls: outputs.traefik.v1alpha1.ServersTransportTCPSpecTls;
        }

        /**
         * ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.
         */
        export interface ServersTransportTCPSpecPatch {
            /**
             * DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.
             */
            dialKeepAlive: number | string;
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout: number | string;
            /**
             * TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.
             */
            terminationDelay: number | string;
            tls: outputs.traefik.v1alpha1.ServersTransportTCPSpecTlsPatch;
        }

        /**
         * TLS defines the TLS configuration
         */
        export interface ServersTransportTCPSpecTls {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets: string[];
            /**
             * InsecureSkipVerify disables TLS certificate verification.
             */
            insecureSkipVerify: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.
             */
            rootCAsSecrets: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName: string;
            spiffe: outputs.traefik.v1alpha1.ServersTransportTCPSpecTlsSpiffe;
        }

        /**
         * TLS defines the TLS configuration
         */
        export interface ServersTransportTCPSpecTlsPatch {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets: string[];
            /**
             * InsecureSkipVerify disables TLS certificate verification.
             */
            insecureSkipVerify: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.
             */
            rootCAsSecrets: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName: string;
            spiffe: outputs.traefik.v1alpha1.ServersTransportTCPSpecTlsSpiffePatch;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportTCPSpecTlsSpiffe {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain: string;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportTCPSpecTlsSpiffePatch {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain: string;
        }

        /**
         * TLSOption is the CRD implementation of a Traefik TLS Option, allowing to configure some parameters of the TLS connection.
         * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#tls-options
         */
        export interface TLSOption {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "TLSOption";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.TLSOptionSpec;
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpec {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.
             * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#alpn-protocols
             */
            alpnProtocols: string[];
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.
             * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#cipher-suites
             */
            cipherSuites: string[];
            clientAuth: outputs.traefik.v1alpha1.TLSOptionSpecClientAuth;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order.
             * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#curve-preferences
             */
            curvePreferences: string[];
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: None.
             */
            maxVersion: string;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: VersionTLS10.
             */
            minVersion: string;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.
             * It is enabled automatically when minVersion or maxVersion is set.
             * Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites: boolean;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict: boolean;
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuth {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType: string;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames: string[];
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuthPatch {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType: string;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames: string[];
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpecPatch {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.
             * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#alpn-protocols
             */
            alpnProtocols: string[];
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.
             * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#cipher-suites
             */
            cipherSuites: string[];
            clientAuth: outputs.traefik.v1alpha1.TLSOptionSpecClientAuthPatch;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order.
             * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#curve-preferences
             */
            curvePreferences: string[];
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: None.
             */
            maxVersion: string;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: VersionTLS10.
             */
            minVersion: string;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.
             * It is enabled automatically when minVersion or maxVersion is set.
             * Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites: boolean;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict: boolean;
        }

        /**
         * TLSStore is the CRD implementation of a Traefik TLS Store.
         * For the time being, only the TLSStore named default is supported.
         * This means that you cannot have two stores that are named default in different Kubernetes namespaces.
         * More info: https://doc.traefik.io/traefik/v3.2/https/tls/#certificates-stores
         */
        export interface TLSStore {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "TLSStore";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.TLSStoreSpec;
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpec {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates: outputs.traefik.v1alpha1.TLSStoreSpecCertificates[];
            defaultCertificate: outputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificate;
            defaultGeneratedCert: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCert;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificates {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificatesPatch {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificate {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificatePatch {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCert {
            domain: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomain;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver: string;
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomain {
            /**
             * Main defines the main domain name.
             */
            main: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans: string[];
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomainPatch {
            /**
             * Main defines the main domain name.
             */
            main: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans: string[];
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCertPatch {
            domain: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomainPatch;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver: string;
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpecPatch {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates: outputs.traefik.v1alpha1.TLSStoreSpecCertificatesPatch[];
            defaultCertificate: outputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificatePatch;
            defaultGeneratedCert: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertPatch;
        }

        /**
         * TraefikService is the CRD implementation of a Traefik Service.
         * TraefikService object allows to:
         * - Apply weight to Services on load-balancing
         * - Mirror traffic on services
         * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#kind-traefikservice
         */
        export interface TraefikService {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion: "traefik.io/v1alpha1";
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: "TraefikService";
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata: outputs.meta.v1.ObjectMeta;
            spec: outputs.traefik.v1alpha1.TraefikServiceSpec;
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpec {
            mirroring: outputs.traefik.v1alpha1.TraefikServiceSpecMirroring;
            weighted: outputs.traefik.v1alpha1.TraefikServiceSpecWeighted;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroring {
            healthCheck: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringHealthCheck;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request.
             * If the body is larger, the request is not mirrored.
             * Default value is -1, which means unlimited size.
             */
            maxBodySize: number;
            /**
             * MirrorBody defines whether the body of the request should be mirrored.
             * Default value is true.
             */
            mirrorBody: boolean;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrors[];
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface TraefikServiceSpecMirroringHealthCheck {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface TraefikServiceSpecMirroringHealthCheckPatch {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrors {
            healthCheck: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsHealthCheck;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Percent defines the part of the traffic to mirror.
             * Supported values: 0 to 100.
             */
            percent: number;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface TraefikServiceSpecMirroringMirrorsHealthCheck {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface TraefikServiceSpecMirroringMirrorsHealthCheckPatch {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsPatch {
            healthCheck: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsHealthCheckPatch;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Percent defines the part of the traffic to mirror.
             * Supported values: 0 to 100.
             */
            percent: number;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwardingPatch;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyPatch;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwardingPatch {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsSticky {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookiePatch {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyPatch {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookiePatch;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroringPatch {
            healthCheck: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringHealthCheckPatch;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request.
             * If the body is larger, the request is not mirrored.
             * Default value is -1, which means unlimited size.
             */
            maxBodySize: number;
            /**
             * MirrorBody defines whether the body of the request should be mirrored.
             * Default value is true.
             */
            mirrorBody: boolean;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsPatch[];
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwardingPatch;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyPatch;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwardingPatch {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringSticky {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookiePatch {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringStickyPatch {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookiePatch;
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpecPatch {
            mirroring: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringPatch;
            weighted: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedPatch;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeighted {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServices[];
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedSticky;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeightedPatch {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesPatch[];
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyPatch;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServices {
            healthCheck: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesHealthCheck;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface TraefikServiceSpecWeightedServicesHealthCheck {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Healthcheck defines health checks for ExternalName services.
         */
        export interface TraefikServiceSpecWeightedServicesHealthCheckPatch {
            /**
             * FollowRedirects defines whether redirects should be followed during the health check calls.
             * Default: true
             */
            followRedirects: boolean;
            /**
             * Headers defines custom headers to be sent to the health check endpoint.
             */
            headers: {[key: string]: string};
            /**
             * Hostname defines the value of hostname in the Host header of the health check request.
             */
            hostname: string;
            /**
             * Interval defines the frequency of the health check calls.
             * Default: 30s
             */
            interval: number | string;
            /**
             * Method defines the healthcheck method.
             */
            method: string;
            /**
             * Mode defines the health check mode.
             * If defined to grpc, will use the gRPC health check protocol to probe the server.
             * Default: http
             */
            mode: string;
            /**
             * Path defines the server URL path for the health check endpoint.
             */
            path: string;
            /**
             * Port defines the server URL port for the health check endpoint.
             */
            port: number;
            /**
             * Scheme replaces the server URL scheme for the health check endpoint.
             */
            scheme: string;
            /**
             * Status defines the expected HTTP status code of the response to the health check request.
             */
            status: number;
            /**
             * Timeout defines the maximum duration Traefik will wait for a health check request before considering the server unhealthy.
             * Default: 5s
             */
            timeout: number | string;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServicesPatch {
            healthCheck: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesHealthCheckPatch;
            /**
             * Kind defines the kind of the Service.
             */
            kind: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB: boolean;
            /**
             * NodePortLB controls, when creating the load-balancer,
             * whether the LB's children are directly the nodes internal IPs using the nodePort when the service type is NodePort.
             * It allows services to be reachable when Traefik runs externally from the Kubernetes cluster but within the same network of the nodes.
             * By default, NodePortLB is false.
             */
            nodePortLB: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            responseForwarding: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwardingPatch;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport: string;
            sticky: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyPatch;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwardingPatch {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesSticky {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookiePatch {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesStickyPatch {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookiePatch;
        }

        /**
         * Sticky defines whether sticky sessions are enabled.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedSticky {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookiePatch {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge: number;
            /**
             * Name defines the Cookie name.
             */
            name: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure: boolean;
        }

        /**
         * Sticky defines whether sticky sessions are enabled.
         * More info: https://doc.traefik.io/traefik/v3.2/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedStickyPatch {
            cookie: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookiePatch;
        }

    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpecArgs {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: pulumi.Input<string>;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: pulumi.Input<string>;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: pulumi.Input<inputs.acme.v1.ChallengeSpecIssuerRefArgs>;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: pulumi.Input<string>;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverArgs>;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: pulumi.Input<string>;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: pulumi.Input<string>;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: pulumi.Input<string>;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: pulumi.Input<boolean>;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolverArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzureDNSArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudDNSArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDNSAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDNSArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ChallengeSpecSolverDns01AzureDNSClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ChallengeSpecSolverDns01AzureDNSManagedIdentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDNSArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccessKeyIDSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * challengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgsProvideDefaults sets the appropriate defaults for ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs
         */
        export function challengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgsProvideDefaults(val: ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs): ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01IngressArgs {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ChallengeStatusArgs {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: pulumi.Input<boolean>;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: pulumi.Input<boolean>;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: pulumi.Input<string>;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: pulumi.Input<string>;
        }

        export interface OrderSpecArgs {
            /**
             * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
             */
            commonName?: pulumi.Input<string>;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
             */
            duration?: pulumi.Input<string>;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
             */
            issuerRef: pulumi.Input<inputs.acme.v1.OrderSpecIssuerRefArgs>;
            /**
             * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
             */
            request: pulumi.Input<string>;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
         */
        export interface OrderSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        export interface OrderStatusArgs {
            /**
             * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
             */
            authorizations?: pulumi.Input<pulumi.Input<inputs.acme.v1.OrderStatusAuthorizationsArgs>[]>;
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
             */
            certificate?: pulumi.Input<string>;
            /**
             * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: pulumi.Input<string>;
            /**
             * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL?: pulumi.Input<string>;
            /**
             * Reason optionally provides more information about a why the order is in the current state.
             */
            reason?: pulumi.Input<string>;
            /**
             * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
             */
            state?: pulumi.Input<string>;
            /**
             * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
             */
            url?: pulumi.Input<string>;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
         */
        export interface OrderStatusAuthorizationsArgs {
            /**
             * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
             */
            challenges?: pulumi.Input<pulumi.Input<inputs.acme.v1.OrderStatusAuthorizationsChallengesArgs>[]>;
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier?: pulumi.Input<string>;
            /**
             * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
             */
            initialState?: pulumi.Input<string>;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: pulumi.Input<string>;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard?: pulumi.Input<boolean>;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
         */
        export interface OrderStatusAuthorizationsChallengesArgs {
            /**
             * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
             */
            token: pulumi.Input<string>;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
             */
            type: pulumi.Input<string>;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
             */
            url: pulumi.Input<string>;
        }
    }
}

export namespace bitnami {
    export namespace v1alpha1 {
        /**
         * SealedSecretSpec is the specification of a SealedSecret
         */
        export interface SealedSecretSpecArgs {
            /**
             * Data is deprecated and will be removed eventually. Use per-value EncryptedData instead.
             */
            data?: pulumi.Input<string>;
            encryptedData: pulumi.Input<{[key: string]: any}>;
            /**
             * Template defines the structure of the Secret that will be created from this sealed secret.
             */
            template?: pulumi.Input<inputs.bitnami.v1alpha1.SealedSecretSpecTemplateArgs>;
        }

        /**
         * Template defines the structure of the Secret that will be created from this sealed secret.
         */
        export interface SealedSecretSpecTemplateArgs {
            /**
             * Keys that should be templated using decrypted data
             */
            data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * Used to facilitate programmatic handling of secret data.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * SealedSecretStatus is the most recently observed status of the SealedSecret.
         */
        export interface SealedSecretStatusArgs {
            /**
             * Represents the latest available observations of a sealed secret's current state.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.bitnami.v1alpha1.SealedSecretStatusConditionsArgs>[]>;
            /**
             * ObservedGeneration reflects the generation most recently observed by the sealed-secrets controller.
             */
            observedGeneration?: pulumi.Input<number>;
        }

        /**
         * SealedSecretCondition describes the state of a sealed secret at a certain point.
         */
        export interface SealedSecretStatusConditionsArgs {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * The last time this condition was updated.
             */
            lastUpdateTime?: pulumi.Input<string>;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: pulumi.Input<string>;
            /**
             * The reason for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition for a sealed secret. Valid values for "Synced": "True", "False", or "Unknown".
             */
            status: pulumi.Input<string>;
            /**
             * Type of condition for a sealed secret. Valid value: "Synced"
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Desired state of the CertificateRequest resource.
         */
        export interface CertificateRequestSpecArgs {
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
             */
            duration?: pulumi.Input<string>;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            /**
             * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
             */
            issuerRef: pulumi.Input<inputs.certmanager.v1.CertificateRequestSpecIssuerRefArgs>;
            /**
             * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
             */
            request: pulumi.Input<string>;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: pulumi.Input<string>;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: pulumi.Input<string>;
        }

        /**
         * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
         */
        export interface CertificateRequestSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically.
         */
        export interface CertificateRequestStatusArgs {
            /**
             * The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: pulumi.Input<string>;
            /**
             * The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: pulumi.Input<string>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateRequestStatusConditionsArgs>[]>;
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: pulumi.Input<string>;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the Certificate resource.
         */
        export interface CertificateSpecArgs {
            /**
             * AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.
             */
            additionalOutputFormats?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateSpecAdditionalOutputFormatsArgs>[]>;
            /**
             * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
             */
            commonName?: pulumi.Input<string>;
            /**
             * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            duration?: pulumi.Input<string>;
            /**
             * EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
             */
            encodeUsagesInRequest?: pulumi.Input<boolean>;
            /**
             * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            /**
             * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
             */
            issuerRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecIssuerRefArgs>;
            /**
             * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
             */
            keystores?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresArgs>;
            /**
             * LiteralSubject is an LDAP formatted string that represents the [X.509 Subject field](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6). Use this *instead* of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook.
             */
            literalSubject?: pulumi.Input<string>;
            /**
             * Options to control private keys used for the Certificate.
             */
            privateKey?: pulumi.Input<inputs.certmanager.v1.CertificateSpecPrivateKeyArgs>;
            /**
             * How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            renewBefore?: pulumi.Input<string>;
            /**
             * revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
             */
            secretName: pulumi.Input<string>;
            /**
             * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: pulumi.Input<inputs.certmanager.v1.CertificateSpecSecretTemplateArgs>;
            /**
             * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
             */
            subject?: pulumi.Input<inputs.certmanager.v1.CertificateSpecSubjectArgs>;
            /**
             * URIs is a list of URI subjectAltNames to be set on the Certificate.
             */
            uris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormatsArgs {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: pulumi.Input<string>;
        }

        /**
         * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
         */
        export interface CertificateSpecIssuerRefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresArgs {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresJksArgs>;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresPkcs12Args>;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJksArgs {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: pulumi.Input<boolean>;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresJksPasswordSecretRefArgs>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12Args {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance. A file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: pulumi.Input<boolean>;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRefArgs>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Options to control private keys used for the Certificate.
         */
        export interface CertificateSpecPrivateKeyArgs {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: pulumi.Input<string>;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: pulumi.Input<string>;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
             */
            rotationPolicy?: pulumi.Input<string>;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: pulumi.Input<number>;
        }

        /**
         * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplateArgs {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
         */
        export interface CertificateSpecSubjectArgs {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Cities to be used on the Certificate.
             */
            localities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: pulumi.Input<string>;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status of the Certificate. This is set and managed automatically.
         */
        export interface CertificateStatusArgs {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateStatusConditionsArgs>[]>;
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: pulumi.Input<number>;
            /**
             * LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
             */
            lastFailureTime?: pulumi.Input<string>;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: pulumi.Input<string>;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: pulumi.Input<string>;
            /**
             * The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
             */
            notBefore?: pulumi.Input<string>;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: pulumi.Input<string>;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: pulumi.Input<number>;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpecArgs {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeArgs>;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecCaArgs>;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecSelfSignedArgs>;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultArgs>;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiArgs>;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcmeArgs {
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: pulumi.Input<boolean>;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: pulumi.Input<string>;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: pulumi.Input<boolean>;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingArgs>;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: pulumi.Input<string>;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmePrivateKeySecretRefArgs>;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: pulumi.Input<string>;
            /**
             * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
             */
            skipTLSVerify?: pulumi.Input<boolean>;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversArgs>[]>;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingArgs {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: pulumi.Input<string>;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: pulumi.Input<string>;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs>;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolversArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * clusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsProvideDefaults sets the appropriate defaults for ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs
         */
        export function clusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsProvideDefaults(val: ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs): ClusterIssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressArgs {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCaArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSignedArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVaultArgs {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthArgs>;
            /**
             * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: pulumi.Input<string>;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: pulumi.Input<string>;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthArgs {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleArgs>;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesArgs>;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokenSecretRefArgs>;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleArgs {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: pulumi.Input<string>;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: pulumi.Input<string>;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs>;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesArgs {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: pulumi.Input<string>;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: pulumi.Input<string>;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs>;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafiArgs {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiCloudArgs>;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiTppArgs>;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: pulumi.Input<string>;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloudArgs {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs>;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: pulumi.Input<string>;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTppArgs {
            /**
             * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsRefArgs>;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: pulumi.Input<string>;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRefArgs {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatusArgs {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerStatusAcmeArgs>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerStatusConditionsArgs>[]>;
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcmeArgs {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: pulumi.Input<string>;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpecArgs {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeArgs>;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: pulumi.Input<inputs.certmanager.v1.IssuerSpecCaArgs>;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: pulumi.Input<inputs.certmanager.v1.IssuerSpecSelfSignedArgs>;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultArgs>;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiArgs>;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcmeArgs {
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: pulumi.Input<boolean>;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: pulumi.Input<string>;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: pulumi.Input<boolean>;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingArgs>;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: pulumi.Input<string>;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmePrivateKeySecretRefArgs>;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: pulumi.Input<string>;
            /**
             * Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
             */
            skipTLSVerify?: pulumi.Input<boolean>;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversArgs>[]>;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBindingArgs {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: pulumi.Input<string>;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: pulumi.Input<string>;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs>;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolversArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNSArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNSArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface IssuerSpecAcmeSolversDns01AzureDNSManagedIdentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccessKeyIDSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentRef identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid. 
         *  References to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs {
            /**
             * Group is the group of the referent. 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) Support: Custom (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified (or empty string), this refers to the local namespace of the Route. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * issuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsProvideDefaults sets the appropriate defaults for IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs
         */
        export function issuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgsProvideDefaults(val: IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs): IssuerSpecAcmeSolversHttp01GatewayHTTPRouteParentRefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressArgs {
            /**
             * The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCaArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSignedArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVaultArgs {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthArgs>;
            /**
             * PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: pulumi.Input<string>;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: pulumi.Input<string>;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuthArgs {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthAppRoleArgs>;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesArgs>;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthTokenSecretRefArgs>;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRoleArgs {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: pulumi.Input<string>;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: pulumi.Input<string>;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthAppRoleSecretRefArgs>;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetesArgs {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: pulumi.Input<string>;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: pulumi.Input<string>;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretRefArgs>;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafiArgs {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiCloudArgs>;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiTppArgs>;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: pulumi.Input<string>;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloudArgs {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiCloudApiTokenSecretRefArgs>;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: pulumi.Input<string>;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTppArgs {
            /**
             * CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiTppCredentialsRefArgs>;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: pulumi.Input<string>;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsRefArgs {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatusArgs {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.IssuerStatusAcmeArgs>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerStatusConditionsArgs>[]>;
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcmeArgs {
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: pulumi.Input<string>;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace deviceplugin {
    export namespace v1 {
        /**
         * DlbDevicePluginSpec defines the desired state of DlbDevicePlugin.
         */
        export interface DlbDevicePluginSpecArgs {
            /**
             * Image is a container image with DLB device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * DlbDevicePluginStatus defines the observed state of DlbDevicePlugin.
         */
        export interface DlbDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.DlbDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface DlbDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * DsaDevicePluginSpec defines the desired state of DsaDevicePlugin.
         */
        export interface DsaDevicePluginSpecArgs {
            /**
             * Image is a container image with DSA device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * InitImage is an initcontainer image to configure and enable DSA devices and workqueues with idxd-config (accel-config) utility
             */
            initImage?: pulumi.Input<string>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ProvisioningConfig is a ConfigMap used to pass the DSA devices and workqueues configuration into idxd-config initcontainer.
             */
            provisioningConfig?: pulumi.Input<string>;
            /**
             * SharedDevNum is a number of containers that can share the same DSA device.
             */
            sharedDevNum?: pulumi.Input<number>;
        }

        /**
         * DsaDevicePluginStatus defines the observed state of DsaDevicePlugin.
         */
        export interface DsaDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.DsaDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface DsaDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * FpgaDevicePluginSpec defines the desired state of FpgaDevicePlugin.
         */
        export interface FpgaDevicePluginSpecArgs {
            /**
             * Image is a container image with FPGA device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * InitImage is a container image with tools used to initialize the host before starting FPGA workloads on it.
             */
            initImage?: pulumi.Input<string>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * Mode is a mode of the plugin's operation.
             */
            mode?: pulumi.Input<string>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * FpgaDevicePluginStatus defines the observed state of FpgaDevicePlugin.
         */
        export interface FpgaDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.FpgaDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface FpgaDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * GpuDevicePluginSpec defines the desired state of GpuDevicePlugin.
         */
        export interface GpuDevicePluginSpecArgs {
            /**
             * EnableMonitoring enables the monitoring resource ('i915_monitoring') which gives access to all GPU devices on given node.
             */
            enableMonitoring?: pulumi.Input<boolean>;
            /**
             * Image is a container image with GPU device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * InitImage is a container image with tools (e.g., GPU NFD source hook) installed on each node.
             */
            initImage?: pulumi.Input<string>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PreferredAllocationPolicy sets the mode of allocating GPU devices on a node. See documentation for detailed description of the policies. Only valid when SharedDevNum > 1 is set.
             */
            preferredAllocationPolicy?: pulumi.Input<string>;
            /**
             * ResourceManager handles the fractional resource management for multi-GPU nodes
             */
            resourceManager?: pulumi.Input<boolean>;
            /**
             * SharedDevNum is a number of containers that can share the same GPU device.
             */
            sharedDevNum?: pulumi.Input<number>;
        }

        /**
         * GpuDevicePluginStatus defines the observed state of GpuDevicePlugin. TODO(rojkov): consider code deduplication with QatDevicePluginStatus.
         */
        export interface GpuDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.GpuDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface GpuDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * IaaDevicePluginSpec defines the desired state of IaaDevicePlugin.
         */
        export interface IaaDevicePluginSpecArgs {
            /**
             * Image is a container image with IAA device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * InitImage is an initcontainer image to configure and enable IAA devices and workqueues with accel-config utility
             */
            initImage?: pulumi.Input<string>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ProvisioningConfig is a ConfigMap used to pass the IAA configuration into idxd initcontainer.
             */
            provisioningConfig?: pulumi.Input<string>;
            /**
             * SharedDevNum is a number of containers that can share the same IAA device.
             */
            sharedDevNum?: pulumi.Input<number>;
        }

        /**
         * IaaDevicePluginStatus defines the observed state of IaaDevicePlugin.
         */
        export interface IaaDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.IaaDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface IaaDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * QatDevicePluginSpec defines the desired state of QatDevicePlugin.
         */
        export interface QatDevicePluginSpecArgs {
            /**
             * DpdkDriver is a DPDK device driver for configuring the QAT device.
             */
            dpdkDriver?: pulumi.Input<string>;
            /**
             * Image is a container image with QAT device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * InitImage is a container image with a script that initialize devices.
             */
            initImage?: pulumi.Input<string>;
            /**
             * KernelVfDrivers is a list of VF device drivers for the QuickAssist devices in the system.
             */
            kernelVfDrivers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * MaxNumDevices is a maximum number of QAT devices to be provided to the QuickAssist device plugin
             */
            maxNumDevices?: pulumi.Input<number>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PreferredAllocationPolicy sets the mode of allocating QAT devices on a node. See documentation for detailed description of the policies.
             */
            preferredAllocationPolicy?: pulumi.Input<string>;
            /**
             * ProvisioningConfig is a ConfigMap used to pass the configuration of QAT devices into qat initcontainer.
             */
            provisioningConfig?: pulumi.Input<string>;
        }

        /**
         * QatDevicePluginStatus defines the observed state of QatDevicePlugin. TODO(rojkov): consider code deduplication with GpuDevicePluginStatus.
         */
        export interface QatDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.QatDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface QatDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * SgxDevicePluginSpec defines the desired state of SgxDevicePlugin.
         */
        export interface SgxDevicePluginSpecArgs {
            /**
             * EnclaveLimit is a number of containers that can share the same SGX enclave device.
             */
            enclaveLimit?: pulumi.Input<number>;
            /**
             * Image is a container image with SGX device plugin executable.
             */
            image?: pulumi.Input<string>;
            /**
             * InitImage is a container image with tools (e.g., SGX NFD source hook) installed on each node.
             */
            initImage?: pulumi.Input<string>;
            /**
             * LogLevel sets the plugin's log level.
             */
            logLevel?: pulumi.Input<number>;
            /**
             * NodeSelector provides a simple way to constrain device plugin pods to nodes with particular labels.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ProvisionLimit is a number of containers that can share the same SGX provision device.
             */
            provisionLimit?: pulumi.Input<number>;
        }

        /**
         * SgxDevicePluginStatus defines the observed state of SgxDevicePlugin.
         */
        export interface SgxDevicePluginStatusArgs {
            /**
             * ControlledDaemoSet references the DaemonSet controlled by the operator.
             */
            controlledDaemonSet?: pulumi.Input<inputs.deviceplugin.v1.SgxDevicePluginStatusControlledDaemonSetArgs>;
            /**
             * The total number of nodes that should be running the device plugin pod (including nodes correctly running the device plugin pod).
             */
            desiredNumberScheduled: pulumi.Input<number>;
            /**
             * The list of Node names where the device plugin pods are running.
             */
            nodeNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The number of nodes that should be running the device plugin pod and have one or more of the device plugin pod running and ready.
             */
            numberReady: pulumi.Input<number>;
        }

        /**
         * ControlledDaemoSet references the DaemonSet controlled by the operator.
         */
        export interface SgxDevicePluginStatusControlledDaemonSetArgs {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }
    }
}

export namespace fpga {
    export namespace v2 {
        /**
         * AcceleratorFunctionSpec contains actual specs for AcceleratorFunction.
         */
        export interface AcceleratorFunctionSpecArgs {
            afuId: pulumi.Input<string>;
            interfaceId: pulumi.Input<string>;
            mode: pulumi.Input<string>;
        }

        /**
         * FpgaRegionSpec contains actual specs for FpgaRegion.
         */
        export interface FpgaRegionSpecArgs {
            interfaceId: pulumi.Input<string>;
        }

    }
}

export namespace helm {
    export namespace v1 {
        export interface HelmChartConfigSpecArgs {
            failurePolicy?: pulumi.Input<string>;
            valuesContent?: pulumi.Input<string>;
        }

        export interface HelmChartSpecArgs {
            authPassCredentials?: pulumi.Input<boolean>;
            authSecret?: pulumi.Input<inputs.helm.v1.HelmChartSpecAuthSecretArgs>;
            bootstrap?: pulumi.Input<boolean>;
            chart?: pulumi.Input<string>;
            chartContent?: pulumi.Input<string>;
            createNamespace?: pulumi.Input<boolean>;
            dockerRegistrySecret?: pulumi.Input<inputs.helm.v1.HelmChartSpecDockerRegistrySecretArgs>;
            failurePolicy?: pulumi.Input<string>;
            helmVersion?: pulumi.Input<string>;
            jobImage?: pulumi.Input<string>;
            repo?: pulumi.Input<string>;
            repoCA?: pulumi.Input<string>;
            repoCAConfigMap?: pulumi.Input<inputs.helm.v1.HelmChartSpecRepoCAConfigMapArgs>;
            set?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            targetNamespace?: pulumi.Input<string>;
            timeout?: pulumi.Input<string>;
            valuesContent?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

        export interface HelmChartSpecAuthSecretArgs {
            name?: pulumi.Input<string>;
        }

        export interface HelmChartSpecDockerRegistrySecretArgs {
            name?: pulumi.Input<string>;
        }

        export interface HelmChartSpecRepoCAConfigMapArgs {
            name?: pulumi.Input<string>;
        }

        export interface HelmChartStatusArgs {
            jobName?: pulumi.Input<string>;
        }
    }
}

export namespace k3s {
    export namespace v1 {
        export interface AddonSpecArgs {
            checksum?: pulumi.Input<string>;
            source?: pulumi.Input<string>;
        }
    }
}

export namespace nfd {
    export namespace v1alpha1 {
        /**
         * NodeFeatureRuleSpec describes a NodeFeatureRule.
         */
        export interface NodeFeatureRuleSpecArgs {
            /**
             * Rules is a list of node customization rules.
             */
            rules: pulumi.Input<pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesArgs>[]>;
        }

        /**
         * Rule defines a rule for node customization such as labeling.
         */
        export interface NodeFeatureRuleSpecRulesArgs {
            /**
             * ExtendedResources to create if the rule matches.
             */
            extendedResources?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels to create if the rule matches.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * LabelsTemplate specifies a template to expand for dynamically generating multiple labels. Data (after template expansion) must be keys with an optional value (<key>[=<value>]) separated by newlines.
             */
            labelsTemplate?: pulumi.Input<string>;
            /**
             * MatchAny specifies a list of matchers one of which must match.
             */
            matchAny?: pulumi.Input<pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyArgs>[]>;
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures?: pulumi.Input<pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchFeaturesArgs>[]>;
            /**
             * Name of the rule.
             */
            name: pulumi.Input<string>;
            /**
             * Taints to create if the rule matches.
             */
            taints?: pulumi.Input<pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesTaintsArgs>[]>;
            /**
             * Vars is the variables to store if the rule matches. Variables do not directly inflict any changes in the node object. However, they can be referenced from other rules enabling more complex rule hierarchies, without exposing intermediary output values as labels.
             */
            vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * VarsTemplate specifies a template to expand for dynamically generating multiple variables. Data (after template expansion) must be keys with an optional value (<key>[=<value>]) separated by newlines.
             */
            varsTemplate?: pulumi.Input<string>;
        }

        /**
         * MatchAnyElem specifies one sub-matcher of MatchAny.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyArgs {
            /**
             * MatchFeatures specifies a set of matcher terms all of which must match.
             */
            matchFeatures: pulumi.Input<pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesArgs>[]>;
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All requirements (specified as MatchExpressions) are evaluated against each element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesArgs {
            feature: pulumi.Input<string>;
            /**
             * MatchExpressionSet contains a set of MatchExpressions, each of which is evaluated against a set of input values.
             */
            matchExpressions: pulumi.Input<{[key: string]: pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesMatchExpressionsArgs>}>;
        }

        /**
         * MatchExpression specifies an expression to evaluate against a set of input values. It contains an operator that is applied when matching the input and an array of values that the operator evaluates the input against. 
         *  NB: CreateMatchExpression or MustCreateMatchExpression() should be used for creating new instances. 
         *  NB: Validate() must be called if Op or Value fields are modified or if a new instance is created from scratch without using the helper functions.
         */
        export interface NodeFeatureRuleSpecRulesMatchAnyMatchFeaturesMatchExpressionsArgs {
            /**
             * Op is the operator to be applied.
             */
            op: pulumi.Input<string>;
            /**
             * Value is the list of values that the operand evaluates the input against. Value should be empty if the operator is Exists, DoesNotExist, IsTrue or IsFalse. Value should contain exactly one element if the operator is Gt or Lt and exactly two elements if the operator is GtLt. In other cases Value should contain at least one element.
             */
            value?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * FeatureMatcherTerm defines requirements against one feature set. All requirements (specified as MatchExpressions) are evaluated against each element in the feature set.
         */
        export interface NodeFeatureRuleSpecRulesMatchFeaturesArgs {
            feature: pulumi.Input<string>;
            /**
             * MatchExpressionSet contains a set of MatchExpressions, each of which is evaluated against a set of input values.
             */
            matchExpressions: pulumi.Input<{[key: string]: pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureRuleSpecRulesMatchFeaturesMatchExpressionsArgs>}>;
        }

        /**
         * MatchExpression specifies an expression to evaluate against a set of input values. It contains an operator that is applied when matching the input and an array of values that the operator evaluates the input against. 
         *  NB: CreateMatchExpression or MustCreateMatchExpression() should be used for creating new instances. 
         *  NB: Validate() must be called if Op or Value fields are modified or if a new instance is created from scratch without using the helper functions.
         */
        export interface NodeFeatureRuleSpecRulesMatchFeaturesMatchExpressionsArgs {
            /**
             * Op is the operator to be applied.
             */
            op: pulumi.Input<string>;
            /**
             * Value is the list of values that the operand evaluates the input against. Value should be empty if the operator is Exists, DoesNotExist, IsTrue or IsFalse. Value should contain exactly one element if the operator is Gt or Lt and exactly two elements if the operator is GtLt. In other cases Value should contain at least one element.
             */
            value?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
         */
        export interface NodeFeatureRuleSpecRulesTaintsArgs {
            /**
             * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect: pulumi.Input<string>;
            /**
             * Required. The taint key to be applied to a node.
             */
            key: pulumi.Input<string>;
            /**
             * TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
             */
            timeAdded?: pulumi.Input<string>;
            /**
             * The taint value corresponding to the taint key.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * NodeFeatureSpec describes a NodeFeature object.
         */
        export interface NodeFeatureSpecArgs {
            /**
             * Features is the full "raw" features data that has been discovered.
             */
            features?: pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureSpecFeaturesArgs>;
            /**
             * Labels is the set of node labels that are requested to be created.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Features is the full "raw" features data that has been discovered.
         */
        export interface NodeFeatureSpecFeaturesArgs {
            /**
             * Attributes contains all the attribute-type features of the node.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureSpecFeaturesAttributesArgs>}>;
            /**
             * Flags contains all the flag-type features of the node.
             */
            flags?: pulumi.Input<{[key: string]: pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureSpecFeaturesFlagsArgs>}>;
            /**
             * Instances contains all the instance-type features of the node.
             */
            instances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureSpecFeaturesInstancesArgs>}>;
        }

        /**
         * AttributeFeatureSet is a set of features having string value.
         */
        export interface NodeFeatureSpecFeaturesAttributesArgs {
            elements: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * FlagFeatureSet is a set of simple features only containing names without values.
         */
        export interface NodeFeatureSpecFeaturesFlagsArgs {
            elements: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
        }

        /**
         * InstanceFeatureSet is a set of features each of which is an instance having multiple attributes.
         */
        export interface NodeFeatureSpecFeaturesInstancesArgs {
            elements: pulumi.Input<pulumi.Input<inputs.nfd.v1alpha1.NodeFeatureSpecFeaturesInstancesElementsArgs>[]>;
        }

        /**
         * InstanceFeature represents one instance of a complex features, e.g. a device.
         */
        export interface NodeFeatureSpecFeaturesInstancesElementsArgs {
            attributes: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

    }
}

export namespace postgresql {
    export namespace v1 {
        /**
         * Specification of the desired behavior of the backup. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface BackupSpecArgs {
            /**
             * The cluster to backup
             */
            cluster?: pulumi.Input<inputs.postgresql.v1.BackupSpecClusterArgs>;
            /**
             * The policy to decide which instance should perform this backup. If empty, it defaults to `cluster.spec.backup.target`. Available options are empty string, `primary` and `prefer-standby`. `primary` to have backups run always on primary instances, `prefer-standby` to have backups run preferably on the most updated standby, if available.
             */
            target?: pulumi.Input<string>;
        }

        /**
         * The cluster to backup
         */
        export interface BackupSpecClusterArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Most recently observed status of the backup. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface BackupStatusArgs {
            /**
             * The credentials to use to upload data to Azure Blob Storage
             */
            azureCredentials?: pulumi.Input<inputs.postgresql.v1.BackupStatusAzureCredentialsArgs>;
            /**
             * The ID of the Barman backup
             */
            backupId?: pulumi.Input<string>;
            /**
             * The Name of the Barman backup
             */
            backupName?: pulumi.Input<string>;
            /**
             * The starting xlog
             */
            beginLSN?: pulumi.Input<string>;
            /**
             * The starting WAL
             */
            beginWal?: pulumi.Input<string>;
            /**
             * The backup command output in case of error
             */
            commandError?: pulumi.Input<string>;
            /**
             * Unused. Retained for compatibility with old versions.
             */
            commandOutput?: pulumi.Input<string>;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder) this path, with different destination folders, will be used for WALs and for data. This may not be populated in case of errors.
             */
            destinationPath?: pulumi.Input<string>;
            /**
             * Encryption method required to S3 API
             */
            encryption?: pulumi.Input<string>;
            /**
             * The ending xlog
             */
            endLSN?: pulumi.Input<string>;
            /**
             * The ending WAL
             */
            endWal?: pulumi.Input<string>;
            /**
             * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive.
             */
            endpointCA?: pulumi.Input<inputs.postgresql.v1.BackupStatusEndpointCAArgs>;
            /**
             * Endpoint to be used to upload data to the cloud, overriding the automatic endpoint discovery
             */
            endpointURL?: pulumi.Input<string>;
            /**
             * The detected error
             */
            error?: pulumi.Input<string>;
            /**
             * The credentials to use to upload data to Google Cloud Storage
             */
            googleCredentials?: pulumi.Input<inputs.postgresql.v1.BackupStatusGoogleCredentialsArgs>;
            /**
             * Information to identify the instance where the backup has been taken from
             */
            instanceID?: pulumi.Input<inputs.postgresql.v1.BackupStatusInstanceIDArgs>;
            /**
             * The last backup status
             */
            phase?: pulumi.Input<string>;
            /**
             * The credentials to use to upload data to S3
             */
            s3Credentials?: pulumi.Input<inputs.postgresql.v1.BackupStatusS3CredentialsArgs>;
            /**
             * The server name on S3, the cluster name is used if this parameter is omitted
             */
            serverName?: pulumi.Input<string>;
            /**
             * When the backup was started
             */
            startedAt?: pulumi.Input<string>;
            /**
             * When the backup was terminated
             */
            stoppedAt?: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface BackupStatusAzureCredentialsArgs {
            /**
             * The connection string to be used
             */
            connectionString?: pulumi.Input<inputs.postgresql.v1.BackupStatusAzureCredentialsConnectionStringArgs>;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD?: pulumi.Input<boolean>;
            /**
             * The storage account where to upload data
             */
            storageAccount?: pulumi.Input<inputs.postgresql.v1.BackupStatusAzureCredentialsStorageAccountArgs>;
            /**
             * The storage account key to be used in conjunction with the storage account name
             */
            storageKey?: pulumi.Input<inputs.postgresql.v1.BackupStatusAzureCredentialsStorageKeyArgs>;
            /**
             * A shared-access-signature to be used in conjunction with the storage account name
             */
            storageSasToken?: pulumi.Input<inputs.postgresql.v1.BackupStatusAzureCredentialsStorageSasTokenArgs>;
        }

        /**
         * The connection string to be used
         */
        export interface BackupStatusAzureCredentialsConnectionStringArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The storage account where to upload data
         */
        export interface BackupStatusAzureCredentialsStorageAccountArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The storage account key to be used in conjunction with the storage account name
         */
        export interface BackupStatusAzureCredentialsStorageKeyArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * A shared-access-signature to be used in conjunction with the storage account name
         */
        export interface BackupStatusAzureCredentialsStorageSasTokenArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive.
         */
        export interface BackupStatusEndpointCAArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface BackupStatusGoogleCredentialsArgs {
            /**
             * The secret containing the Google Cloud Storage JSON file with the credentials
             */
            applicationCredentials?: pulumi.Input<inputs.postgresql.v1.BackupStatusGoogleCredentialsApplicationCredentialsArgs>;
            /**
             * If set to true, will presume that it's running inside a GKE environment, default to false.
             */
            gkeEnvironment?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface BackupStatusGoogleCredentialsApplicationCredentialsArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Information to identify the instance where the backup has been taken from
         */
        export interface BackupStatusInstanceIDArgs {
            /**
             * The container ID
             */
            ContainerID?: pulumi.Input<string>;
            /**
             * The pod name
             */
            podName?: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface BackupStatusS3CredentialsArgs {
            /**
             * The reference to the access key id
             */
            accessKeyId?: pulumi.Input<inputs.postgresql.v1.BackupStatusS3CredentialsAccessKeyIdArgs>;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole?: pulumi.Input<boolean>;
            /**
             * The reference to the secret containing the region name
             */
            region?: pulumi.Input<inputs.postgresql.v1.BackupStatusS3CredentialsRegionArgs>;
            /**
             * The reference to the secret access key
             */
            secretAccessKey?: pulumi.Input<inputs.postgresql.v1.BackupStatusS3CredentialsSecretAccessKeyArgs>;
            /**
             * The references to the session key
             */
            sessionToken?: pulumi.Input<inputs.postgresql.v1.BackupStatusS3CredentialsSessionTokenArgs>;
        }

        /**
         * The reference to the access key id
         */
        export interface BackupStatusS3CredentialsAccessKeyIdArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface BackupStatusS3CredentialsRegionArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The reference to the secret access key
         */
        export interface BackupStatusS3CredentialsSecretAccessKeyArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The references to the session key
         */
        export interface BackupStatusS3CredentialsSessionTokenArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the cluster. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterSpecArgs {
            /**
             * Affinity/Anti-affinity rules for Pods
             */
            affinity?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityArgs>;
            /**
             * The configuration to be used for backups
             */
            backup?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupArgs>;
            /**
             * Instructions to bootstrap this cluster
             */
            bootstrap?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapArgs>;
            /**
             * The configuration for the CA and related certificates
             */
            certificates?: pulumi.Input<inputs.postgresql.v1.ClusterSpecCertificatesArgs>;
            /**
             * Description of this PostgreSQL cluster
             */
            description?: pulumi.Input<string>;
            /**
             * When this option is enabled, the operator will use the `SuperuserSecret` to update the `postgres` user password (if the secret is not present, the operator will automatically create one). When this option is disabled, the operator will ignore the `SuperuserSecret` content, delete it when automatically created, and then blank the password of the `postgres` user by setting it to `NULL`. Enabled by default.
             */
            enableSuperuserAccess?: pulumi.Input<boolean>;
            /**
             * Env follows the Env format to pass environment variables to the pods created in the cluster
             */
            env?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvArgs>[]>;
            /**
             * EnvFrom follows the EnvFrom format to pass environment variables sources to the pods to be used by Env
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvFromArgs>[]>;
            /**
             * The list of external clusters which are used in the configuration
             */
            externalClusters?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersArgs>[]>;
            /**
             * The amount of time (in seconds) to wait before triggering a failover after the primary PostgreSQL instance in the cluster was detected to be unhealthy
             */
            failoverDelay?: pulumi.Input<number>;
            /**
             * Name of the container image, supporting both tags (`<image>:<tag>`) and digests for deterministic and repeatable deployments (`<image>:<tag>@sha256:<digestValue>`)
             */
            imageName?: pulumi.Input<string>;
            /**
             * Image pull policy. One of `Always`, `Never` or `IfNotPresent`. If not defined, it defaults to `IfNotPresent`. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * The list of pull secrets to be used to pull the images
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecImagePullSecretsArgs>[]>;
            /**
             * Metadata that will be inherited by all objects related to the Cluster
             */
            inheritedMetadata?: pulumi.Input<inputs.postgresql.v1.ClusterSpecInheritedMetadataArgs>;
            /**
             * Number of instances required in the cluster
             */
            instances: pulumi.Input<number>;
            /**
             * The instances' log level, one of the following values: error, warning, info (default), debug, trace
             */
            logLevel?: pulumi.Input<string>;
            /**
             * The configuration that is used by the portions of PostgreSQL that are managed by the instance manager
             */
            managed?: pulumi.Input<inputs.postgresql.v1.ClusterSpecManagedArgs>;
            /**
             * The target value for the synchronous replication quorum, that can be decreased if the number of ready standbys is lower than this. Undefined or 0 disable synchronous replication.
             */
            maxSyncReplicas?: pulumi.Input<number>;
            /**
             * Minimum number of instances required in synchronous replication with the primary. Undefined or 0 allow writes to complete when no standby is available.
             */
            minSyncReplicas?: pulumi.Input<number>;
            /**
             * The configuration of the monitoring infrastructure of this cluster
             */
            monitoring?: pulumi.Input<inputs.postgresql.v1.ClusterSpecMonitoringArgs>;
            /**
             * Define a maintenance window for the Kubernetes nodes
             */
            nodeMaintenanceWindow?: pulumi.Input<inputs.postgresql.v1.ClusterSpecNodeMaintenanceWindowArgs>;
            /**
             * The GID of the `postgres` user inside the image, defaults to `26`
             */
            postgresGID?: pulumi.Input<number>;
            /**
             * The UID of the `postgres` user inside the image, defaults to `26`
             */
            postgresUID?: pulumi.Input<number>;
            /**
             * Configuration of the PostgreSQL server
             */
            postgresql?: pulumi.Input<inputs.postgresql.v1.ClusterSpecPostgresqlArgs>;
            /**
             * Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been successfully updated: it can be with a switchover (`switchover`) or in-place (`restart` - default)
             */
            primaryUpdateMethod?: pulumi.Input<string>;
            /**
             * Deployment strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been successfully updated: it can be automated (`unsupervised` - default) or manual (`supervised`)
             */
            primaryUpdateStrategy?: pulumi.Input<string>;
            /**
             * Name of the priority class which will be used in every generated Pod, if the PriorityClass specified does not exist, the pod will not be able to schedule.  Please refer to https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass for more information
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Template to be used to define projected volumes, projected volumes will be mounted under `/projected` base folder
             */
            projectedVolumeTemplate?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateArgs>;
            /**
             * Replica cluster configuration
             */
            replica?: pulumi.Input<inputs.postgresql.v1.ClusterSpecReplicaArgs>;
            /**
             * Replication slots management configuration
             */
            replicationSlots?: pulumi.Input<inputs.postgresql.v1.ClusterSpecReplicationSlotsArgs>;
            /**
             * Resources requirements of every generated Pod. Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
             */
            resources?: pulumi.Input<inputs.postgresql.v1.ClusterSpecResourcesArgs>;
            /**
             * If specified, the pod will be dispatched by specified Kubernetes scheduler. If not specified, the pod will be dispatched by the default scheduler. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * The SeccompProfile applied to every Pod and Container. Defaults to: `RuntimeDefault`
             */
            seccompProfile?: pulumi.Input<inputs.postgresql.v1.ClusterSpecSeccompProfileArgs>;
            /**
             * Configure the generation of the service account
             */
            serviceAccountTemplate?: pulumi.Input<inputs.postgresql.v1.ClusterSpecServiceAccountTemplateArgs>;
            /**
             * The time in seconds that is allowed for a PostgreSQL instance to successfully start up (default 30)
             */
            startDelay?: pulumi.Input<number>;
            /**
             * The time in seconds that is allowed for a PostgreSQL instance to gracefully shutdown (default 30)
             */
            stopDelay?: pulumi.Input<number>;
            /**
             * Configuration of the storage of the instances
             */
            storage?: pulumi.Input<inputs.postgresql.v1.ClusterSpecStorageArgs>;
            /**
             * The secret containing the superuser password. If not defined a new secret will be created with a randomly generated password
             */
            superuserSecret?: pulumi.Input<inputs.postgresql.v1.ClusterSpecSuperuserSecretArgs>;
            /**
             * The time in seconds that is allowed for a primary PostgreSQL instance to gracefully shutdown during a switchover. Default value is 40000000, greater than one year in seconds, big enough to simulate an infinite delay
             */
            switchoverDelay?: pulumi.Input<number>;
            /**
             * TopologySpreadConstraints specifies how to spread matching pods among the given topology. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
             */
            walStorage?: pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStorageArgs>;
        }
        /**
         * clusterSpecArgsProvideDefaults sets the appropriate defaults for ClusterSpecArgs
         */
        export function clusterSpecArgsProvideDefaults(val: ClusterSpecArgs): ClusterSpecArgs {
            return {
                ...val,
                backup: (val.backup ? pulumi.output(val.backup).apply(inputs.postgresql.v1.clusterSpecBackupArgsProvideDefaults) : undefined),
                bootstrap: (val.bootstrap ? pulumi.output(val.bootstrap).apply(inputs.postgresql.v1.clusterSpecBootstrapArgsProvideDefaults) : undefined),
                enableSuperuserAccess: (val.enableSuperuserAccess) ?? true,
                failoverDelay: (val.failoverDelay) ?? 0,
                instances: (val.instances) ?? 1,
                logLevel: (val.logLevel) ?? "info",
                maxSyncReplicas: (val.maxSyncReplicas) ?? 0,
                minSyncReplicas: (val.minSyncReplicas) ?? 0,
                monitoring: (val.monitoring ? pulumi.output(val.monitoring).apply(inputs.postgresql.v1.clusterSpecMonitoringArgsProvideDefaults) : undefined),
                nodeMaintenanceWindow: (val.nodeMaintenanceWindow ? pulumi.output(val.nodeMaintenanceWindow).apply(inputs.postgresql.v1.clusterSpecNodeMaintenanceWindowArgsProvideDefaults) : undefined),
                postgresGID: (val.postgresGID) ?? 26,
                postgresUID: (val.postgresUID) ?? 26,
                primaryUpdateMethod: (val.primaryUpdateMethod) ?? "restart",
                primaryUpdateStrategy: (val.primaryUpdateStrategy) ?? "unsupervised",
                replicationSlots: (val.replicationSlots ? pulumi.output(val.replicationSlots).apply(inputs.postgresql.v1.clusterSpecReplicationSlotsArgsProvideDefaults) : undefined),
                startDelay: (val.startDelay) ?? 30,
                stopDelay: (val.stopDelay) ?? 30,
                storage: (val.storage ? pulumi.output(val.storage).apply(inputs.postgresql.v1.clusterSpecStorageArgsProvideDefaults) : undefined),
                switchoverDelay: (val.switchoverDelay) ?? 40000000,
                walStorage: (val.walStorage ? pulumi.output(val.walStorage).apply(inputs.postgresql.v1.clusterSpecWalStorageArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Affinity/Anti-affinity rules for Pods
         */
        export interface ClusterSpecAffinityArgs {
            /**
             * AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.
             */
            additionalPodAffinity?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityArgs>;
            /**
             * AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.
             */
            additionalPodAntiAffinity?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityArgs>;
            /**
             * Activates anti-affinity for the pods. The operator will define pods anti-affinity unless this field is explicitly set to false
             */
            enablePodAntiAffinity?: pulumi.Input<boolean>;
            /**
             * NodeAffinity describes node affinity scheduling rules for the pod. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
             */
            nodeAffinity?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityArgs>;
            /**
             * NodeSelector is map of key-value pairs used to define the nodes on which the pods can run. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PodAntiAffinityType allows the user to decide whether pod anti-affinity between cluster instance has to be considered a strong requirement during scheduling or not. Allowed values are: "preferred" (default if empty) or "required". Setting it to "required", could lead to instances remaining pending until new kubernetes nodes are added if all the existing nodes don't match the required pod anti-affinity rule. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
             */
            podAntiAffinityType?: pulumi.Input<string>;
            /**
             * Tolerations is a list of Tolerations that should be set for all the pods, in order to allow them to run on tainted nodes. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityTolerationsArgs>[]>;
            /**
             * TopologyKey to use for anti-affinity configuration. See k8s documentation for more info on that
             */
            topologyKey?: pulumi.Input<string>;
        }

        /**
         * AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * NodeAffinity describes node affinity scheduling rules for the pod. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
         */
        export interface ClusterSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterSpecAffinityTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * The configuration to be used for backups
         */
        export interface ClusterSpecBackupArgs {
            /**
             * The configuration for the barman-cloud tool suite
             */
            barmanObjectStore?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreArgs>;
            /**
             * RetentionPolicy is the retention policy to be used for backups and WALs (i.e. '60d'). The retention policy is expressed in the form of `XXu` where `XX` is a positive integer and `u` is in `[dwm]` - days, weeks, months.
             */
            retentionPolicy?: pulumi.Input<string>;
            /**
             * The policy to decide which instance should perform backups. Available options are empty string, which will default to `prefer-standby` policy, `primary` to have backups run always on primary instances, `prefer-standby` to have backups run preferably on the most updated standby, if available.
             */
            target?: pulumi.Input<string>;
        }
        /**
         * clusterSpecBackupArgsProvideDefaults sets the appropriate defaults for ClusterSpecBackupArgs
         */
        export function clusterSpecBackupArgsProvideDefaults(val: ClusterSpecBackupArgs): ClusterSpecBackupArgs {
            return {
                ...val,
                target: (val.target) ?? "prefer-standby",
            };
        }

        /**
         * The configuration for the barman-cloud tool suite
         */
        export interface ClusterSpecBackupBarmanObjectStoreArgs {
            /**
             * The credentials to use to upload data to Azure Blob Storage
             */
            azureCredentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsArgs>;
            /**
             * The configuration to be used to backup the data files When not defined, base backups files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
             */
            data?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreDataArgs>;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder) this path, with different destination folders, will be used for WALs and for data
             */
            destinationPath: pulumi.Input<string>;
            /**
             * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive
             */
            endpointCA?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreEndpointCAArgs>;
            /**
             * Endpoint to be used to upload data to the cloud, overriding the automatic endpoint discovery
             */
            endpointURL?: pulumi.Input<string>;
            /**
             * The credentials to use to upload data to Google Cloud Storage
             */
            googleCredentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreGoogleCredentialsArgs>;
            /**
             * HistoryTags is a list of key value pairs that will be passed to the Barman --history-tags option.
             */
            historyTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The credentials to use to upload data to S3
             */
            s3Credentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsArgs>;
            /**
             * The server name on S3, the cluster name is used if this parameter is omitted
             */
            serverName?: pulumi.Input<string>;
            /**
             * Tags is a list of key value pairs that will be passed to the Barman --tags option.
             */
            tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The configuration for the backup of the WAL stream. When not defined, WAL files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
             */
            wal?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreWalArgs>;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsArgs {
            /**
             * The connection string to be used
             */
            connectionString?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionStringArgs>;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD?: pulumi.Input<boolean>;
            /**
             * The storage account where to upload data
             */
            storageAccount?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccountArgs>;
            /**
             * The storage account key to be used in conjunction with the storage account name
             */
            storageKey?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKeyArgs>;
            /**
             * A shared-access-signature to be used in conjunction with the storage account name
             */
            storageSasToken?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasTokenArgs>;
        }

        /**
         * The connection string to be used
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionStringArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The storage account where to upload data
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccountArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The storage account key to be used in conjunction with the storage account name
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKeyArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * A shared-access-signature to be used in conjunction with the storage account name
         */
        export interface ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasTokenArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The configuration to be used to backup the data files When not defined, base backups files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecBackupBarmanObjectStoreDataArgs {
            /**
             * Compress a backup file (a tar file per tablespace) while streaming it to the object store. Available options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression?: pulumi.Input<string>;
            /**
             * Whenever to force the encryption of files (if the bucket is not already configured for that). Allowed options are empty string (use the bucket policy, default), `AES256` and `aws:kms`
             */
            encryption?: pulumi.Input<string>;
            /**
             * Control whether the I/O workload for the backup initial checkpoint will be limited, according to the `checkpoint_completion_target` setting on the PostgreSQL server. If set to true, an immediate checkpoint will be used, meaning PostgreSQL will complete the checkpoint as soon as possible. `false` by default.
             */
            immediateCheckpoint?: pulumi.Input<boolean>;
            /**
             * The number of parallel jobs to be used to upload the backup, defaults to 2
             */
            jobs?: pulumi.Input<number>;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive
         */
        export interface ClusterSpecBackupBarmanObjectStoreEndpointCAArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface ClusterSpecBackupBarmanObjectStoreGoogleCredentialsArgs {
            /**
             * The secret containing the Google Cloud Storage JSON file with the credentials
             */
            applicationCredentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentialsArgs>;
            /**
             * If set to true, will presume that it's running inside a GKE environment, default to false.
             */
            gkeEnvironment?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentialsArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsArgs {
            /**
             * The reference to the access key id
             */
            accessKeyId?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyIdArgs>;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole?: pulumi.Input<boolean>;
            /**
             * The reference to the secret containing the region name
             */
            region?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsRegionArgs>;
            /**
             * The reference to the secret access key
             */
            secretAccessKey?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKeyArgs>;
            /**
             * The references to the session key
             */
            sessionToken?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionTokenArgs>;
        }

        /**
         * The reference to the access key id
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyIdArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsRegionArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The reference to the secret access key
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKeyArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The references to the session key
         */
        export interface ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionTokenArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The configuration for the backup of the WAL stream. When not defined, WAL files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecBackupBarmanObjectStoreWalArgs {
            /**
             * Compress a WAL file before sending it to the object store. Available options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression?: pulumi.Input<string>;
            /**
             * Whenever to force the encryption of files (if the bucket is not already configured for that). Allowed options are empty string (use the bucket policy, default), `AES256` and `aws:kms`
             */
            encryption?: pulumi.Input<string>;
            /**
             * Number of WAL files to be either archived in parallel (when the PostgreSQL instance is archiving to a backup object store) or restored in parallel (when a PostgreSQL standby is fetching WAL files from a recovery object store). If not specified, WAL files will be processed one at a time. It accepts a positive integer as a value - with 1 being the minimum accepted value.
             */
            maxParallel?: pulumi.Input<number>;
        }

        /**
         * Instructions to bootstrap this cluster
         */
        export interface ClusterSpecBootstrapArgs {
            /**
             * Bootstrap the cluster via initdb
             */
            initdb?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbArgs>;
            /**
             * Bootstrap the cluster taking a physical backup of another compatible PostgreSQL instance
             */
            pg_basebackup?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapPgBasebackupArgs>;
            /**
             * Bootstrap the cluster from a backup
             */
            recovery?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryArgs>;
        }
        /**
         * clusterSpecBootstrapArgsProvideDefaults sets the appropriate defaults for ClusterSpecBootstrapArgs
         */
        export function clusterSpecBootstrapArgsProvideDefaults(val: ClusterSpecBootstrapArgs): ClusterSpecBootstrapArgs {
            return {
                ...val,
                initdb: (val.initdb ? pulumi.output(val.initdb).apply(inputs.postgresql.v1.clusterSpecBootstrapInitdbArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Bootstrap the cluster via initdb
         */
        export interface ClusterSpecBootstrapInitdbArgs {
            /**
             * Whether the `-k` option should be passed to initdb, enabling checksums on data pages (default: `false`)
             */
            dataChecksums?: pulumi.Input<boolean>;
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database?: pulumi.Input<string>;
            /**
             * The value to be passed as option `--encoding` for initdb (default:`UTF8`)
             */
            encoding?: pulumi.Input<string>;
            /**
             * Bootstraps the new cluster by importing data from an existing PostgreSQL instance using logical backup (`pg_dump` and `pg_restore`)
             */
            import?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbImportArgs>;
            /**
             * The value to be passed as option `--lc-ctype` for initdb (default:`C`)
             */
            localeCType?: pulumi.Input<string>;
            /**
             * The value to be passed as option `--lc-collate` for initdb (default:`C`)
             */
            localeCollate?: pulumi.Input<string>;
            /**
             * The list of options that must be passed to initdb when creating the cluster. Deprecated: This could lead to inconsistent configurations, please use the explicit provided parameters instead. If defined, explicit values will be ignored.
             */
            options?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name of the owner of the database in the instance to be used by applications. Defaults to the value of the `database` key.
             */
            owner?: pulumi.Input<string>;
            /**
             * List of SQL queries to be executed as a superuser in the application database right after is created - to be used with extreme care (by default empty)
             */
            postInitApplicationSQL?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * PostInitApplicationSQLRefs points references to ConfigMaps or Secrets which contain SQL files, the general implementation order to these references is from all Secrets to all ConfigMaps, and inside Secrets or ConfigMaps, the implementation order is same as the order of each array (by default empty)
             */
            postInitApplicationSQLRefs?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsArgs>;
            /**
             * List of SQL queries to be executed as a superuser immediately after the cluster has been created - to be used with extreme care (by default empty)
             */
            postInitSQL?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of SQL queries to be executed as a superuser in the `template1` after the cluster has been created - to be used with extreme care (by default empty)
             */
            postInitTemplateSQL?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
             */
            secret?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbSecretArgs>;
            /**
             * The value in megabytes (1 to 1024) to be passed to the `--wal-segsize` option for initdb (default: empty, resulting in PostgreSQL default: 16MB)
             */
            walSegmentSize?: pulumi.Input<number>;
        }
        /**
         * clusterSpecBootstrapInitdbArgsProvideDefaults sets the appropriate defaults for ClusterSpecBootstrapInitdbArgs
         */
        export function clusterSpecBootstrapInitdbArgsProvideDefaults(val: ClusterSpecBootstrapInitdbArgs): ClusterSpecBootstrapInitdbArgs {
            return {
                ...val,
                import: (val.import ? pulumi.output(val.import).apply(inputs.postgresql.v1.clusterSpecBootstrapInitdbImportArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Bootstraps the new cluster by importing data from an existing PostgreSQL instance using logical backup (`pg_dump` and `pg_restore`)
         */
        export interface ClusterSpecBootstrapInitdbImportArgs {
            /**
             * The databases to import
             */
            databases: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of SQL queries to be executed as a superuser in the application database right after is imported - to be used with extreme care (by default empty). Only available in microservice type.
             */
            postImportApplicationSQL?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The roles to import
             */
            roles?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * When set to true, only the `pre-data` and `post-data` sections of `pg_restore` are invoked, avoiding data import. Default: `false`.
             */
            schemaOnly?: pulumi.Input<boolean>;
            /**
             * The source of the import
             */
            source: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbImportSourceArgs>;
            /**
             * The import type. Can be `microservice` or `monolith`.
             */
            type: pulumi.Input<string>;
        }
        /**
         * clusterSpecBootstrapInitdbImportArgsProvideDefaults sets the appropriate defaults for ClusterSpecBootstrapInitdbImportArgs
         */
        export function clusterSpecBootstrapInitdbImportArgsProvideDefaults(val: ClusterSpecBootstrapInitdbImportArgs): ClusterSpecBootstrapInitdbImportArgs {
            return {
                ...val,
                schemaOnly: (val.schemaOnly) ?? false,
            };
        }

        /**
         * The source of the import
         */
        export interface ClusterSpecBootstrapInitdbImportSourceArgs {
            /**
             * The name of the externalCluster used for import
             */
            externalCluster: pulumi.Input<string>;
        }

        /**
         * PostInitApplicationSQLRefs points references to ConfigMaps or Secrets which contain SQL files, the general implementation order to these references is from all Secrets to all ConfigMaps, and inside Secrets or ConfigMaps, the implementation order is same as the order of each array (by default empty)
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsArgs {
            /**
             * ConfigMapRefs holds a list of references to ConfigMaps
             */
            configMapRefs?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsArgs>[]>;
            /**
             * SecretRefs holds a list of references to Secrets
             */
            secretRefs?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsArgs>[]>;
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate the key of a ConfigMap
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecretKeySelector contains enough information to let you locate the key of a Secret
         */
        export interface ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
         */
        export interface ClusterSpecBootstrapInitdbSecretArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Bootstrap the cluster taking a physical backup of another compatible PostgreSQL instance
         */
        export interface ClusterSpecBootstrapPgBasebackupArgs {
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database?: pulumi.Input<string>;
            /**
             * Name of the owner of the database in the instance to be used by applications. Defaults to the value of the `database` key.
             */
            owner?: pulumi.Input<string>;
            /**
             * Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
             */
            secret?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapPgBasebackupSecretArgs>;
            /**
             * The name of the server of which we need to take a physical backup
             */
            source: pulumi.Input<string>;
        }

        /**
         * Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
         */
        export interface ClusterSpecBootstrapPgBasebackupSecretArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Bootstrap the cluster from a backup
         */
        export interface ClusterSpecBootstrapRecoveryArgs {
            /**
             * The backup object containing the physical base backup from which to initiate the recovery procedure. Mutually exclusive with `source` and `volumeSnapshots`.
             */
            backup?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryBackupArgs>;
            /**
             * Name of the database used by the application. Default: `app`.
             */
            database?: pulumi.Input<string>;
            /**
             * Name of the owner of the database in the instance to be used by applications. Defaults to the value of the `database` key.
             */
            owner?: pulumi.Input<string>;
            /**
             * By default, the recovery process applies all the available WAL files in the archive (full recovery). However, you can also end the recovery as soon as a consistent state is reached or recover to a point-in-time (PITR) by specifying a `RecoveryTarget` object, as expected by PostgreSQL (i.e., timestamp, transaction Id, LSN, ...). More info: https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET
             */
            recoveryTarget?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryRecoveryTargetArgs>;
            /**
             * Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
             */
            secret?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoverySecretArgs>;
            /**
             * The external cluster whose backup we will restore. This is also used as the name of the folder under which the backup is stored, so it must be set to the name of the source cluster Mutually exclusive with `backup` and `volumeSnapshots`.
             */
            source?: pulumi.Input<string>;
            /**
             * The static PVC data source(s) from which to initiate the recovery procedure. Currently supporting `VolumeSnapshot` and `PersistentVolumeClaim` resources that map an existing PVC group, compatible with CloudNativePG, and taken with a cold backup copy on a fenced Postgres instance (limitation which will be removed in the future when online backup will be implemented). Mutually exclusive with `backup` and `source`.
             */
            volumeSnapshots?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsArgs>;
        }

        /**
         * The backup object containing the physical base backup from which to initiate the recovery procedure. Mutually exclusive with `source` and `volumeSnapshots`.
         */
        export interface ClusterSpecBootstrapRecoveryBackupArgs {
            /**
             * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive.
             */
            endpointCA?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryBackupEndpointCAArgs>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive.
         */
        export interface ClusterSpecBootstrapRecoveryBackupEndpointCAArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * By default, the recovery process applies all the available WAL files in the archive (full recovery). However, you can also end the recovery as soon as a consistent state is reached or recover to a point-in-time (PITR) by specifying a `RecoveryTarget` object, as expected by PostgreSQL (i.e., timestamp, transaction Id, LSN, ...). More info: https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET
         */
        export interface ClusterSpecBootstrapRecoveryRecoveryTargetArgs {
            /**
             * The ID of the backup from which to start the recovery process. If empty (default) the operator will automatically detect the backup based on targetTime or targetLSN if specified. Otherwise use the latest available backup in chronological order.
             */
            backupID?: pulumi.Input<string>;
            /**
             * Set the target to be exclusive. If omitted, defaults to false, so that in Postgres, `recovery_target_inclusive` will be true
             */
            exclusive?: pulumi.Input<boolean>;
            /**
             * End recovery as soon as a consistent state is reached
             */
            targetImmediate?: pulumi.Input<boolean>;
            /**
             * The target LSN (Log Sequence Number)
             */
            targetLSN?: pulumi.Input<string>;
            /**
             * The target name (to be previously created with `pg_create_restore_point`)
             */
            targetName?: pulumi.Input<string>;
            /**
             * The target timeline ("latest" or a positive integer)
             */
            targetTLI?: pulumi.Input<string>;
            /**
             * The target time as a timestamp in the RFC3339 standard
             */
            targetTime?: pulumi.Input<string>;
            /**
             * The target transaction ID
             */
            targetXID?: pulumi.Input<string>;
        }

        /**
         * Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
         */
        export interface ClusterSpecBootstrapRecoverySecretArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The static PVC data source(s) from which to initiate the recovery procedure. Currently supporting `VolumeSnapshot` and `PersistentVolumeClaim` resources that map an existing PVC group, compatible with CloudNativePG, and taken with a cold backup copy on a fenced Postgres instance (limitation which will be removed in the future when online backup will be implemented). Mutually exclusive with `backup` and `source`.
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsArgs {
            /**
             * Configuration of the storage of the instances
             */
            storage: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsStorageArgs>;
            /**
             * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
             */
            walStorage?: pulumi.Input<inputs.postgresql.v1.ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorageArgs>;
        }

        /**
         * Configuration of the storage of the instances
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsStorageArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
         */
        export interface ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorageArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * The configuration for the CA and related certificates
         */
        export interface ClusterSpecCertificatesArgs {
            /**
             * The secret containing the Client CA certificate. If not defined, a new secret will be created with a self-signed CA and will be used to generate all the client certificates.<br /> <br /> Contains:<br /> <br /> - `ca.crt`: CA that should be used to validate the client certificates, used as `ssl_ca_file` of all the instances.<br /> - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided, this can be omitted.<br />
             */
            clientCASecret?: pulumi.Input<string>;
            /**
             * The secret of type kubernetes.io/tls containing the client certificate to authenticate as the `streaming_replica` user. If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be created using the provided CA.
             */
            replicationTLSSecret?: pulumi.Input<string>;
            /**
             * The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
             */
            serverAltDNSNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The secret containing the Server CA certificate. If not defined, a new secret will be created with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br /> <br /> Contains:<br /> <br /> - `ca.crt`: CA that should be used to validate the server certificate, used as `sslrootcert` in client connection strings.<br /> - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided, this can be omitted.<br />
             */
            serverCASecret?: pulumi.Input<string>;
            /**
             * The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely. If not defined, ServerCASecret must provide also `ca.key` and a new secret will be created using the provided CA.
             */
            serverTLSSecret?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface ClusterSpecEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface ClusterSpecEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface ClusterSpecEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface ClusterSpecEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface ClusterSpecEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ClusterSpecEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface ClusterSpecEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface ClusterSpecEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface ClusterSpecEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * ExternalCluster represents the connection parameters to an external cluster which is used in the other sections of the configuration
         */
        export interface ClusterSpecExternalClustersArgs {
            /**
             * The configuration for the barman-cloud tool suite
             */
            barmanObjectStore?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreArgs>;
            /**
             * The list of connection parameters, such as dbname, host, username, etc
             */
            connectionParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The server name, required
             */
            name: pulumi.Input<string>;
            /**
             * The reference to the password to be used to connect to the server
             */
            password?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersPasswordArgs>;
            /**
             * The reference to an SSL certificate to be used to connect to this instance
             */
            sslCert?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersSslCertArgs>;
            /**
             * The reference to an SSL private key to be used to connect to this instance
             */
            sslKey?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersSslKeyArgs>;
            /**
             * The reference to an SSL CA public key to be used to connect to this instance
             */
            sslRootCert?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersSslRootCertArgs>;
        }

        /**
         * The configuration for the barman-cloud tool suite
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreArgs {
            /**
             * The credentials to use to upload data to Azure Blob Storage
             */
            azureCredentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsArgs>;
            /**
             * The configuration to be used to backup the data files When not defined, base backups files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
             */
            data?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreDataArgs>;
            /**
             * The path where to store the backup (i.e. s3://bucket/path/to/folder) this path, with different destination folders, will be used for WALs and for data
             */
            destinationPath: pulumi.Input<string>;
            /**
             * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive
             */
            endpointCA?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreEndpointCAArgs>;
            /**
             * Endpoint to be used to upload data to the cloud, overriding the automatic endpoint discovery
             */
            endpointURL?: pulumi.Input<string>;
            /**
             * The credentials to use to upload data to Google Cloud Storage
             */
            googleCredentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsArgs>;
            /**
             * HistoryTags is a list of key value pairs that will be passed to the Barman --history-tags option.
             */
            historyTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The credentials to use to upload data to S3
             */
            s3Credentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsArgs>;
            /**
             * The server name on S3, the cluster name is used if this parameter is omitted
             */
            serverName?: pulumi.Input<string>;
            /**
             * Tags is a list of key value pairs that will be passed to the Barman --tags option.
             */
            tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The configuration for the backup of the WAL stream. When not defined, WAL files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
             */
            wal?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreWalArgs>;
        }

        /**
         * The credentials to use to upload data to Azure Blob Storage
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsArgs {
            /**
             * The connection string to be used
             */
            connectionString?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsConnectionStringArgs>;
            /**
             * Use the Azure AD based authentication without providing explicitly the keys.
             */
            inheritFromAzureAD?: pulumi.Input<boolean>;
            /**
             * The storage account where to upload data
             */
            storageAccount?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageAccountArgs>;
            /**
             * The storage account key to be used in conjunction with the storage account name
             */
            storageKey?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageKeyArgs>;
            /**
             * A shared-access-signature to be used in conjunction with the storage account name
             */
            storageSasToken?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageSasTokenArgs>;
        }

        /**
         * The connection string to be used
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsConnectionStringArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The storage account where to upload data
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageAccountArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The storage account key to be used in conjunction with the storage account name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageKeyArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * A shared-access-signature to be used in conjunction with the storage account name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreAzureCredentialsStorageSasTokenArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The configuration to be used to backup the data files When not defined, base backups files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreDataArgs {
            /**
             * Compress a backup file (a tar file per tablespace) while streaming it to the object store. Available options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression?: pulumi.Input<string>;
            /**
             * Whenever to force the encryption of files (if the bucket is not already configured for that). Allowed options are empty string (use the bucket policy, default), `AES256` and `aws:kms`
             */
            encryption?: pulumi.Input<string>;
            /**
             * Control whether the I/O workload for the backup initial checkpoint will be limited, according to the `checkpoint_completion_target` setting on the PostgreSQL server. If set to true, an immediate checkpoint will be used, meaning PostgreSQL will complete the checkpoint as soon as possible. `false` by default.
             */
            immediateCheckpoint?: pulumi.Input<boolean>;
            /**
             * The number of parallel jobs to be used to upload the backup, defaults to 2
             */
            jobs?: pulumi.Input<number>;
        }

        /**
         * EndpointCA store the CA bundle of the barman endpoint. Useful when using self-signed certificates to avoid errors with certificate issuer and barman-cloud-wal-archive
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreEndpointCAArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to Google Cloud Storage
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsArgs {
            /**
             * The secret containing the Google Cloud Storage JSON file with the credentials
             */
            applicationCredentials?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsApplicationCredentialsArgs>;
            /**
             * If set to true, will presume that it's running inside a GKE environment, default to false.
             */
            gkeEnvironment?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the Google Cloud Storage JSON file with the credentials
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreGoogleCredentialsApplicationCredentialsArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The credentials to use to upload data to S3
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsArgs {
            /**
             * The reference to the access key id
             */
            accessKeyId?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsAccessKeyIdArgs>;
            /**
             * Use the role based authentication without providing explicitly the keys.
             */
            inheritFromIAMRole?: pulumi.Input<boolean>;
            /**
             * The reference to the secret containing the region name
             */
            region?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsRegionArgs>;
            /**
             * The reference to the secret access key
             */
            secretAccessKey?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSecretAccessKeyArgs>;
            /**
             * The references to the session key
             */
            sessionToken?: pulumi.Input<inputs.postgresql.v1.ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSessionTokenArgs>;
        }

        /**
         * The reference to the access key id
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsAccessKeyIdArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The reference to the secret containing the region name
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsRegionArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The reference to the secret access key
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSecretAccessKeyArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The references to the session key
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreS3CredentialsSessionTokenArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The configuration for the backup of the WAL stream. When not defined, WAL files will be stored uncompressed and may be unencrypted in the object store, according to the bucket default policy.
         */
        export interface ClusterSpecExternalClustersBarmanObjectStoreWalArgs {
            /**
             * Compress a WAL file before sending it to the object store. Available options are empty string (no compression, default), `gzip`, `bzip2` or `snappy`.
             */
            compression?: pulumi.Input<string>;
            /**
             * Whenever to force the encryption of files (if the bucket is not already configured for that). Allowed options are empty string (use the bucket policy, default), `AES256` and `aws:kms`
             */
            encryption?: pulumi.Input<string>;
            /**
             * Number of WAL files to be either archived in parallel (when the PostgreSQL instance is archiving to a backup object store) or restored in parallel (when a PostgreSQL standby is fetching WAL files from a recovery object store). If not specified, WAL files will be processed one at a time. It accepts a positive integer as a value - with 1 being the minimum accepted value.
             */
            maxParallel?: pulumi.Input<number>;
        }

        /**
         * The reference to the password to be used to connect to the server
         */
        export interface ClusterSpecExternalClustersPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The reference to an SSL certificate to be used to connect to this instance
         */
        export interface ClusterSpecExternalClustersSslCertArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The reference to an SSL private key to be used to connect to this instance
         */
        export interface ClusterSpecExternalClustersSslKeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The reference to an SSL CA public key to be used to connect to this instance
         */
        export interface ClusterSpecExternalClustersSslRootCertArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate a local object with a known type inside the same namespace
         */
        export interface ClusterSpecImagePullSecretsArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Metadata that will be inherited by all objects related to the Cluster
         */
        export interface ClusterSpecInheritedMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * The configuration that is used by the portions of PostgreSQL that are managed by the instance manager
         */
        export interface ClusterSpecManagedArgs {
            /**
             * Database roles managed by the `Cluster`
             */
            roles?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecManagedRolesArgs>[]>;
        }

        /**
         * RoleConfiguration is the representation, in Kubernetes, of a PostgreSQL role with the additional field Ensure specifying whether to ensure the presence or absence of the role in the database 
         *  The defaults of the CREATE ROLE command are applied Reference: https://www.postgresql.org/docs/current/sql-createrole.html
         */
        export interface ClusterSpecManagedRolesArgs {
            /**
             * Whether a role bypasses every row-level security (RLS) policy. Default is `false`.
             */
            bypassrls?: pulumi.Input<boolean>;
            /**
             * Description of the role
             */
            comment?: pulumi.Input<string>;
            /**
             * If the role can log in, this specifies how many concurrent connections the role can make. `-1` (the default) means no limit.
             */
            connectionLimit?: pulumi.Input<number>;
            /**
             * When set to `true`, the role being defined will be allowed to create new databases. Specifying `false` (default) will deny a role the ability to create databases.
             */
            createdb?: pulumi.Input<boolean>;
            /**
             * Whether the role will be permitted to create, alter, drop, comment on, change the security label for, and grant or revoke membership in other roles. Default is `false`.
             */
            createrole?: pulumi.Input<boolean>;
            /**
             * DisablePassword indicates that a role's password should be set to NULL in Postgres
             */
            disablePassword?: pulumi.Input<boolean>;
            /**
             * Ensure the role is `present` or `absent` - defaults to "present"
             */
            ensure?: pulumi.Input<string>;
            /**
             * List of one or more existing roles to which this role will be immediately added as a new member. Default empty.
             */
            inRoles?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Whether a role "inherits" the privileges of roles it is a member of. Defaults is `true`.
             */
            inherit?: pulumi.Input<boolean>;
            /**
             * Whether the role is allowed to log in. A role having the `login` attribute can be thought of as a user. Roles without this attribute are useful for managing database privileges, but are not users in the usual sense of the word. Default is `false`.
             */
            login?: pulumi.Input<boolean>;
            /**
             * Name of the role
             */
            name: pulumi.Input<string>;
            /**
             * Secret containing the password of the role (if present) If null, the password will be ignored unless DisablePassword is set
             */
            passwordSecret?: pulumi.Input<inputs.postgresql.v1.ClusterSpecManagedRolesPasswordSecretArgs>;
            /**
             * Whether a role is a replication role. A role must have this attribute (or be a superuser) in order to be able to connect to the server in replication mode (physical or logical replication) and in order to be able to create or drop replication slots. A role having the `replication` attribute is a very highly privileged role, and should only be used on roles actually used for replication. Default is `false`.
             */
            replication?: pulumi.Input<boolean>;
            /**
             * Whether the role is a `superuser` who can override all access restrictions within the database - superuser status is dangerous and should be used only when really needed. You must yourself be a superuser to create a new superuser. Defaults is `false`.
             */
            superuser?: pulumi.Input<boolean>;
            /**
             * Date and time after which the role's password is no longer valid. When omitted, the password will never expire (default).
             */
            validUntil?: pulumi.Input<string>;
        }
        /**
         * clusterSpecManagedRolesArgsProvideDefaults sets the appropriate defaults for ClusterSpecManagedRolesArgs
         */
        export function clusterSpecManagedRolesArgsProvideDefaults(val: ClusterSpecManagedRolesArgs): ClusterSpecManagedRolesArgs {
            return {
                ...val,
                connectionLimit: (val.connectionLimit) ?? -1,
                ensure: (val.ensure) ?? "present",
                inherit: (val.inherit) ?? true,
            };
        }

        /**
         * Secret containing the password of the role (if present) If null, the password will be ignored unless DisablePassword is set
         */
        export interface ClusterSpecManagedRolesPasswordSecretArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The configuration of the monitoring infrastructure of this cluster
         */
        export interface ClusterSpecMonitoringArgs {
            /**
             * The list of config maps containing the custom queries
             */
            customQueriesConfigMap?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecMonitoringCustomQueriesConfigMapArgs>[]>;
            /**
             * The list of secrets containing the custom queries
             */
            customQueriesSecret?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecMonitoringCustomQueriesSecretArgs>[]>;
            /**
             * Whether the default queries should be injected. Set it to `true` if you don't want to inject default queries into the cluster. Default: false.
             */
            disableDefaultQueries?: pulumi.Input<boolean>;
            /**
             * Enable or disable the `PodMonitor`
             */
            enablePodMonitor?: pulumi.Input<boolean>;
        }
        /**
         * clusterSpecMonitoringArgsProvideDefaults sets the appropriate defaults for ClusterSpecMonitoringArgs
         */
        export function clusterSpecMonitoringArgsProvideDefaults(val: ClusterSpecMonitoringArgs): ClusterSpecMonitoringArgs {
            return {
                ...val,
                disableDefaultQueries: (val.disableDefaultQueries) ?? false,
                enablePodMonitor: (val.enablePodMonitor) ?? false,
            };
        }

        /**
         * ConfigMapKeySelector contains enough information to let you locate the key of a ConfigMap
         */
        export interface ClusterSpecMonitoringCustomQueriesConfigMapArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecretKeySelector contains enough information to let you locate the key of a Secret
         */
        export interface ClusterSpecMonitoringCustomQueriesSecretArgs {
            /**
             * The key to select
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Define a maintenance window for the Kubernetes nodes
         */
        export interface ClusterSpecNodeMaintenanceWindowArgs {
            /**
             * Is there a node maintenance activity in progress?
             */
            inProgress: pulumi.Input<boolean>;
            /**
             * Reuse the existing PVC (wait for the node to come up again) or not (recreate it elsewhere - when `instances` >1)
             */
            reusePVC?: pulumi.Input<boolean>;
        }
        /**
         * clusterSpecNodeMaintenanceWindowArgsProvideDefaults sets the appropriate defaults for ClusterSpecNodeMaintenanceWindowArgs
         */
        export function clusterSpecNodeMaintenanceWindowArgsProvideDefaults(val: ClusterSpecNodeMaintenanceWindowArgs): ClusterSpecNodeMaintenanceWindowArgs {
            return {
                ...val,
                inProgress: (val.inProgress) ?? false,
                reusePVC: (val.reusePVC) ?? true,
            };
        }

        /**
         * Configuration of the PostgreSQL server
         */
        export interface ClusterSpecPostgresqlArgs {
            /**
             * Options to specify LDAP configuration
             */
            ldap?: pulumi.Input<inputs.postgresql.v1.ClusterSpecPostgresqlLdapArgs>;
            /**
             * PostgreSQL configuration options (postgresql.conf)
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PostgreSQL Host Based Authentication rules (lines to be appended to the pg_hba.conf file)
             */
            pg_hba?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Specifies the maximum number of seconds to wait when promoting an instance to primary. Default value is 40000000, greater than one year in seconds, big enough to simulate an infinite timeout
             */
            promotionTimeout?: pulumi.Input<number>;
            /**
             * Lists of shared preload libraries to add to the default ones
             */
            shared_preload_libraries?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Requirements to be met by sync replicas. This will affect how the "synchronous_standby_names" parameter will be set up.
             */
            syncReplicaElectionConstraint?: pulumi.Input<inputs.postgresql.v1.ClusterSpecPostgresqlSyncReplicaElectionConstraintArgs>;
        }

        /**
         * Options to specify LDAP configuration
         */
        export interface ClusterSpecPostgresqlLdapArgs {
            /**
             * Bind as authentication configuration
             */
            bindAsAuth?: pulumi.Input<inputs.postgresql.v1.ClusterSpecPostgresqlLdapBindAsAuthArgs>;
            /**
             * Bind+Search authentication configuration
             */
            bindSearchAuth?: pulumi.Input<inputs.postgresql.v1.ClusterSpecPostgresqlLdapBindSearchAuthArgs>;
            /**
             * LDAP server port
             */
            port?: pulumi.Input<number>;
            /**
             * LDAP schema to be used, possible options are `ldap` and `ldaps`
             */
            scheme?: pulumi.Input<string>;
            /**
             * LDAP hostname or IP address
             */
            server?: pulumi.Input<string>;
            /**
             * Set to 'true' to enable LDAP over TLS. 'false' is default
             */
            tls?: pulumi.Input<boolean>;
        }

        /**
         * Bind as authentication configuration
         */
        export interface ClusterSpecPostgresqlLdapBindAsAuthArgs {
            /**
             * Prefix for the bind authentication option
             */
            prefix?: pulumi.Input<string>;
            /**
             * Suffix for the bind authentication option
             */
            suffix?: pulumi.Input<string>;
        }

        /**
         * Bind+Search authentication configuration
         */
        export interface ClusterSpecPostgresqlLdapBindSearchAuthArgs {
            /**
             * Root DN to begin the user search
             */
            baseDN?: pulumi.Input<string>;
            /**
             * DN of the user to bind to the directory
             */
            bindDN?: pulumi.Input<string>;
            /**
             * Secret with the password for the user to bind to the directory
             */
            bindPassword?: pulumi.Input<inputs.postgresql.v1.ClusterSpecPostgresqlLdapBindSearchAuthBindPasswordArgs>;
            /**
             * Attribute to match against the username
             */
            searchAttribute?: pulumi.Input<string>;
            /**
             * Search filter to use when doing the search+bind authentication
             */
            searchFilter?: pulumi.Input<string>;
        }

        /**
         * Secret with the password for the user to bind to the directory
         */
        export interface ClusterSpecPostgresqlLdapBindSearchAuthBindPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Requirements to be met by sync replicas. This will affect how the "synchronous_standby_names" parameter will be set up.
         */
        export interface ClusterSpecPostgresqlSyncReplicaElectionConstraintArgs {
            /**
             * This flag enables the constraints for sync replicas
             */
            enabled: pulumi.Input<boolean>;
            /**
             * A list of node labels values to extract and compare to evaluate if the pods reside in the same topology or not
             */
            nodeLabelsAntiAffinity?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Template to be used to define projected volumes, projected volumes will be mounted under `/projected` base folder
         */
        export interface ClusterSpecProjectedVolumeTemplateArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesConfigMapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesServiceAccountTokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesConfigMapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecProjectedVolumeTemplateSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface ClusterSpecProjectedVolumeTemplateSourcesServiceAccountTokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * Replica cluster configuration
         */
        export interface ClusterSpecReplicaArgs {
            /**
             * If replica mode is enabled, this cluster will be a replica of an existing cluster. Replica cluster can be created from a recovery object store or via streaming through pg_basebackup. Refer to the Replication page of the documentation for more information.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * The name of the external cluster which is the replication origin
             */
            source: pulumi.Input<string>;
        }

        /**
         * Replication slots management configuration
         */
        export interface ClusterSpecReplicationSlotsArgs {
            /**
             * Replication slots for high availability configuration
             */
            highAvailability?: pulumi.Input<inputs.postgresql.v1.ClusterSpecReplicationSlotsHighAvailabilityArgs>;
            /**
             * Standby will update the status of the local replication slots every `updateInterval` seconds (default 30).
             */
            updateInterval?: pulumi.Input<number>;
        }
        /**
         * clusterSpecReplicationSlotsArgsProvideDefaults sets the appropriate defaults for ClusterSpecReplicationSlotsArgs
         */
        export function clusterSpecReplicationSlotsArgsProvideDefaults(val: ClusterSpecReplicationSlotsArgs): ClusterSpecReplicationSlotsArgs {
            return {
                ...val,
                highAvailability: (val.highAvailability ? pulumi.output(val.highAvailability).apply(inputs.postgresql.v1.clusterSpecReplicationSlotsHighAvailabilityArgsProvideDefaults) : undefined),
                updateInterval: (val.updateInterval) ?? 30,
            };
        }

        /**
         * Replication slots for high availability configuration
         */
        export interface ClusterSpecReplicationSlotsHighAvailabilityArgs {
            /**
             * If enabled, the operator will automatically manage replication slots on the primary instance and use them in streaming replication connections with all the standby instances that are part of the HA cluster. If disabled (default), the operator will not take advantage of replication slots in streaming connections with the replicas. This feature also controls replication slots in replica cluster, from the designated primary to its cascading replicas. This can only be set at creation time.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Prefix for replication slots managed by the operator for HA. It may only contain lower case letters, numbers, and the underscore character. This can only be set at creation time. By default set to `_cnpg_`.
             */
            slotPrefix?: pulumi.Input<string>;
        }
        /**
         * clusterSpecReplicationSlotsHighAvailabilityArgsProvideDefaults sets the appropriate defaults for ClusterSpecReplicationSlotsHighAvailabilityArgs
         */
        export function clusterSpecReplicationSlotsHighAvailabilityArgsProvideDefaults(val: ClusterSpecReplicationSlotsHighAvailabilityArgs): ClusterSpecReplicationSlotsHighAvailabilityArgs {
            return {
                ...val,
                enabled: (val.enabled) ?? false,
                slotPrefix: (val.slotPrefix) ?? "_cnpg_",
            };
        }

        /**
         * Resources requirements of every generated Pod. Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
         */
        export interface ClusterSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ClusterSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SeccompProfile applied to every Pod and Container. Defaults to: `RuntimeDefault`
         */
        export interface ClusterSpecSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Configure the generation of the service account
         */
        export interface ClusterSpecServiceAccountTemplateArgs {
            /**
             * Metadata are the metadata to be used for the generated service account
             */
            metadata: pulumi.Input<inputs.postgresql.v1.ClusterSpecServiceAccountTemplateMetadataArgs>;
        }

        /**
         * Metadata are the metadata to be used for the generated service account
         */
        export interface ClusterSpecServiceAccountTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Configuration of the storage of the instances
         */
        export interface ClusterSpecStorageArgs {
            /**
             * Template to be used to generate the Persistent Volume Claim
             */
            pvcTemplate?: pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateArgs>;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes?: pulumi.Input<boolean>;
            /**
             * Size of the storage. Required if not already specified in the PVC template. Changes to this field are automatically reapplied to the created PVCs. Size cannot be decreased.
             */
            size?: pulumi.Input<string>;
            /**
             * StorageClass to use for database data (`PGDATA`). Applied after evaluating the PVC template, if available. If not specified, generated PVCs will be satisfied by the default storage class
             */
            storageClass?: pulumi.Input<string>;
        }
        /**
         * clusterSpecStorageArgsProvideDefaults sets the appropriate defaults for ClusterSpecStorageArgs
         */
        export function clusterSpecStorageArgsProvideDefaults(val: ClusterSpecStorageArgs): ClusterSpecStorageArgs {
            return {
                ...val,
                resizeInUseVolumes: (val.resizeInUseVolumes) ?? true,
            };
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecStoragePvcTemplateArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecStoragePvcTemplateDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecStoragePvcTemplateDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecStoragePvcTemplateResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ClusterSpecStoragePvcTemplateResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecStoragePvcTemplateSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecStoragePvcTemplateSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecStoragePvcTemplateSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The secret containing the superuser password. If not defined a new secret will be created with a randomly generated password
         */
        export interface ClusterSpecSuperuserSecretArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface ClusterSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
             *  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface ClusterSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)
         */
        export interface ClusterSpecWalStorageArgs {
            /**
             * Template to be used to generate the Persistent Volume Claim
             */
            pvcTemplate?: pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateArgs>;
            /**
             * Resize existent PVCs, defaults to true
             */
            resizeInUseVolumes?: pulumi.Input<boolean>;
            /**
             * Size of the storage. Required if not already specified in the PVC template. Changes to this field are automatically reapplied to the created PVCs. Size cannot be decreased.
             */
            size?: pulumi.Input<string>;
            /**
             * StorageClass to use for database data (`PGDATA`). Applied after evaluating the PVC template, if available. If not specified, generated PVCs will be satisfied by the default storage class
             */
            storageClass?: pulumi.Input<string>;
        }
        /**
         * clusterSpecWalStorageArgsProvideDefaults sets the appropriate defaults for ClusterSpecWalStorageArgs
         */
        export function clusterSpecWalStorageArgsProvideDefaults(val: ClusterSpecWalStorageArgs): ClusterSpecWalStorageArgs {
            return {
                ...val,
                resizeInUseVolumes: (val.resizeInUseVolumes) ?? true,
            };
        }

        /**
         * Template to be used to generate the Persistent Volume Claim
         */
        export interface ClusterSpecWalStoragePvcTemplateArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface ClusterSpecWalStoragePvcTemplateDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface ClusterSpecWalStoragePvcTemplateDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface ClusterSpecWalStoragePvcTemplateResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface ClusterSpecWalStoragePvcTemplateResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface ClusterSpecWalStoragePvcTemplateSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Most recently observed status of the cluster. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ClusterStatusArgs {
            /**
             * AzurePVCUpdateEnabled shows if the PVC online upgrade is enabled for this cluster
             */
            azurePVCUpdateEnabled?: pulumi.Input<boolean>;
            /**
             * The configuration for the CA and related certificates, initialized with defaults.
             */
            certificates?: pulumi.Input<inputs.postgresql.v1.ClusterStatusCertificatesArgs>;
            /**
             * The commit hash number of which this operator running
             */
            cloudNativePGCommitHash?: pulumi.Input<string>;
            /**
             * The hash of the binary of the operator
             */
            cloudNativePGOperatorHash?: pulumi.Input<string>;
            /**
             * Conditions for cluster object
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.ClusterStatusConditionsArgs>[]>;
            /**
             * The list of resource versions of the configmaps, managed by the operator. Every change here is done in the interest of the instance manager, which will refresh the configmap data
             */
            configMapResourceVersion?: pulumi.Input<inputs.postgresql.v1.ClusterStatusConfigMapResourceVersionArgs>;
            /**
             * Current primary instance
             */
            currentPrimary?: pulumi.Input<string>;
            /**
             * The timestamp when the primary was detected to be unhealthy This field is reported when spec.failoverDelay is populated or during online upgrades
             */
            currentPrimaryFailingSinceTimestamp?: pulumi.Input<string>;
            /**
             * The timestamp when the last actual promotion to primary has occurred
             */
            currentPrimaryTimestamp?: pulumi.Input<string>;
            /**
             * List of all the PVCs created by this cluster and still available which are not attached to a Pod
             */
            danglingPVC?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The first recoverability point, stored as a date in RFC3339 format
             */
            firstRecoverabilityPoint?: pulumi.Input<string>;
            /**
             * List of all the PVCs not dangling nor initializing
             */
            healthyPVC?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of all the PVCs that are being initialized by this cluster
             */
            initializingPVC?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of instance names in the cluster
             */
            instanceNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The total number of PVC Groups detected in the cluster. It may differ from the number of existing instance pods.
             */
            instances?: pulumi.Input<number>;
            /**
             * The reported state of the instances during the last reconciliation loop
             */
            instancesReportedState?: pulumi.Input<{[key: string]: pulumi.Input<inputs.postgresql.v1.ClusterStatusInstancesReportedStateArgs>}>;
            /**
             * InstancesStatus indicates in which status the instances are
             */
            instancesStatus?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * How many Jobs have been created by this cluster
             */
            jobCount?: pulumi.Input<number>;
            /**
             * Stored as a date in RFC3339 format
             */
            lastFailedBackup?: pulumi.Input<string>;
            /**
             * Stored as a date in RFC3339 format
             */
            lastSuccessfulBackup?: pulumi.Input<string>;
            /**
             * ID of the latest generated node (used to avoid node name clashing)
             */
            latestGeneratedNode?: pulumi.Input<number>;
            /**
             * ManagedRolesStatus reports the state of the managed roles in the cluster
             */
            managedRolesStatus?: pulumi.Input<inputs.postgresql.v1.ClusterStatusManagedRolesStatusArgs>;
            /**
             * OnlineUpdateEnabled shows if the online upgrade is enabled inside the cluster
             */
            onlineUpdateEnabled?: pulumi.Input<boolean>;
            /**
             * Current phase of the cluster
             */
            phase?: pulumi.Input<string>;
            /**
             * Reason for the current phase
             */
            phaseReason?: pulumi.Input<string>;
            /**
             * The integration needed by poolers referencing the cluster
             */
            poolerIntegrations?: pulumi.Input<inputs.postgresql.v1.ClusterStatusPoolerIntegrationsArgs>;
            /**
             * How many PVCs have been created by this cluster
             */
            pvcCount?: pulumi.Input<number>;
            /**
             * Current list of read pods
             */
            readService?: pulumi.Input<string>;
            /**
             * The total number of ready instances in the cluster. It is equal to the number of ready instance pods.
             */
            readyInstances?: pulumi.Input<number>;
            /**
             * List of all the PVCs that have ResizingPVC condition.
             */
            resizingPVC?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The list of resource versions of the secrets managed by the operator. Every change here is done in the interest of the instance manager, which will refresh the secret data
             */
            secretsResourceVersion?: pulumi.Input<inputs.postgresql.v1.ClusterStatusSecretsResourceVersionArgs>;
            /**
             * Target primary instance, this is different from the previous one during a switchover or a failover
             */
            targetPrimary?: pulumi.Input<string>;
            /**
             * The timestamp when the last request for a new primary has occurred
             */
            targetPrimaryTimestamp?: pulumi.Input<string>;
            /**
             * The timeline of the Postgres cluster
             */
            timelineID?: pulumi.Input<number>;
            /**
             * Instances topology.
             */
            topology?: pulumi.Input<inputs.postgresql.v1.ClusterStatusTopologyArgs>;
            /**
             * List of all the PVCs that are unusable because another PVC is missing
             */
            unusablePVC?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Current write pod
             */
            writeService?: pulumi.Input<string>;
        }

        /**
         * The configuration for the CA and related certificates, initialized with defaults.
         */
        export interface ClusterStatusCertificatesArgs {
            /**
             * The secret containing the Client CA certificate. If not defined, a new secret will be created with a self-signed CA and will be used to generate all the client certificates.<br /> <br /> Contains:<br /> <br /> - `ca.crt`: CA that should be used to validate the client certificates, used as `ssl_ca_file` of all the instances.<br /> - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided, this can be omitted.<br />
             */
            clientCASecret?: pulumi.Input<string>;
            /**
             * Expiration dates for all certificates.
             */
            expirations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The secret of type kubernetes.io/tls containing the client certificate to authenticate as the `streaming_replica` user. If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be created using the provided CA.
             */
            replicationTLSSecret?: pulumi.Input<string>;
            /**
             * The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
             */
            serverAltDNSNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The secret containing the Server CA certificate. If not defined, a new secret will be created with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br /> <br /> Contains:<br /> <br /> - `ca.crt`: CA that should be used to validate the server certificate, used as `sslrootcert` in client connection strings.<br /> - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided, this can be omitted.<br />
             */
            serverCASecret?: pulumi.Input<string>;
            /**
             * The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely. If not defined, ServerCASecret must provide also `ca.key` and a new secret will be created using the provided CA.
             */
            serverTLSSecret?: pulumi.Input<string>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, 
         *  type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: "Available", "Progressing", and "Degraded" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"` 
         *  // other fields }
         */
        export interface ClusterStatusConditionsArgs {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition. This may be an empty string.
             */
            message: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
             */
            reason: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            type: pulumi.Input<string>;
        }

        /**
         * The list of resource versions of the configmaps, managed by the operator. Every change here is done in the interest of the instance manager, which will refresh the configmap data
         */
        export interface ClusterStatusConfigMapResourceVersionArgs {
            /**
             * A map with the versions of all the config maps used to pass metrics. Map keys are the config map names, map values are the versions
             */
            metrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * InstanceReportedState describes the last reported state of an instance during a reconciliation loop
         */
        export interface ClusterStatusInstancesReportedStateArgs {
            /**
             * indicates if an instance is the primary one
             */
            isPrimary: pulumi.Input<boolean>;
            /**
             * indicates on which TimelineId the instance is
             */
            timeLineID?: pulumi.Input<number>;
        }

        /**
         * ManagedRolesStatus reports the state of the managed roles in the cluster
         */
        export interface ClusterStatusManagedRolesStatusArgs {
            /**
             * ByStatus gives the list of roles in each state
             */
            byStatus?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * CannotReconcile lists roles that cannot be reconciled in PostgreSQL, with an explanation of the cause
             */
            cannotReconcile?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * PasswordStatus gives the last transaction id and password secret version for each managed role
             */
            passwordStatus?: pulumi.Input<{[key: string]: pulumi.Input<inputs.postgresql.v1.ClusterStatusManagedRolesStatusPasswordStatusArgs>}>;
        }

        /**
         * PasswordState represents the state of the password of a managed RoleConfiguration
         */
        export interface ClusterStatusManagedRolesStatusPasswordStatusArgs {
            /**
             * the resource version of the password secret
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * the last transaction ID to affect the role definition in PostgreSQL
             */
            transactionID?: pulumi.Input<number>;
        }

        /**
         * The integration needed by poolers referencing the cluster
         */
        export interface ClusterStatusPoolerIntegrationsArgs {
            /**
             * PgBouncerIntegrationStatus encapsulates the needed integration for the pgbouncer poolers referencing the cluster
             */
            pgBouncerIntegration?: pulumi.Input<inputs.postgresql.v1.ClusterStatusPoolerIntegrationsPgBouncerIntegrationArgs>;
        }

        /**
         * PgBouncerIntegrationStatus encapsulates the needed integration for the pgbouncer poolers referencing the cluster
         */
        export interface ClusterStatusPoolerIntegrationsPgBouncerIntegrationArgs {
            secrets?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The list of resource versions of the secrets managed by the operator. Every change here is done in the interest of the instance manager, which will refresh the secret data
         */
        export interface ClusterStatusSecretsResourceVersionArgs {
            /**
             * The resource version of the "app" user secret
             */
            applicationSecretVersion?: pulumi.Input<string>;
            /**
             * The resource version of the Barman Endpoint CA if provided
             */
            barmanEndpointCA?: pulumi.Input<string>;
            /**
             * Unused. Retained for compatibility with old versions.
             */
            caSecretVersion?: pulumi.Input<string>;
            /**
             * The resource version of the PostgreSQL client-side CA secret version
             */
            clientCaSecretVersion?: pulumi.Input<string>;
            /**
             * The resource versions of the managed roles secrets
             */
            managedRoleSecretVersion?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * A map with the versions of all the secrets used to pass metrics. Map keys are the secret names, map values are the versions
             */
            metrics?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * The resource version of the "streaming_replica" user secret
             */
            replicationSecretVersion?: pulumi.Input<string>;
            /**
             * The resource version of the PostgreSQL server-side CA secret version
             */
            serverCaSecretVersion?: pulumi.Input<string>;
            /**
             * The resource version of the PostgreSQL server-side secret version
             */
            serverSecretVersion?: pulumi.Input<string>;
            /**
             * The resource version of the "postgres" user secret
             */
            superuserSecretVersion?: pulumi.Input<string>;
        }

        /**
         * Instances topology.
         */
        export interface ClusterStatusTopologyArgs {
            /**
             * Instances contains the pod topology of the instances
             */
            instances?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>;
            /**
             * NodesUsed represents the count of distinct nodes accommodating the instances. A value of '1' suggests that all instances are hosted on a single node, implying the absence of High Availability (HA). Ideally, this value should be the same as the number of instances in the Postgres HA cluster, implying shared nothing architecture on the compute side.
             */
            nodesUsed?: pulumi.Input<number>;
            /**
             * SuccessfullyExtracted indicates if the topology data was extract. It is useful to enact fallback behaviors in synchronous replica election in case of failures
             */
            successfullyExtracted?: pulumi.Input<boolean>;
        }

        /**
         * PoolerSpec defines the desired state of Pooler
         */
        export interface PoolerSpecArgs {
            /**
             * This is the cluster reference on which the Pooler will work. Pooler name should never match with any cluster name within the same namespace.
             */
            cluster: pulumi.Input<inputs.postgresql.v1.PoolerSpecClusterArgs>;
            /**
             * The deployment strategy to use for pgbouncer to replace existing pods with new ones
             */
            deploymentStrategy?: pulumi.Input<inputs.postgresql.v1.PoolerSpecDeploymentStrategyArgs>;
            /**
             * The number of replicas we want
             */
            instances: pulumi.Input<number>;
            /**
             * The configuration of the monitoring infrastructure of this pooler.
             */
            monitoring?: pulumi.Input<inputs.postgresql.v1.PoolerSpecMonitoringArgs>;
            /**
             * The PgBouncer configuration
             */
            pgbouncer: pulumi.Input<inputs.postgresql.v1.PoolerSpecPgbouncerArgs>;
            /**
             * The template of the Pod to be created
             */
            template?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateArgs>;
            /**
             * Which instances we must forward traffic to?
             */
            type: pulumi.Input<string>;
        }
        /**
         * poolerSpecArgsProvideDefaults sets the appropriate defaults for PoolerSpecArgs
         */
        export function poolerSpecArgsProvideDefaults(val: PoolerSpecArgs): PoolerSpecArgs {
            return {
                ...val,
                instances: (val.instances) ?? 1,
                monitoring: (val.monitoring ? pulumi.output(val.monitoring).apply(inputs.postgresql.v1.poolerSpecMonitoringArgsProvideDefaults) : undefined),
                pgbouncer: pulumi.output(val.pgbouncer).apply(inputs.postgresql.v1.poolerSpecPgbouncerArgsProvideDefaults),
                type: (val.type) ?? "rw",
            };
        }

        /**
         * This is the cluster reference on which the Pooler will work. Pooler name should never match with any cluster name within the same namespace.
         */
        export interface PoolerSpecClusterArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The deployment strategy to use for pgbouncer to replace existing pods with new ones
         */
        export interface PoolerSpecDeploymentStrategyArgs {
            /**
             * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
             */
            rollingUpdate?: pulumi.Input<inputs.postgresql.v1.PoolerSpecDeploymentStrategyRollingUpdateArgs>;
            /**
             * Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.
         */
        export interface PoolerSpecDeploymentStrategyRollingUpdateArgs {
            /**
             * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
             */
            maxSurge?: pulumi.Input<number | string>;
            /**
             * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
             */
            maxUnavailable?: pulumi.Input<number | string>;
        }

        /**
         * The configuration of the monitoring infrastructure of this pooler.
         */
        export interface PoolerSpecMonitoringArgs {
            /**
             * Enable or disable the `PodMonitor`
             */
            enablePodMonitor?: pulumi.Input<boolean>;
        }
        /**
         * poolerSpecMonitoringArgsProvideDefaults sets the appropriate defaults for PoolerSpecMonitoringArgs
         */
        export function poolerSpecMonitoringArgsProvideDefaults(val: PoolerSpecMonitoringArgs): PoolerSpecMonitoringArgs {
            return {
                ...val,
                enablePodMonitor: (val.enablePodMonitor) ?? false,
            };
        }

        /**
         * The PgBouncer configuration
         */
        export interface PoolerSpecPgbouncerArgs {
            /**
             * The query that will be used to download the hash of the password of a certain user. Default: "SELECT usename, passwd FROM user_search($1)". In case it is specified, also an AuthQuerySecret has to be specified and no automatic CNPG Cluster integration will be triggered.
             */
            authQuery?: pulumi.Input<string>;
            /**
             * The credentials of the user that need to be used for the authentication query. In case it is specified, also an AuthQuery (e.g. "SELECT usename, passwd FROM pg_shadow WHERE usename=$1") has to be specified and no automatic CNPG Cluster integration will be triggered.
             */
            authQuerySecret?: pulumi.Input<inputs.postgresql.v1.PoolerSpecPgbouncerAuthQuerySecretArgs>;
            /**
             * Additional parameters to be passed to PgBouncer - please check the CNPG documentation for a list of options you can configure
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When set to `true`, PgBouncer will disconnect from the PostgreSQL server, first waiting for all queries to complete, and pause all new client connections until this value is set to `false` (default). Internally, the operator calls PgBouncer's `PAUSE` and `RESUME` commands.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * PostgreSQL Host Based Authentication rules (lines to be appended to the pg_hba.conf file)
             */
            pg_hba?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The pool mode
             */
            poolMode: pulumi.Input<string>;
        }
        /**
         * poolerSpecPgbouncerArgsProvideDefaults sets the appropriate defaults for PoolerSpecPgbouncerArgs
         */
        export function poolerSpecPgbouncerArgsProvideDefaults(val: PoolerSpecPgbouncerArgs): PoolerSpecPgbouncerArgs {
            return {
                ...val,
                paused: (val.paused) ?? false,
                poolMode: (val.poolMode) ?? "session",
            };
        }

        /**
         * The credentials of the user that need to be used for the authentication query. In case it is specified, also an AuthQuery (e.g. "SELECT usename, passwd FROM pg_shadow WHERE usename=$1") has to be specified and no automatic CNPG Cluster integration will be triggered.
         */
        export interface PoolerSpecPgbouncerAuthQuerySecretArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * The template of the Pod to be created
         */
        export interface PoolerSpecTemplateArgs {
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateMetadataArgs>;
            /**
             * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
             */
            spec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface PoolerSpecTemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface PoolerSpecTemplateSpecArgs {
            /**
             * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
             */
            activeDeadlineSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityArgs>;
            /**
             * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
             */
            automountServiceAccountToken?: pulumi.Input<boolean>;
            /**
             * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
             */
            containers: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersArgs>[]>;
            /**
             * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
             */
            dnsConfig?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecDnsConfigArgs>;
            /**
             * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
             */
            dnsPolicy?: pulumi.Input<string>;
            /**
             * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
             */
            enableServiceLinks?: pulumi.Input<boolean>;
            /**
             * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
             */
            ephemeralContainers?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersArgs>[]>;
            /**
             * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecHostAliasesArgs>[]>;
            /**
             * Use the host's ipc namespace. Optional: Default to false.
             */
            hostIPC?: pulumi.Input<boolean>;
            /**
             * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Use the host's pid namespace. Optional: Default to false.
             */
            hostPID?: pulumi.Input<boolean>;
            /**
             * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
             */
            hostUsers?: pulumi.Input<boolean>;
            /**
             * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
             */
            hostname?: pulumi.Input<string>;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecImagePullSecretsArgs>[]>;
            /**
             * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersArgs>[]>;
            /**
             * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
             */
            nodeName?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
             *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
             *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
             */
            os?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecOsArgs>;
            /**
             * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md
             */
            overhead?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
             */
            preemptionPolicy?: pulumi.Input<string>;
            /**
             * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
             */
            priority?: pulumi.Input<number>;
            /**
             * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
             */
            readinessGates?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecReadinessGatesArgs>[]>;
            /**
             * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable.
             */
            resourceClaims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecResourceClaimsArgs>[]>;
            /**
             * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
             */
            restartPolicy?: pulumi.Input<string>;
            /**
             * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class
             */
            runtimeClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
             */
            schedulerName?: pulumi.Input<string>;
            /**
             * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod. 
             *  SchedulingGates can only be set at pod creation time, and be removed only afterwards. 
             *  This is a beta feature enabled by the PodSchedulingReadiness feature gate.
             */
            schedulingGates?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecSchedulingGatesArgs>[]>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
             */
            securityContext?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextArgs>;
            /**
             * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
             */
            setHostnameAsFQDN?: pulumi.Input<boolean>;
            /**
             * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
             */
            shareProcessNamespace?: pulumi.Input<boolean>;
            /**
             * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
             */
            subdomain?: pulumi.Input<string>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecTolerationsArgs>[]>;
            /**
             * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsArgs>[]>;
            /**
             * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface PoolerSpecTemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PoolerSpecTemplateSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface PoolerSpecTemplateSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * poolerSpecTemplateSpecContainersPortsArgsProvideDefaults sets the appropriate defaults for PoolerSpecTemplateSpecContainersPortsArgs
         */
        export function poolerSpecTemplateSpecContainersPortsArgsProvideDefaults(val: PoolerSpecTemplateSpecContainersPortsArgs): PoolerSpecTemplateSpecContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PoolerSpecTemplateSpecContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
         */
        export interface PoolerSpecTemplateSpecDnsConfigArgs {
            /**
             * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
             */
            nameservers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
             */
            options?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecDnsConfigOptionsArgs>[]>;
            /**
             * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
             */
            searches?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodDNSConfigOption defines DNS resolver options of a pod.
         */
        export interface PoolerSpecTemplateSpecDnsConfigOptionsArgs {
            /**
             * Required.
             */
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation. 
         *  To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersArgs {
            /**
             * Arguments to the entrypoint. The image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Lifecycle is not allowed for ephemeral containers.
             */
            lifecycle?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecycleArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            livenessProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeArgs>;
            /**
             * Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
             */
            name: pulumi.Input<string>;
            /**
             * Ports are not allowed for ephemeral containers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersPortsArgs>[]>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            readinessProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResizePolicyArgs>[]>;
            /**
             * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
             */
            resources?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResourcesArgs>;
            /**
             * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextArgs>;
            /**
             * Probes are not allowed for ephemeral containers.
             */
            startupProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. 
             *  The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.
             */
            targetContainerName?: pulumi.Input<string>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Lifecycle is not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * poolerSpecTemplateSpecEphemeralContainersPortsArgsProvideDefaults sets the appropriate defaults for PoolerSpecTemplateSpecEphemeralContainersPortsArgs
         */
        export function poolerSpecTemplateSpecEphemeralContainersPortsArgsProvideDefaults(val: PoolerSpecTemplateSpecEphemeralContainersPortsArgs): PoolerSpecTemplateSpecEphemeralContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Probes are not allowed for ephemeral containers.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecEphemeralContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface PoolerSpecTemplateSpecHostAliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface PoolerSpecTemplateSpecImagePullSecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface PoolerSpecTemplateSpecInitContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeArgs>;
            /**
             * Resources resize policy for the container.
             */
            resizePolicy?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResizePolicyArgs>[]>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersVolumeDevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersVolumeMountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromArgs>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvFromSecretRefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromConfigMapRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvFromSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromConfigMapKeyRefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface PoolerSpecTemplateSpecInitContainersEnvValueFromSecretKeyRefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePostStartTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface PoolerSpecTemplateSpecInitContainersLifecyclePreStopTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersLivenessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface PoolerSpecTemplateSpecInitContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * poolerSpecTemplateSpecInitContainersPortsArgsProvideDefaults sets the appropriate defaults for PoolerSpecTemplateSpecInitContainersPortsArgs
         */
        export function poolerSpecTemplateSpecInitContainersPortsArgsProvideDefaults(val: PoolerSpecTemplateSpecInitContainersPortsArgs): PoolerSpecTemplateSpecInitContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersReadinessProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerResizePolicy represents resource resize policy for the container.
         */
        export interface PoolerSpecTemplateSpecInitContainersResizePolicyArgs {
            /**
             * Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
             */
            resourceName: pulumi.Input<string>;
            /**
             * Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
             */
            restartPolicy: pulumi.Input<string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface PoolerSpecTemplateSpecInitContainersResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecInitContainersResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecInitContainersSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port.
             */
            grpc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeHttpGetHttpHeadersArgs {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PoolerSpecTemplateSpecInitContainersStartupProbeTcpSocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface PoolerSpecTemplateSpecInitContainersVolumeDevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface PoolerSpecTemplateSpecInitContainersVolumeMountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. 
         *  If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions 
         *  If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup
         */
        export interface PoolerSpecTemplateSpecOsArgs {
            /**
             * Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null
             */
            name: pulumi.Input<string>;
        }

        /**
         * PodReadinessGate contains the reference to a pod condition
         */
        export interface PoolerSpecTemplateSpecReadinessGatesArgs {
            /**
             * ConditionType refers to a condition in the pod's condition list with matching type.
             */
            conditionType: pulumi.Input<string>;
        }

        /**
         * PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
         */
        export interface PoolerSpecTemplateSpecResourceClaimsArgs {
            /**
             * Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
             */
            name: pulumi.Input<string>;
            /**
             * Source describes where to find the ResourceClaim.
             */
            source?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecResourceClaimsSourceArgs>;
        }

        /**
         * Source describes where to find the ResourceClaim.
         */
        export interface PoolerSpecTemplateSpecResourceClaimsSourceArgs {
            /**
             * ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
             */
            resourceClaimName?: pulumi.Input<string>;
            /**
             * ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod. 
             *  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The name of the ResourceClaim will be <pod name>-<resource name>, where <resource name> is the PodResourceClaim.Name. Pod validation will reject the pod if the concatenated name is not valid for a ResourceClaim (e.g. too long). 
             *  An existing ResourceClaim with that name that is not owned by the pod will not be used for the pod to avoid using an unrelated resource by mistake. Scheduling and pod startup are then blocked until the unrelated ResourceClaim is removed. 
             *  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
             */
            resourceClaimTemplateName?: pulumi.Input<string>;
        }

        /**
         * PodSchedulingGate is associated to a Pod to guard its scheduling.
         */
        export interface PoolerSpecTemplateSpecSchedulingGatesArgs {
            /**
             * Name of the scheduling gate. Each scheduling gate must have a unique name field.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
         */
        export interface PoolerSpecTemplateSpecSecurityContextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSeLinuxOptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSeccompProfileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecSecurityContextWindowsOptionsArgs>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextSeLinuxOptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface PoolerSpecTemplateSpecSecurityContextSeccompProfileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface PoolerSpecTemplateSpecSecurityContextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface PoolerSpecTemplateSpecSecurityContextWindowsOptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface PoolerSpecTemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. 
             *  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAwsElasticBlockStoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAzureDiskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesAzureFileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesConfigMapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEmptyDirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlexVolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGcePersistentDiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGitRepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesHostPathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPersistentVolumeClaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPhotonPersistentDiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesPortworxVolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesScaleIOArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesVsphereVolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface PoolerSpecTemplateSpecVolumesAwsElasticBlockStoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesAzureDiskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesAzureFileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface PoolerSpecTemplateSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCephfsSecretRefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface PoolerSpecTemplateSpecVolumesCephfsSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCinderSecretRefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface PoolerSpecTemplateSpecVolumesCinderSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface PoolerSpecTemplateSpecVolumesConfigMapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface PoolerSpecTemplateSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface PoolerSpecTemplateSpecVolumesCsiNodePublishSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PoolerSpecTemplateSpecVolumesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface PoolerSpecTemplateSpecVolumesEmptyDirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PoolerSpecTemplateSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface PoolerSpecTemplateSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface PoolerSpecTemplateSpecVolumesFlexVolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesFlexVolumeSecretRefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface PoolerSpecTemplateSpecVolumesFlexVolumeSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface PoolerSpecTemplateSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface PoolerSpecTemplateSpecVolumesGcePersistentDiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface PoolerSpecTemplateSpecVolumesGitRepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface PoolerSpecTemplateSpecVolumesHostPathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesIscsiSecretRefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface PoolerSpecTemplateSpecVolumesIscsiSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface PoolerSpecTemplateSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface PoolerSpecTemplateSpecVolumesPersistentVolumeClaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesPhotonPersistentDiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesPortworxVolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesConfigMapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface PoolerSpecTemplateSpecVolumesProjectedSourcesServiceAccountTokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface PoolerSpecTemplateSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface PoolerSpecTemplateSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesRbdSecretRefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface PoolerSpecTemplateSpecVolumesRbdSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface PoolerSpecTemplateSpecVolumesScaleIOArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesScaleIOSecretRefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface PoolerSpecTemplateSpecVolumesScaleIOSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface PoolerSpecTemplateSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface PoolerSpecTemplateSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface PoolerSpecTemplateSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.postgresql.v1.PoolerSpecTemplateSpecVolumesStorageosSecretRefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface PoolerSpecTemplateSpecVolumesStorageosSecretRefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface PoolerSpecTemplateSpecVolumesVsphereVolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * PoolerStatus defines the observed state of Pooler
         */
        export interface PoolerStatusArgs {
            /**
             * The number of pods trying to be scheduled
             */
            instances?: pulumi.Input<number>;
            /**
             * The resource version of the config object
             */
            secrets?: pulumi.Input<inputs.postgresql.v1.PoolerStatusSecretsArgs>;
        }

        /**
         * The resource version of the config object
         */
        export interface PoolerStatusSecretsArgs {
            /**
             * The client CA secret version
             */
            clientCA?: pulumi.Input<inputs.postgresql.v1.PoolerStatusSecretsClientCAArgs>;
            /**
             * The version of the secrets used by PgBouncer
             */
            pgBouncerSecrets?: pulumi.Input<inputs.postgresql.v1.PoolerStatusSecretsPgBouncerSecretsArgs>;
            /**
             * The server CA secret version
             */
            serverCA?: pulumi.Input<inputs.postgresql.v1.PoolerStatusSecretsServerCAArgs>;
            /**
             * The server TLS secret version
             */
            serverTLS?: pulumi.Input<inputs.postgresql.v1.PoolerStatusSecretsServerTLSArgs>;
        }

        /**
         * The client CA secret version
         */
        export interface PoolerStatusSecretsClientCAArgs {
            /**
             * The name of the secret
             */
            name?: pulumi.Input<string>;
            /**
             * The ResourceVersion of the secret
             */
            version?: pulumi.Input<string>;
        }

        /**
         * The version of the secrets used by PgBouncer
         */
        export interface PoolerStatusSecretsPgBouncerSecretsArgs {
            /**
             * The auth query secret version
             */
            authQuery?: pulumi.Input<inputs.postgresql.v1.PoolerStatusSecretsPgBouncerSecretsAuthQueryArgs>;
        }

        /**
         * The auth query secret version
         */
        export interface PoolerStatusSecretsPgBouncerSecretsAuthQueryArgs {
            /**
             * The name of the secret
             */
            name?: pulumi.Input<string>;
            /**
             * The ResourceVersion of the secret
             */
            version?: pulumi.Input<string>;
        }

        /**
         * The server CA secret version
         */
        export interface PoolerStatusSecretsServerCAArgs {
            /**
             * The name of the secret
             */
            name?: pulumi.Input<string>;
            /**
             * The ResourceVersion of the secret
             */
            version?: pulumi.Input<string>;
        }

        /**
         * The server TLS secret version
         */
        export interface PoolerStatusSecretsServerTLSArgs {
            /**
             * The name of the secret
             */
            name?: pulumi.Input<string>;
            /**
             * The ResourceVersion of the secret
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Specification of the desired behavior of the ScheduledBackup. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ScheduledBackupSpecArgs {
            /**
             * Indicates which ownerReference should be put inside the created backup resources.<br /> - none: no owner reference for created backup objects (same behavior as before the field was introduced)<br /> - self: sets the Scheduled backup object as owner of the backup<br /> - cluster: set the cluster as owner of the backup<br />
             */
            backupOwnerReference?: pulumi.Input<string>;
            /**
             * The cluster to backup
             */
            cluster?: pulumi.Input<inputs.postgresql.v1.ScheduledBackupSpecClusterArgs>;
            /**
             * If the first backup has to be immediately start after creation or not
             */
            immediate?: pulumi.Input<boolean>;
            /**
             * The schedule does not follow the same format used in Kubernetes CronJobs as it includes an additional seconds specifier, see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
             */
            schedule: pulumi.Input<string>;
            /**
             * If this backup is suspended or not
             */
            suspend?: pulumi.Input<boolean>;
            /**
             * The policy to decide which instance should perform this backup. If empty, it defaults to `cluster.spec.backup.target`. Available options are empty string, `primary` and `prefer-standby`. `primary` to have backups run always on primary instances, `prefer-standby` to have backups run preferably on the most updated standby, if available.
             */
            target?: pulumi.Input<string>;
        }
        /**
         * scheduledBackupSpecArgsProvideDefaults sets the appropriate defaults for ScheduledBackupSpecArgs
         */
        export function scheduledBackupSpecArgsProvideDefaults(val: ScheduledBackupSpecArgs): ScheduledBackupSpecArgs {
            return {
                ...val,
                backupOwnerReference: (val.backupOwnerReference) ?? "none",
            };
        }

        /**
         * The cluster to backup
         */
        export interface ScheduledBackupSpecClusterArgs {
            /**
             * Name of the referent.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Most recently observed status of the ScheduledBackup. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface ScheduledBackupStatusArgs {
            /**
             * The latest time the schedule
             */
            lastCheckTime?: pulumi.Input<string>;
            /**
             * Information when was the last time that backup was successfully scheduled.
             */
            lastScheduleTime?: pulumi.Input<string>;
            /**
             * Next time we will run a backup
             */
            nextScheduleTime?: pulumi.Input<string>;
        }
    }
}

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesArgs>[]>;
            /**
             * TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsArgs>;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutesArgs {
            /**
             * Kind defines the kind of the route. Rule is the only supported kind.
             */
            kind: pulumi.Input<string>;
            /**
             * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule
             */
            match: pulumi.Input<string>;
            /**
             * Middlewares defines the list of references to Middleware resources. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewaresArgs>[]>;
            /**
             * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority
             */
            priority?: pulumi.Input<number>;
            /**
             * Services defines the list of Service. It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesArgs>[]>;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServicesArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * TLS defines the TLS configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls
         */
        export interface IngressRouteSpecTlsArgs {
            /**
             * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers
             */
            certResolver?: pulumi.Input<string>;
            /**
             * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains
             */
            domains?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsDomainsArgs>[]>;
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
             */
            options?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsOptionsArgs>;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: pulumi.Input<string>;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
             */
            store?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsStoreArgs>;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomainsArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptionsArgs {
            /**
             * Name defines the name of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced TLSOption. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStoreArgs {
            /**
             * Name defines the name of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced TLSStore. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesArgs>[]>;
            /**
             * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsArgs>;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutesArgs {
            /**
             * Match defines the router's rule. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#rule_1
             */
            match: pulumi.Input<string>;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewaresArgs>[]>;
            /**
             * Priority defines the router's priority. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#priority_1
             */
            priority?: pulumi.Input<number>;
            /**
             * Services defines the list of TCP services.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesArgs>[]>;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServicesArgs {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port: pulumi.Input<number | string>;
            /**
             * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol
             */
            proxyProtocol?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocolArgs>;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates it has closed the writing capability of its connection, to close the reading capability as well, hence fully terminating the connection. It is a duration in milliseconds, defaulting to 100. A negative value means an infinite deadline (i.e. the reading capability is never closed).
             */
            terminationDelay?: pulumi.Input<number>;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocolArgs {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version?: pulumi.Input<number>;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTlsArgs {
            /**
             * CertResolver defines the name of the certificate resolver to use. Cert resolvers have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/https/acme/#certificate-resolvers
             */
            certResolver?: pulumi.Input<string>;
            /**
             * Domains defines the list of domains that will be used to issue certificates. More info: https://doc.traefik.io/traefik/v2.10/routing/routers/#domains
             */
            domains?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomainsArgs>[]>;
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
             */
            options?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptionsArgs>;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough?: pulumi.Input<boolean>;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: pulumi.Input<string>;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
             */
            store?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStoreArgs>;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomainsArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection. If not defined, the `default` TLSOption is used. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptionsArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates. Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStoreArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to. Entry points have to be configured in the static configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/entrypoints/ Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesArgs>[]>;
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutesArgs {
            /**
             * Services defines the list of UDP services.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServicesArgs>[]>;
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServicesArgs {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port: pulumi.Input<number | string>;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpecArgs {
            /**
             * AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/
             */
            addPrefix?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecAddPrefixArgs>;
            /**
             * BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/
             */
            basicAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecBasicAuthArgs>;
            /**
             * Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes
             */
            buffering?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecBufferingArgs>;
            /**
             * Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/
             */
            chain?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecChainArgs>;
            /**
             * CircuitBreaker holds the circuit breaker configuration.
             */
            circuitBreaker?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerArgs>;
            /**
             * Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/
             */
            compress?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCompressArgs>;
            /**
             * ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
             */
            contentType?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecContentTypeArgs>;
            /**
             * DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/
             */
            digestAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecDigestAuthArgs>;
            /**
             * ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/
             */
            errors?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsArgs>;
            /**
             * ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/
             */
            forwardAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecForwardAuthArgs>;
            /**
             * Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders
             */
            headers?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecHeadersArgs>;
            /**
             * InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/
             */
            inFlightReq?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqArgs>;
            /**
             * IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/
             */
            ipWhiteList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListArgs>;
            /**
             * PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/
             */
            passTLSClientCert?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertArgs>;
            /**
             * Plugin defines the middleware plugin configuration. More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
            /**
             * RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/
             */
            rateLimit?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitArgs>;
            /**
             * RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex
             */
            redirectRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRedirectRegexArgs>;
            /**
             * RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/
             */
            redirectScheme?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRedirectSchemeArgs>;
            /**
             * ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/
             */
            replacePath?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecReplacePathArgs>;
            /**
             * ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/
             */
            replacePathRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegexArgs>;
            /**
             * Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/
             */
            retry?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRetryArgs>;
            /**
             * StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/
             */
            stripPrefix?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecStripPrefixArgs>;
            /**
             * StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/
             */
            stripPrefixRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegexArgs>;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration. This middleware updates the path of a request before forwarding it. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefixArgs {
            /**
             * Prefix is the string to add before the current path in the requested URL. It should include a leading slash (/).
             */
            prefix?: pulumi.Input<string>;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuthArgs {
            /**
             * HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield
             */
            headerField?: pulumi.Input<string>;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
             */
            realm?: pulumi.Input<string>;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service. Default: false.
             */
            removeHeader?: pulumi.Input<boolean>;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: pulumi.Input<string>;
        }

        /**
         * Buffering holds the buffering middleware configuration. This middleware retries or limits the size of requests that can be forwarded to backends. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBufferingArgs {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes). If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response. Default: 0 (no maximum).
             */
            maxRequestBodyBytes?: pulumi.Input<number>;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes). If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead. Default: 0 (no maximum).
             */
            maxResponseBodyBytes?: pulumi.Input<number>;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
             */
            memRequestBodyBytes?: pulumi.Input<number>;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory. Default: 1048576 (1Mi).
             */
            memResponseBodyBytes?: pulumi.Input<number>;
            /**
             * RetryExpression defines the retry conditions. It is a logical combination of functions with operators AND (&&) and OR (||). More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/buffering/#retryexpression
             */
            retryExpression?: pulumi.Input<string>;
        }

        /**
         * Chain holds the configuration of the chain middleware. This middleware enables to define reusable combinations of other pieces of middleware. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/chain/
         */
        export interface MiddlewareSpecChainArgs {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewaresArgs>[]>;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreakerArgs {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod?: pulumi.Input<number | string>;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression?: pulumi.Input<string>;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration?: pulumi.Input<number | string>;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration?: pulumi.Input<number | string>;
        }

        /**
         * Compress holds the compress middleware configuration. This middleware compresses responses before sending them to the client, using gzip compression. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompressArgs {
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             */
            excludedContentTypes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed. Default: 1024.
             */
            minResponseBodyBytes?: pulumi.Input<number>;
        }

        /**
         * ContentType holds the content-type middleware configuration. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentTypeArgs {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it.
             */
            autoDetect?: pulumi.Input<boolean>;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration. This middleware restricts access to your services to known users. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuthArgs {
            /**
             * HeaderField defines a header field to store the authenticated user. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/basicauth/#headerfield
             */
            headerField?: pulumi.Input<string>;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme. Default: traefik.
             */
            realm?: pulumi.Input<string>;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader?: pulumi.Input<boolean>;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: pulumi.Input<string>;
        }

        /**
         * ErrorPage holds the custom error middleware configuration. This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrorsArgs {
            /**
             * Query defines the URL for the error page (hosted by service). The {status} variable can be used in order to insert the status code in the URL.
             */
            query?: pulumi.Input<string>;
            /**
             * Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service
             */
            service?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceArgs>;
            /**
             * Status defines which status or range of statuses should result in an error page. It can be either a status code as a number (500), as multiple comma-separated numbers (500,502), as ranges by separating two codes with a dash (500-599), or a combination of the two (404,418,500-599).
             */
            status?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsServiceArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration. This middleware delegates the request authentication to a Service. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuthArgs {
            /**
             * Address defines the authentication server address.
             */
            address?: pulumi.Input<string>;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server. If not set or empty then all request headers are passed.
             */
            authRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex?: pulumi.Input<string>;
            /**
             * TLS defines the configuration used to secure the connection to the authentication server.
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTlsArgs>;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader?: pulumi.Input<boolean>;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTlsArgs {
            caOptional?: pulumi.Input<boolean>;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate. The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret?: pulumi.Input<string>;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate. The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret?: pulumi.Input<string>;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
        }

        /**
         * Headers holds the headers middleware configuration. This middleware manages the requests and responses headers. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeadersArgs {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials?: pulumi.Input<boolean>;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge?: pulumi.Input<number>;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader?: pulumi.Input<boolean>;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter?: pulumi.Input<boolean>;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy?: pulumi.Input<string>;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff?: pulumi.Input<boolean>;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value. This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue?: pulumi.Input<string>;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value. This overrides the FrameDeny option.
             */
            customFrameOptionsValue?: pulumi.Input<string>;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Deprecated: use PermissionsPolicy instead.
             */
            featurePolicy?: pulumi.Input<string>;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader?: pulumi.Input<boolean>;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny?: pulumi.Input<boolean>;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing. Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain. If you would like your development environment to mimic production with complete Host blocking, SSL redirects, and STS headers, leave this as false.
             */
            isDevelopment?: pulumi.Input<boolean>;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value. This allows sites to control browser features.
             */
            permissionsPolicy?: pulumi.Input<string>;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey?: pulumi.Input<string>;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value. This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy?: pulumi.Input<string>;
            /**
             * Deprecated: use RedirectRegex instead.
             */
            sslForceHost?: pulumi.Input<boolean>;
            /**
             * Deprecated: use RedirectRegex instead.
             */
            sslHost?: pulumi.Input<string>;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request. It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Deprecated: use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect?: pulumi.Input<boolean>;
            /**
             * Deprecated: use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect?: pulumi.Input<boolean>;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains?: pulumi.Input<boolean>;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload?: pulumi.Input<boolean>;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header. If set to 0, the header is not set.
             */
            stsSeconds?: pulumi.Input<number>;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration. This middleware limits the number of requests being processed and served concurrently. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReqArgs {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request. The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount?: pulumi.Input<number>;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/#sourcecriterion
             */
            sourceCriterion?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionArgs>;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the requestHost. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs>;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: pulumi.Input<string>;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: pulumi.Input<boolean>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPWhiteList holds the IP whitelist middleware configuration. This middleware accepts / refuses requests based on the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/
         */
        export interface MiddlewareSpecIpWhiteListArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategyArgs>;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration. This middleware adds the selected data from the passed client TLS certificate to a header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTLSClientCertArgs {
            /**
             * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            info?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoArgs>;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
             */
            pem?: pulumi.Input<boolean>;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoArgs {
            /**
             * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            issuer?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoIssuerArgs>;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter?: pulumi.Input<boolean>;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore?: pulumi.Input<boolean>;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber?: pulumi.Input<boolean>;
            /**
             * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            subject?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTLSClientCertInfoSubjectArgs>;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoIssuerArgs {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName?: pulumi.Input<boolean>;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country?: pulumi.Input<boolean>;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent?: pulumi.Input<boolean>;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality?: pulumi.Input<boolean>;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization?: pulumi.Input<boolean>;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber?: pulumi.Input<boolean>;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTLSClientCertInfoSubjectArgs {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName?: pulumi.Input<boolean>;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country?: pulumi.Input<boolean>;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent?: pulumi.Input<boolean>;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality?: pulumi.Input<boolean>;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization?: pulumi.Input<boolean>;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit?: pulumi.Input<boolean>;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber?: pulumi.Input<boolean>;
        }

        /**
         * RateLimit holds the rate limit configuration. This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimitArgs {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source. It defaults to 0, which means no rate limiting. The rate is actually defined by dividing Average by Period. So for a rate below 1req/s, one needs to define a Period larger than a second.
             */
            average?: pulumi.Input<number>;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time. It defaults to 1.
             */
            burst?: pulumi.Input<number>;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as: r = Average / Period. It defaults to a second.
             */
            period?: pulumi.Input<number | string>;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
             */
            sourceCriterion?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionArgs>;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source. If several strategies are defined at the same time, an error will be raised. If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterionArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs>;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: pulumi.Input<string>;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: pulumi.Input<boolean>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/ipwhitelist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration. This middleware redirects a request using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegexArgs {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: pulumi.Input<boolean>;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement?: pulumi.Input<string>;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration. This middleware redirects requests from a scheme/port to another. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectSchemeArgs {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: pulumi.Input<boolean>;
            /**
             * Port defines the port of the new URL.
             */
            port?: pulumi.Input<string>;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * ReplacePath holds the replace path middleware configuration. This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePathArgs {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration. This middleware replaces the path of a URL using regex matching and replacement. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegexArgs {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement?: pulumi.Input<string>;
        }

        /**
         * Retry holds the retry middleware configuration. This middleware reissues requests a given number of times to a backend server if that server does not reply. As soon as the server answers, the middleware stops retrying, regardless of the response status. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetryArgs {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts?: pulumi.Input<number>;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series. The maximum interval is calculated as twice the initialInterval. If unspecified, requests will be retried immediately. The value of initialInterval should be provided in seconds or as a valid duration format, see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval?: pulumi.Input<number | string>;
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration. This middleware removes the specified prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefixArgs {
            /**
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary. Default: true.
             */
            forceSlash?: pulumi.Input<boolean>;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration. This middleware removes the matching prefixes from the URL path. More info: https://doc.traefik.io/traefik/v2.10/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegexArgs {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpecArgs {
            /**
             * InFlightConn defines the InFlightConn middleware configuration.
             */
            inFlightConn?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConnArgs>;
            /**
             * IPWhiteList defines the IPWhiteList middleware configuration.
             */
            ipWhiteList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteListArgs>;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConnArgs {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections. The middleware closes the connection if there are already amount connections opened.
             */
            amount?: pulumi.Input<number>;
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         */
        export interface MiddlewareTCPSpecIpWhiteListArgs {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpecArgs {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2?: pulumi.Input<boolean>;
            /**
             * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
             */
            forwardingTimeouts?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsArgs>;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost?: pulumi.Input<number>;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: pulumi.Input<string>;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeoutsArgs {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: pulumi.Input<number | string>;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout?: pulumi.Input<number | string>;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout?: pulumi.Input<number | string>;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout?: pulumi.Input<number | string>;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout?: pulumi.Input<number | string>;
        }

        /**
         * ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.
         */
        export interface ServersTransportTCPSpecArgs {
            /**
             * DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.
             */
            dialKeepAlive?: pulumi.Input<number | string>;
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: pulumi.Input<number | string>;
            /**
             * TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.
             */
            terminationDelay?: pulumi.Input<number | string>;
            /**
             * TLS defines the TLS configuration
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportTCPSpecTlsArgs>;
        }

        /**
         * TLS defines the TLS configuration
         */
        export interface ServersTransportTCPSpecTlsArgs {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * InsecureSkipVerify disables TLS certificate verification.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host. PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: pulumi.Input<string>;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.
             */
            rootCAsSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: pulumi.Input<string>;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportTCPSpecTlsSpiffeArgs>;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportTCPSpecTlsSpiffeArgs {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: pulumi.Input<string>;
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpecArgs {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#alpn-protocols
             */
            alpnProtocols?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#cipher-suites
             */
            cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ClientAuth defines the server's policy for TLS Client Authentication.
             */
            clientAuth?: pulumi.Input<inputs.traefik.v1alpha1.TLSOptionSpecClientAuthArgs>;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order. More info: https://doc.traefik.io/traefik/v2.10/https/tls/#curve-preferences
             */
            curvePreferences?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: None.
             */
            maxVersion?: pulumi.Input<string>;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13. Default: VersionTLS10.
             */
            minVersion?: pulumi.Input<string>;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's. It is enabled automatically when minVersion or maxVersion is set. Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites?: pulumi.Input<boolean>;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict?: pulumi.Input<boolean>;
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuthArgs {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType?: pulumi.Input<string>;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpecArgs {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecCertificatesArgs>[]>;
            /**
             * DefaultCertificate defines the default certificate configuration.
             */
            defaultCertificate?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificateArgs>;
            /**
             * DefaultGeneratedCert defines the default generated certificate configuration.
             */
            defaultGeneratedCert?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertArgs>;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificatesArgs {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificateArgs {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCertArgs {
            /**
             * Domain is the domain definition for the DefaultCertificate.
             */
            domain?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomainArgs>;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver?: pulumi.Input<string>;
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomainArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpecArgs {
            /**
             * Mirroring defines the Mirroring service configuration.
             */
            mirroring?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringArgs>;
            /**
             * Weighted defines the Weighted Round Robin configuration.
             */
            weighted?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedArgs>;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroringArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request. If the body is larger, the request is not mirrored. Default value is -1, which means unlimited size.
             */
            maxBodySize?: pulumi.Input<number>;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsArgs>[]>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Percent defines the part of the traffic to mirror. Supported values: 0 to 100.
             */
            percent?: pulumi.Input<number>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeightedArgs {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesArgs>[]>;
            /**
             * Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyArgs>;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServicesArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService. The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer, whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP. The Kubernetes Service itself does load-balance to the pods. By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service. By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service. This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service. It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use. It allows to configure the transport between Traefik and your servers. Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers. RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body. A negative value means to flush immediately after each write to the client. This configuration is ignored when ReverseProxy recognizes a response as a streaming response; for such responses, writes are flushed to the client immediately. Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration. More info: https://doc.traefik.io/traefik/v2.10/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * Sticky defines whether sticky sessions are enabled. More info: https://doc.traefik.io/traefik/v2.10/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy. More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AccessControlPolicyArgs } from "./accessControlPolicy";
export type AccessControlPolicy = import("./accessControlPolicy").AccessControlPolicy;
export const AccessControlPolicy: typeof import("./accessControlPolicy").AccessControlPolicy = null as any;
utilities.lazyLoad(exports, ["AccessControlPolicy"], () => require("./accessControlPolicy"));

export { AccessControlPolicyListArgs } from "./accessControlPolicyList";
export type AccessControlPolicyList = import("./accessControlPolicyList").AccessControlPolicyList;
export const AccessControlPolicyList: typeof import("./accessControlPolicyList").AccessControlPolicyList = null as any;
utilities.lazyLoad(exports, ["AccessControlPolicyList"], () => require("./accessControlPolicyList"));

export { AccessControlPolicyPatchArgs } from "./accessControlPolicyPatch";
export type AccessControlPolicyPatch = import("./accessControlPolicyPatch").AccessControlPolicyPatch;
export const AccessControlPolicyPatch: typeof import("./accessControlPolicyPatch").AccessControlPolicyPatch = null as any;
utilities.lazyLoad(exports, ["AccessControlPolicyPatch"], () => require("./accessControlPolicyPatch"));

export { APIArgs } from "./api";
export type API = import("./api").API;
export const API: typeof import("./api").API = null as any;
utilities.lazyLoad(exports, ["API"], () => require("./api"));

export { APIAccessArgs } from "./apiaccess";
export type APIAccess = import("./apiaccess").APIAccess;
export const APIAccess: typeof import("./apiaccess").APIAccess = null as any;
utilities.lazyLoad(exports, ["APIAccess"], () => require("./apiaccess"));

export { APIAccessListArgs } from "./apiaccessList";
export type APIAccessList = import("./apiaccessList").APIAccessList;
export const APIAccessList: typeof import("./apiaccessList").APIAccessList = null as any;
utilities.lazyLoad(exports, ["APIAccessList"], () => require("./apiaccessList"));

export { APIAccessPatchArgs } from "./apiaccessPatch";
export type APIAccessPatch = import("./apiaccessPatch").APIAccessPatch;
export const APIAccessPatch: typeof import("./apiaccessPatch").APIAccessPatch = null as any;
utilities.lazyLoad(exports, ["APIAccessPatch"], () => require("./apiaccessPatch"));

export { APIBundleArgs } from "./apibundle";
export type APIBundle = import("./apibundle").APIBundle;
export const APIBundle: typeof import("./apibundle").APIBundle = null as any;
utilities.lazyLoad(exports, ["APIBundle"], () => require("./apibundle"));

export { APIBundleListArgs } from "./apibundleList";
export type APIBundleList = import("./apibundleList").APIBundleList;
export const APIBundleList: typeof import("./apibundleList").APIBundleList = null as any;
utilities.lazyLoad(exports, ["APIBundleList"], () => require("./apibundleList"));

export { APIBundlePatchArgs } from "./apibundlePatch";
export type APIBundlePatch = import("./apibundlePatch").APIBundlePatch;
export const APIBundlePatch: typeof import("./apibundlePatch").APIBundlePatch = null as any;
utilities.lazyLoad(exports, ["APIBundlePatch"], () => require("./apibundlePatch"));

export { APIListArgs } from "./apilist";
export type APIList = import("./apilist").APIList;
export const APIList: typeof import("./apilist").APIList = null as any;
utilities.lazyLoad(exports, ["APIList"], () => require("./apilist"));

export { APIPatchArgs } from "./apipatch";
export type APIPatch = import("./apipatch").APIPatch;
export const APIPatch: typeof import("./apipatch").APIPatch = null as any;
utilities.lazyLoad(exports, ["APIPatch"], () => require("./apipatch"));

export { APIPlanArgs } from "./apiplan";
export type APIPlan = import("./apiplan").APIPlan;
export const APIPlan: typeof import("./apiplan").APIPlan = null as any;
utilities.lazyLoad(exports, ["APIPlan"], () => require("./apiplan"));

export { APIPlanListArgs } from "./apiplanList";
export type APIPlanList = import("./apiplanList").APIPlanList;
export const APIPlanList: typeof import("./apiplanList").APIPlanList = null as any;
utilities.lazyLoad(exports, ["APIPlanList"], () => require("./apiplanList"));

export { APIPlanPatchArgs } from "./apiplanPatch";
export type APIPlanPatch = import("./apiplanPatch").APIPlanPatch;
export const APIPlanPatch: typeof import("./apiplanPatch").APIPlanPatch = null as any;
utilities.lazyLoad(exports, ["APIPlanPatch"], () => require("./apiplanPatch"));

export { APIPortalArgs } from "./apiportal";
export type APIPortal = import("./apiportal").APIPortal;
export const APIPortal: typeof import("./apiportal").APIPortal = null as any;
utilities.lazyLoad(exports, ["APIPortal"], () => require("./apiportal"));

export { APIPortalListArgs } from "./apiportalList";
export type APIPortalList = import("./apiportalList").APIPortalList;
export const APIPortalList: typeof import("./apiportalList").APIPortalList = null as any;
utilities.lazyLoad(exports, ["APIPortalList"], () => require("./apiportalList"));

export { APIPortalPatchArgs } from "./apiportalPatch";
export type APIPortalPatch = import("./apiportalPatch").APIPortalPatch;
export const APIPortalPatch: typeof import("./apiportalPatch").APIPortalPatch = null as any;
utilities.lazyLoad(exports, ["APIPortalPatch"], () => require("./apiportalPatch"));

export { APIRateLimitArgs } from "./apirateLimit";
export type APIRateLimit = import("./apirateLimit").APIRateLimit;
export const APIRateLimit: typeof import("./apirateLimit").APIRateLimit = null as any;
utilities.lazyLoad(exports, ["APIRateLimit"], () => require("./apirateLimit"));

export { APIRateLimitListArgs } from "./apirateLimitList";
export type APIRateLimitList = import("./apirateLimitList").APIRateLimitList;
export const APIRateLimitList: typeof import("./apirateLimitList").APIRateLimitList = null as any;
utilities.lazyLoad(exports, ["APIRateLimitList"], () => require("./apirateLimitList"));

export { APIRateLimitPatchArgs } from "./apirateLimitPatch";
export type APIRateLimitPatch = import("./apirateLimitPatch").APIRateLimitPatch;
export const APIRateLimitPatch: typeof import("./apirateLimitPatch").APIRateLimitPatch = null as any;
utilities.lazyLoad(exports, ["APIRateLimitPatch"], () => require("./apirateLimitPatch"));

export { APIVersionArgs } from "./apiversion";
export type APIVersion = import("./apiversion").APIVersion;
export const APIVersion: typeof import("./apiversion").APIVersion = null as any;
utilities.lazyLoad(exports, ["APIVersion"], () => require("./apiversion"));

export { APIVersionListArgs } from "./apiversionList";
export type APIVersionList = import("./apiversionList").APIVersionList;
export const APIVersionList: typeof import("./apiversionList").APIVersionList = null as any;
utilities.lazyLoad(exports, ["APIVersionList"], () => require("./apiversionList"));

export { APIVersionPatchArgs } from "./apiversionPatch";
export type APIVersionPatch = import("./apiversionPatch").APIVersionPatch;
export const APIVersionPatch: typeof import("./apiversionPatch").APIVersionPatch = null as any;
utilities.lazyLoad(exports, ["APIVersionPatch"], () => require("./apiversionPatch"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:hub.traefik.io/v1alpha1:API":
                return new API(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIAccess":
                return new APIAccess(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIAccessList":
                return new APIAccessList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIAccessPatch":
                return new APIAccessPatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIBundle":
                return new APIBundle(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIBundleList":
                return new APIBundleList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIBundlePatch":
                return new APIBundlePatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIList":
                return new APIList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPatch":
                return new APIPatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPlan":
                return new APIPlan(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPlanList":
                return new APIPlanList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPlanPatch":
                return new APIPlanPatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPortal":
                return new APIPortal(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPortalList":
                return new APIPortalList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIPortalPatch":
                return new APIPortalPatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIRateLimit":
                return new APIRateLimit(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIRateLimitList":
                return new APIRateLimitList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIRateLimitPatch":
                return new APIRateLimitPatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIVersion":
                return new APIVersion(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIVersionList":
                return new APIVersionList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:APIVersionPatch":
                return new APIVersionPatch(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:AccessControlPolicy":
                return new AccessControlPolicy(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:AccessControlPolicyList":
                return new AccessControlPolicyList(name, <any>undefined, { urn })
            case "kubernetes:hub.traefik.io/v1alpha1:AccessControlPolicyPatch":
                return new AccessControlPolicyPatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "hub.traefik.io/v1alpha1", _module)
